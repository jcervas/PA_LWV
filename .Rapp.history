x.declin <- get(paste0(p, ".declination"))
t.test(x.mm)
mean(30, 37, 36, 43, 42, 43, 43, 46, 41, 42)
mean(c(30, 37, 36, 43, 42, 43, 43, 46, 41, 42))
x.mm
mean(x.mm)
x <- x.mmd
x <- x.mm
n <- length(x)
xbar <- mean(x)
nboot=20
tmpdata = sample(x,n*nboot, replace=TRUE)
tmpdata
bsmeans = colMeans(bootstrapsample)
bootstrapsample = matrix(tmpdata, nrow=n, ncol=nboot)
bootstrapsample
bsmeans = colMeans(bootstrapsample)
deltastar = bsmeans - xbar
deltastar
d = quantile(deltastar, c(0.025, 0.975))
ci = xbar - c(d[2], d[1])#
#
cat(’Confidence interval: ’,ci, ’\n’)
ci = xbar - c(d[2], d[1])#
#
cat(`Confidence interval: ’,ci, ’\n’)
ci
x <- court.comp
x
nboot <- 1000
n <- length(x)
tmpdata = sample(x,n*nboot, replace=TRUE)
tmpdata
bootstrapsample = matrix(tmpdata, nrow=n, ncol=nboot)
bootstrapsample
colMeans(bootstrapsample)
deltastar = bsmeans - xbar
d = quantile(deltastar, c(0.1, 0.9))
ci = xbar - c(d[2], d[1])
ci
xbar <- mean(x)
tmpdata = sample(x,n*nboot, replace=TRUE)
bootstrapsample = matrix(tmpdata, nrow=n, ncol=nboot)
bsmeans = colMeans(bootstrapsample)
deltastar = bsmeans - xbar
d = quantile(deltastar, c(0.025, 0.975))
ci = xbar - c(d[2], d[1])
ci
n*nboot
x = enacted.comp
n = length(x)
# sample mean
xbar = mean(x)
nboot = 1000
# Generate 20 bootstrap samples, i.e. an n x 20 array of
# random resamples from x
tmpdata = sample(x,n*nboot, replace=TRUE)
bootstrapsample = matrix(tmpdata, nrow=n, ncol=nboot)
# Compute the means x
bsmeans = colMeans(bootstrapsample)
# Compute δ∗ for each bootstrap sample
deltastar = bsmeans - xbar
# Find the 0.1 and 0.9 quantile for deltastar
d = quantile(deltastar, c(0.025, 0.975))
# Calculate the 80% confidence interval for the mean.
ci = xbar - c(d[2], d[1])
ci
xbar
seats(enacted.comp)
x = maps.sims.seats.5050[["enacted"]]
x
x = maps.sims.seats.5050[["enacted"]]
x
x
x = maps.sims.seats.5050[["enacted"]]
x
n = length(x)
# sample mean
xbar = mean(x)
nboot = 1000
xbar
tmpdata = sample(x,n*nboot, replace=TRUE)
bootstrapsample = matrix(tmpdata, nrow=n, ncol=nboot)
# Compute the means x
bsmeans = colMeans(bootstrapsample)
# Compute δ∗ for each bootstrap sample
deltastar = bsmeans - xbar
# Find the 0.1 and 0.9 quantile for deltastar
d = quantile(deltastar, c(0.025, 0.975))
# Calculate the 80% confidence interval for the mean.
ci = xbar - c(d[2], d[1])
ci
sd(x)
bstrap <- c()
x
.09-.05
.04/2
.04/4
quick.summary(x)
sqrt(0.004126469)
xsd <- sd(x)
n
xsd
xbar
(xbar-50)/(xsd/sqrt(1000))
(xbar-50)/xsd/sqrt(1000)
CI(x)
ci(x)
ci <- function(x) {#
    xbar <- mean(x)#
    xsd <- sd(x)#
return((xbar-50)/xsd/sqrt(length(x)))#
    }
ci(x)
x = maps.sims.seats.5050[["enacted"]]
ci(x)
w = maps.sims.seats.5050[["court"]]
ci(w)
w = maps.sims.seats.5050[["joint"]]
ci(w)
ci <- function(x) {#
    xbar <- mean(x)#
    xsd <- sd(x)#
return((xbar-.50)/xsd/sqrt(length(x)))#
    }
ci(w)
ci(x)
ci <- function(x) {#
    xbar <- mean(x)#
    xsd <- sd(x)#
return((xbar-.50)/(xsd/sqrt(length(x))))#
    }
ci(x)
ci(w)
(43.43-40)(34.02/sqrt(83))
(43.43-40)/(34.02/sqrt(83))
pnorm
pnorm(x)
pnorm(x, mean=.5)
(.09-0)/(.02/sqrt(1000))
(.09-0)/(.02/sqrt(10))
x.bias
p
p.tmp <- get(p)
s.tmp <- maps.sims.seats.5050[[x]]
v.tmp <- maps.sims.votes.5050[[x]]
x.bias <- get(paste0(p, ".bias"))
x.eg <- get(paste0(p, ".eg"))
x.mm <- get(paste0(p, ".meanmedian"))
x.declin <- get(paste0(p, ".declination"))
x.bias
p.tmp
p.bias
x.bias
r(mean(x.bias))
quick.summary(x.bias)
0.0221473*2
0.03719085/(0.0221473*2)
p
p <- "enacted.sims.5050"
p.tmp <- get(p)
s.tmp <- maps.sims.seats.5050[[x]]
v.tmp <- maps.sims.votes.5050[[x]]
x.bias <- get(paste0(p, ".bias"))
x.eg <- get(paste0(p, ".eg"))
x.mm <- get(paste0(p, ".meanmedian"))
x.declin <- get(paste0(p, ".declination"))
p.tmp
s.tmp <- maps.sims.seats.5050[[x]]
maps.sims.seats.5050
p
p.tmp <- get(p)
s.tmp <- maps.sims.seats.5050[[x]]
s.tmp <- maps.sims.seats.5050[["enacted"]]
x <- "enacted"
p <- (paste0(x, ".sims.5050"))
p.tmp <- get(p)
s.tmp <- maps.sims.seats.5050[[x]]
v.tmp <- maps.sims.votes.5050[[x]]
x.bias <- get(paste0(p, ".bias"))
x.eg <- get(paste0(p, ".eg"))
x.mm <- get(paste0(p, ".meanmedian"))
x.declin <- get(paste0(p, ".declination"))
quick.summary(x.bias)
t.test
?t.test
t.test(x.bias)
t.test(x.bias, mu=0)
p <- (enacted.sims.5050)
p <- ("enacted.sims.5050")
x.bias <- get(paste0(p, ".bias"))
t.test(x.bias, mu=0)
p <- ("court.sims.5050")
x.bias <- get(paste0(p, ".bias"))
t.test(x.bias, mu=0)
hist(x.bias)
pnorm(0, .09, .02)
pnorm(0, .09, .02, lower.tail=F)
pnorm
p
.08--.01
.09/2
pnorm(0, .04, .045)
quick.summary(x.bias)
quick.summary(x.bias)[1]
b <- quick.summary(x.bias)[2]
sd <- quick.summary(x.bias)[2]
m <- quick.summary(x.bias)[1]
pnorm(0, m, sd)
stars <- function(m, s) {#
    strs <- ifelse(s<=0.05, "**", ifelse(s<0.05>=0.001, "***", ""))#
    return(paste0(x, "^{", strs, "}"))#
}
stars <- function(m, s) {#
    strs <- ifelse(s<=0.05, "**", ifelse(>=0.001s<0.05, "***"), "")#
    return(paste0(x, "^{", strs, "}"))#
}
stars <- function(m, s) {#
    strs <- ifelse(s<=0.001, "***", 0.001<s<0.05, "**")#
    return(paste0(x, "^{", strs, "}"))#
}
s
s <- 0.00001
s
s <- 0.00001
0.001<s<0.05
stars <- function(m, s) {#
    strs <- ifelse(s<=0.001, "***", 0.001 <s <= 0.05, "**")#
    return(paste0(x, "^{", strs, "}"))#
}
strs <- ifelse(s<=0.001, "***", 0.001 <s <= 0.05, "**")
findInterval(s, c(.05,.001))
s
stars <- function(m, s) {#
    strs <- ifelse(s<=0.001, "***", [0.001 < s <= 0.05], "**")#
    return(paste0(x, "^{", strs, "}"))#
}
[0.001 < s <= 0.05]
between
stars <- function(m, s) {#
    strs <- ifelse(s<=0.001, "***", [0.001 < s $ s <= 0.05], "**")#
    return(paste0(x, "^{", strs, "}"))#
}
0.001 < s $ s <= 0.05
0.001 < s & s <= 0.05
stars <- function(m, s) {#
    strs <- ifelse(s<=0.001, "***", 0.001 < s & s <= 0.05, "**")#
    return(paste0(x, "^{", strs, "}"))#
}
stars(pnorm(0, m, sd))
stars <- function(m, s) {#
    strs <- ifelse(s<=0.001, "***",ifelse(0.001 < s & s <= 0.05, "**", ""))#
    return(paste0(x, "^{", strs, "}"))#
}
stars(pnorm(0, m, sd))
pnorm(0, m, sd)
stars <- function(s) {#
    strs <- ifelse(s<=0.001, "***",ifelse(0.001 < s & s <= 0.05, "**", ""))#
    return(paste0(x, "^{", strs, "}"))#
}
stars(pnorm(0, m, sd))
stars <- function(s) {#
    strs <- ifelse(s<=0.001, "***",ifelse(0.001 < s & s <= 0.05, "**", ""))#
    return(paste0(s, "^{", strs, "}"))#
}
stars(pnorm(0, m, sd))
stars <- function(s) {#
    strs <- ifelse(s<=0.001, "***",ifelse(0.001 < s & s <= 0.05, "**", ""))#
    return(paste0(r(s), "^{", strs, "}"))#
}
stars(pnorm(0, m, sd))
m
m
sd
quick.summary(x.bias)
pnorm(0, m, sd)
quick.summary(x.eg)
pnorm(0, .24478, .06879)
enacted.sims.5050.declin
enacted.sims.5050.declination
e.dec <- enacted.sims.5050.declination
quick.summary(e.dec)
pnorm(0, .3939, .1351)
.3949/.1351
?? t distribution
qt(.975, df = c(1:10,20,50,100,1000))
c(1:10,20,50,100,1000)
tt <- seq(0, 10, len = 21)
tt
ncp <- seq(0, 6, len = 31)
ncp
ptn <- outer(tt, ncp, function(t, d) pt(t, df = 3, ncp = d))
ptn
t.tit <- "Non-central t - Probabilities"#
image(tt, ncp, ptn, zlim = c(0,1), main = t.tit)
persp(tt, ncp, ptn, zlim = 0:1, r = 2, phi = 20, theta = 200, main = t.tit,#
      xlab = "t", ylab = "non-centrality parameter",#
      zlab = "Pr(T <= t)")
plot(function(x) dt(x, df = 3, ncp = 2), -3, 11, ylim = c(0, 0.32),#
     main = "Non-central t - Density", yaxs = "i")
?qt
qt(.975, 1000)
qt(c(.05,.95))
