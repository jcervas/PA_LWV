`Table` <- function(x, caption="", label="", footnote="", out=NULL)
{#
    x <- append(x,#
paste0(#
"\n% =================================================================#
% -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE  % #
% -----------------------------------------------------------------#
\\begin{center} \\textbf{",#
caption, "} \\end{center}#
\n% ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••• \n#
\n \\begin{center} INSERT TABLE \\ref{", label, "} ABOUT HERE \\end{center}\n"),#
 after = 1)#
#
    x <- append(x,#
paste0("\\end{tabular}#
\\tabnotes{", footnote, "}#
\\end{table} #
%#
% -----------------------------------------------------------------#
% -- END TABLE -- END TABLE -- END TABLE -- END TABLE -- END TABL %#
% ================================================================= \n \n"),#
after = length(x))#
cat(paste(x, collapse = "\n"), "\n")#
cat(paste0())#
  }
Table(tab_plan_summary,#
    caption = plan_summary.caption,#
    label = plan_summary.label,#
    footnote = plan_summary.footnote)
`Table` <- function(x, caption="", label="", footnote="", out=NULL)
{#
    x <- append(x,#
paste0(#
"\n% =================================================================#
% -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE  % #
% -----------------------------------------------------------------#
\\begin{center} \\textbf{",#
caption, "} \\end{center}#
\\begin{center} INSERT TABLE \\ref{", label, "} ABOUT HERE \\end{center}#
% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••"),#
 after = 1)#
#
    x <- append(x,#
paste0("\\end{tabular}#
\\tabnotes{", footnote, "}#
\\end{table} #
%#
% -----------------------------------------------------------------#
% -- END TABLE -- END TABLE -- END TABLE -- END TABLE -- END TABL %#
% ================================================================= \n \n"),#
after = length(x))#
cat(paste(x, collapse = "\n"), "\n")#
cat(paste0())#
  }
`Table` <- function(x, caption="", label="", footnote="", out=NULL)
Table(tab_plan_summary,#
    caption = plan_summary.caption,#
    label = plan_summary.label,#
    footnote = plan_summary.footnote)
`Table` <- function(x, caption="", label="", footnote="", out=NULL)
{#
    x <- append(x,#
paste0(#
"\n% =================================================================#
% -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE  % #
% -----------------------------------------------------------------#
\\begin{center} \\textbf{",#
caption, "} \\end{center}#
\\begin{center} INSERT TABLE \\ref{", label, "} ABOUT HERE \\end{center}#
% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n#
\n% =================================================================#
% -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE  % #
% -----------------------------------------------------------------"),#
 after = 1)#
#
    x <- append(x,#
paste0("\\end{tabular}#
\\tabnotes{", footnote, "}#
\\end{table} #
%#
% -----------------------------------------------------------------#
% -- END TABLE -- END TABLE -- END TABLE -- END TABLE -- END TABL %#
% ================================================================= \n \n"),#
after = length(x))#
cat(paste(x, collapse = "\n"), "\n")#
cat(paste0())#
  }
Table(tab_plan_summary,#
    caption = plan_summary.caption,#
    label = plan_summary.label,#
    footnote = plan_summary.footnote)
`Table` <- function(x, path=NULL, caption="", label="", footnote="", out=NULL)
{#
    x <- append(x,#
paste0(#
"\n% =================================================================#
% -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE  % #
% -----------------------------------------------------------------",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\\begin{center} INSERT TABLE \\ref{", label, "} ABOUT HERE \\end{center}#
% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n#
\n% =================================================================#
% -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE  % #
% -----------------------------------------------------------------"),#
 after = 1)#
#
    x <- append(x,#
paste0("\\end{tabular}#
\\tabnotes{", footnote, "}#
\\end{table} #
%#
% -----------------------------------------------------------------#
% -- END TABLE -- END TABLE -- END TABLE -- END TABLE -- END TABL %#
% ================================================================= \n \n"),#
after = length(x))#
cat(paste(x, collapse = "\n"), "\n")#
cat(paste0())#
  }
Table(tab_plan_summary,#
    caption = plan_summary.caption,#
    label = plan_summary.label,#
    footnote = plan_summary.footnote)
`Table` <- function(x, path=NULL, caption="", label="", footnote="", out=NULL)
{#
    x <- append(x,#
paste0(#
"\n% =================================================================#
% -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE  % #
% -----------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\\begin{center} INSERT TABLE \\ref{", label, "} ABOUT HERE \\end{center}#
% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n#
\n% =================================================================#
% -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE  % #
% -----------------------------------------------------------------"),#
 after = 1)#
#
    x <- append(x,#
paste0("\\end{tabular}#
\\tabnotes{", footnote, "}#
\\end{table} #
%#
% -----------------------------------------------------------------#
% -- END TABLE -- END TABLE -- END TABLE -- END TABLE -- END TABL %#
% ================================================================= \n \n"),#
after = length(x))#
cat(paste(x, collapse = "\n"), "\n")#
cat(paste0())#
  }
Table(tab_plan_summary,#
    caption = plan_summary.caption,#
    label = plan_summary.label,#
    footnote = plan_summary.footnote)
`Table` <- function(x, path=NULL, caption="", label="", footnote="", out=NULL)
{#
    x <- append(x,#
paste0(#
"\n% =================================================================#
% -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE  % #
% -----------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n\\begin{center} INSERT TABLE \\ref{", label, "} ABOUT HERE \\end{center}#
% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n#
\n% =================================================================#
% -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE  % #
% -----------------------------------------------------------------"),#
 after = 1)#
#
    x <- append(x,#
paste0("\\end{tabular}#
\\tabnotes{", footnote, "}#
\\end{table} #
%#
% -----------------------------------------------------------------#
% -- END TABLE -- END TABLE -- END TABLE -- END TABLE -- END TABL %#
% ================================================================= \n \n"),#
after = length(x))#
cat(paste(x, collapse = "\n"), "\n")#
cat(paste0())#
  }
Table(tab_plan_summary,#
    caption = plan_summary.caption,#
    label = plan_summary.label,#
    footnote = plan_summary.footnote)
Table(tab_plan_summary,#
    path = "Table/_tab_summaries.tex",#
    caption = plan_summary.caption,#
    label = plan_summary.label,#
    footnote = plan_summary.footnote)
`Table` <- function(x, path=NULL, caption="", label="", footnote="", out=NULL)
{#
    x <- append(x,#
paste0(#
"\n% =================================================================#
% -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE  % #
% -----------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n\\begin{center}\\textbf{INSERT TABLE \\ref{", label, "} ABOUT HERE} \\end{center}#
% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n#
\n% =================================================================#
% -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE  % #
% -----------------------------------------------------------------"),#
 after = 1)#
#
    x <- append(x,#
paste0("\\end{tabular}#
\\tabnotes{", footnote, "}#
\\end{table} #
%#
% -----------------------------------------------------------------#
% -- END TABLE -- END TABLE -- END TABLE -- END TABLE -- END TABL %#
% ================================================================= \n \n"),#
after = length(x))#
cat(paste(x, collapse = "\n"), "\n")#
cat(paste0())#
  }
Table(tab_plan_summary,#
    path = "Tables/_tab_summaries.tex",#
    caption = plan_summary.caption,#
    label = plan_summary.label,#
    footnote = plan_summary.footnote)#
#
Table(congsum.tmp.tex,#
    caption = congsum.caption,#
    label = congsum.label,#
    footnote = congsum.footnote)#
#
Table(tab_gerry,  #
    caption = gerry.caption,#
    label = gerry.label, #
    footnote = gerry.footnote)#
#
Table(tab_prop,#
    caption = prop.caption,#
    label = prop.label, #
    footnote = prop.footnote)#
#
Table(district_summary,#
    caption = district_summary.caption,#
    label = district_summary.label,#
    footnote = district_summary.footnote#
    )#
#
Table(tab_congress_predict,#
    caption = congress_predict.caption,#
    label = congress_predict.label,#
    footnote = congress_predict.footnote)
b
Table(tab_gerry, #
    path = "Tables/_tab_gerry.tex", #
    caption = gerry.caption,#
    label = gerry.label, #
    footnote = gerry.footnote)
Table(tab_prop,#
    path = "Tables/_prob.tex",#
    caption = prop.caption,#
    label = prop.label, #
    footnote = prop.footnote)
Table(tab_prop,#
    path = "Tables/_tab_prob.tex",#
    caption = prop.caption,#
    label = prop.label, #
    footnote = prop.footnote)
`Table` <- function(x, path=NULL, caption="", label="", footnote="", landscape=FALSE, out=NULL)
{#
    x <- append(x,#
paste0(#
"\n% =================================================================#
% -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE  % #
% -----------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n\\begin{center}\\textbf{INSERT TABLE \\ref{", label, "} ABOUT HERE} \\end{center}#
% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n#
\n% =================================================================#
% -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE  % #
% -----------------------------------------------------------------",#
ifelse(landscape==T, "\\begin{landscape}"), ),#
 after = 1)#
#
    x <- append(x,#
paste0("\\end{tabular}#
\\tabnotes{", footnote, "}#
\\end{table} #
%#
% -----------------------------------------------------------------#
% -- END TABLE -- END TABLE -- END TABLE -- END TABLE -- END TABL %#
% ================================================================= \n \n"),#
after = length(x))#
cat(paste(x, collapse = "\n"), "\n")#
cat(paste0())#
  }
Table(tab_plan_summary,#
    path = "Tables/_tab_summaries.tex",#
    caption = plan_summary.caption,#
    label = plan_summary.label,#
    footnote = plan_summary.footnote)
`Table` <- function(x, path=NULL, caption="", label="", footnote="", landscape=FALSE, out=NULL)
{#
    x <- append(x,#
paste0(#
"\n% =================================================================#
% -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE  % #
% -----------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n\\begin{center}\\textbf{INSERT TABLE \\ref{", label, "} ABOUT HERE} \\end{center}#
% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n#
\n% =================================================================#
% -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE  % #
% -----------------------------------------------------------------",#
ifelse(landscape==T, "\\begin{landscape}", "")),#
 after = 1)#
#
    x <- append(x,#
paste0("\\end{tabular}#
\\tabnotes{", footnote, "}#
\\end{table} #
%#
% -----------------------------------------------------------------#
% -- END TABLE -- END TABLE -- END TABLE -- END TABLE -- END TABL %#
% ================================================================= \n \n"),#
after = length(x))#
cat(paste(x, collapse = "\n"), "\n")#
cat(paste0())#
  }
Table(tab_plan_summary,#
    path = "Tables/_tab_summaries.tex",#
    caption = plan_summary.caption,#
    label = plan_summary.label,#
    footnote = plan_summary.footnote)
Table(tab_plan_summary,#
    path = "Tables/_tab_summaries.tex",#
    caption = plan_summary.caption,#
    label = plan_summary.label,#
    footnote = plan_summary.footnote, landscape=T)
`Table` <- function(x, path=NULL, caption="", label="", footnote="", landscape=FALSE, out=NULL)
{#
    x <- append(x,#
paste0(#
"\n% =================================================================#
% -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE  % #
% -----------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n\\begin{center}\\textbf{INSERT TABLE \\ref{", label, "} ABOUT HERE} \\end{center}#
% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n#
\n% =================================================================#
% -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE  % #
% -----------------------------------------------------------------",#
ifelse(landscape==T, "\n\\begin{landscape}", "")),#
 after = 1)#
#
    x <- append(x,#
paste0("\\end{tabular}#
\\tabnotes{", footnote, "}#
\\end{table}",#
ifelse(landscape==T, "\n\\end{landscape}", ""),#
"%#
% -----------------------------------------------------------------#
% -- END TABLE -- END TABLE -- END TABLE -- END TABLE -- END TABL %#
% ================================================================= \n \n"),#
after = length(x))#
cat(paste(x, collapse = "\n"), "\n")#
cat(paste0())#
  }
Table(tab_plan_summary,#
    path = "Tables/_tab_summaries.tex",#
    caption = plan_summary.caption,#
    label = plan_summary.label,#
    footnote = plan_summary.footnote, landscape=T)
`Table` <- function(x, path=NULL, caption="", label="", footnote="", landscape=FALSE, out=NULL)
{#
    x <- append(x,#
paste0(#
"\n% =================================================================#
% -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE  % #
% -----------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n\\begin{center}\\textbf{INSERT TABLE \\ref{", label, "} ABOUT HERE} \\end{center}#
% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n#
\n% =================================================================#
% -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE -- TABLE  % #
% -----------------------------------------------------------------",#
ifelse(landscape==T, "\n\\begin{landscape}", "")),#
 after = 1)#
#
    x <- append(x,#
paste0("\\end{tabular}#
\\tabnotes{", footnote, "}#
\\end{table}",#
ifelse(landscape==T, "\n\\end{landscape}", ""),#
"#
% -----------------------------------------------------------------#
% -- END TABLE -- END TABLE -- END TABLE -- END TABLE -- END TABL %#
% ================================================================= \n \n"),#
after = length(x))#
cat(paste(x, collapse = "\n"), "\n")#
cat(paste0())#
  }
Table(tab_plan_summary,#
    path = "Tables/_tab_summaries.tex",#
    caption = plan_summary.caption,#
    label = plan_summary.label,#
    footnote = plan_summary.footnote, landscape=T)
Table(tab_gerry, #
    path = "Tables/_tab_gerry.tex", #
    caption = gerry.caption,#
    label = gerry.label, #
    footnote = gerry.footnote)
Table(tab_prop,#
    path = "Tables/_tab_prob.tex",#
    caption = prop.caption,#
    label = prop.label, #
    footnote = prop.footnote,#
    landscape = TRUE)
`Figure` <- function(path="", caption="", label="", footnote="")
{#
    x <- paste0("\n#
% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% --------------------------------------------------------------------- \n#
% ", caption,#
"\n \\begin{center} INSERT FIGURE \\ref{", label, "} ABOUT HERE \\end{center}#
% ---------------------------------------------------------------------#
▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄#
% ===================================================================== \n",#
#
"% # •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
% ", caption,#
"\n% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% --------------------------------------------------------------------- #
\\begin{figure}#
    \\begin{center}#
    \\caption{",caption, "}#
    \\label{", label, "}#
    \\includegraphics[width=1\\textwidth]{", path, "}#
    \\end{center}#
    \\tabnotes{", footnote, "}#
\\end{figure}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% =====================================================================\n \n"#
)#
  cat(paste(x, collapse = "\n"), "\n")#
  }
Figure(#
    path="Figures/fig_maps.pdf", #
    caption="Maps Of The Proposed Pennsylvania Congressional Districts", #
    label="fig:maps", #
    footnote="Maps a drawn with a Mercator projection. Shapefiles were obtained from the Pennsylvania Supreme Court website for the four government plans.")
`Figure` <- function(path="", caption="", label="", footnote="")
{#
    x <- paste0("\n#
% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% --------------------------------------------------------------------- \n#
% ", caption,#
"\n \\begin{center} INSERT FIGURE \\ref{", label, "} ABOUT HERE \\end{center}#
% ---------------------------------------------------------------------#
▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄#
% ===================================================================== \n",#
#
"\n% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% --------------------------------------------------------------------- #
% # •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
% ", caption,#
"\\begin{figure}#
    \\begin{center}#
    \\caption{",caption, "}#
    \\label{", label, "}#
    \\includegraphics[width=1\\textwidth]{", path, "}#
    \\end{center}#
    \\tabnotes{", footnote, "}#
\\end{figure}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% =====================================================================\n \n"#
)#
  cat(paste(x, collapse = "\n"), "\n")#
  }
Figure(#
    path="Figures/fig_maps.pdf", #
    caption="Maps Of The Proposed Pennsylvania Congressional Districts", #
    label="fig:maps", #
    footnote="Maps a drawn with a Mercator projection. Shapefiles were obtained from the Pennsylvania Supreme Court website for the four government plans.")
`Figure` <- function(path="", caption="", label="", footnote="")
{#
    x <- paste0("\n#
% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------#
% ", caption,#
"\n \\begin{center} INSERT FIGURE \\ref{", label, "} ABOUT HERE \\end{center}#
% ---------------------------------------------------------------------#
▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄#
% ===================================================================== \n",#
#
"\n% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% --------------------------------------------------------------------- #
% # •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
% ", caption,#
"\\begin{figure}#
    \\begin{center}#
    \\caption{",caption, "}#
    \\label{", label, "}#
    \\includegraphics[width=1\\textwidth]{", path, "}#
    \\end{center}#
    \\tabnotes{", footnote, "}#
\\end{figure}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% =====================================================================\n \n"#
)#
  cat(paste(x, collapse = "\n"), "\n")#
  }
Figure(#
    path="Figures/fig_maps.pdf", #
    caption="Maps Of The Proposed Pennsylvania Congressional Districts", #
    label="fig:maps", #
    footnote="Maps a drawn with a Mercator projection. Shapefiles were obtained from the Pennsylvania Supreme Court website for the four government plans.")
`Figure` <- function(path="", caption="", label="", footnote="")
{#
    x <- paste0("\n#
% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------\n"#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
"\n \\begin{center} INSERT FIGURE \\ref{", label, "} ABOUT HERE \\end{center}#
% ---------------------------------------------------------------------#
▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄#
% ===================================================================== \n",#
#
"\n% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% --------------------------------------------------------------------- #
% # •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
% ", caption,#
"\\begin{figure}#
    \\begin{center}#
    \\caption{",caption, "}#
    \\label{", label, "}#
    \\includegraphics[width=1\\textwidth]{", path, "}#
    \\end{center}#
    \\tabnotes{", footnote, "}#
\\end{figure}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% =====================================================================\n \n"#
)#
  cat(paste(x, collapse = "\n"), "\n")#
  }
`Figure` <- function(path="", caption="", label="", footnote="")
{#
    x <- paste0("\n#
% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
"\n \\begin{center} INSERT FIGURE \\ref{", label, "} ABOUT HERE \\end{center}#
% ---------------------------------------------------------------------#
▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄#
% ===================================================================== \n",#
#
"\n% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% --------------------------------------------------------------------- #
% # •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
% ", caption,#
"\\begin{figure}#
    \\begin{center}#
    \\caption{",caption, "}#
    \\label{", label, "}#
    \\includegraphics[width=1\\textwidth]{", path, "}#
    \\end{center}#
    \\tabnotes{", footnote, "}#
\\end{figure}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% =====================================================================\n \n"#
)#
  cat(paste(x, collapse = "\n"), "\n")#
  }
Figure(#
    path="Figures/fig_maps.pdf", #
    caption="Maps Of The Proposed Pennsylvania Congressional Districts", #
    label="fig:maps", #
    footnote="Maps a drawn with a Mercator projection. Shapefiles were obtained from the Pennsylvania Supreme Court website for the four government plans.")
`Figure` <- function(path="", caption="", label="", footnote="")
{#
    x <- paste0("\n#
% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n \\begin{center} INSERT FIGURE \\ref{", label, "} ABOUT HERE \\end{center}#
% ---------------------------------------------------------------------#
▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄#
% ===================================================================== \n",#
#
"\n% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% --------------------------------------------------------------------- #
% # •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
% ", caption,#
"\\begin{figure}#
    \\begin{center}#
    \\caption{",caption, "}#
    \\label{", label, "}#
    \\includegraphics[width=1\\textwidth]{", path, "}#
    \\end{center}#
    \\tabnotes{", footnote, "}#
\\end{figure}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% =====================================================================\n \n"#
)#
  cat(paste(x, collapse = "\n"), "\n")#
  }
Figure(#
    path="Figures/fig_maps.pdf", #
    caption="Maps Of The Proposed Pennsylvania Congressional Districts", #
    label="fig:maps", #
    footnote="Maps a drawn with a Mercator projection. Shapefiles were obtained from the Pennsylvania Supreme Court website for the four government plans.")
`Figure` <- function(path="", caption="", label="", footnote="")
{#
    x <- paste0("\n#
% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n \\begin{center} INSERT FIGURE \\ref{", label, "} ABOUT HERE \\end{center}#
% ---------------------------------------------------------------------#
▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄#
% ===================================================================== \n",#
#
"\n% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------" #
, caption,#
"% # •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
% #
\\begin{figure}#
    \\begin{center}#
    \\caption{",caption, "}#
    \\label{", label, "}#
    \\includegraphics[width=1\\textwidth]{", path, "}#
    \\end{center}#
    \\tabnotes{", footnote, "}#
\\end{figure}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% =====================================================================\n \n"#
)#
  cat(paste(x, collapse = "\n"), "\n")#
  }
Figure(#
    path="Figures/fig_maps.pdf", #
    caption="Maps Of The Proposed Pennsylvania Congressional Districts", #
    label="fig:maps", #
    footnote="Maps a drawn with a Mercator projection. Shapefiles were obtained from the Pennsylvania Supreme Court website for the four government plans.")
`Figure` <- function(path="", caption="", label="", footnote="")
{#
    x <- paste0("\n#
% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n \\begin{center} INSERT FIGURE \\ref{", label, "} ABOUT HERE \\end{center}#
% ---------------------------------------------------------------------#
▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄#
% ===================================================================== \n",#
#
"\n% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------\n" #
, caption,#
"% # •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
% #
\\begin{figure}#
    \\begin{center}#
    \\caption{",caption, "}#
    \\label{", label, "}#
    \\includegraphics[width=1\\textwidth]{", path, "}#
    \\end{center}#
    \\tabnotes{", footnote, "}#
\\end{figure}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% =====================================================================\n \n"#
)#
  cat(paste(x, collapse = "\n"), "\n")#
  }
Figure(#
    path="Figures/fig_maps.pdf", #
    caption="Maps Of The Proposed Pennsylvania Congressional Districts", #
    label="fig:maps", #
    footnote="Maps a drawn with a Mercator projection. Shapefiles were obtained from the Pennsylvania Supreme Court website for the four government plans.")
Figure( #
    caption="Maps Of The Proposed Pennsylvania Congressional Districts", #
    label="fig:maps", #
    footnote="Maps a drawn with a Mercator projection. Shapefiles were obtained from the Pennsylvania Supreme Court website for the four government plans.")
`Figure` <- function(path=NULL, caption="", label="", footnote="")
{#
    x <- paste0("\n#
% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n \\begin{center} INSERT FIGURE \\ref{", label, "} ABOUT HERE \\end{center}#
% ---------------------------------------------------------------------#
▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄#
% ===================================================================== \n",#
#
"\n% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------\n" #
, caption,#
"% # •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
% #
\\begin{figure}#
    \\begin{center}#
    \\caption{",caption, "}#
    \\label{", label, "}#
    \\includegraphics[width=1\\textwidth]{", path, "}#
    \\end{center}#
    \\tabnotes{", footnote, "}#
\\end{figure}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% =====================================================================\n \n"#
)#
  cat(paste(x, collapse = "\n"), "\n")#
  }
Figure( #
    caption="Maps Of The Proposed Pennsylvania Congressional Districts", #
    label="fig:maps", #
    footnote="Maps a drawn with a Mercator projection. Shapefiles were obtained from the Pennsylvania Supreme Court website for the four government plans.")
`Figure` <- function(path=NULL, caption="", label="", footnote="")
{#
    x <- paste0("\n#
% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n \\begin{center} INSERT FIGURE \\ref{", label, "} ABOUT HERE \\end{center}#
% ---------------------------------------------------------------------#
▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄#
% ===================================================================== \n",#
#
"\n% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------\n %" #
, caption,#
"% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
% #
\\begin{figure}#
    \\begin{center}#
    \\caption{",caption, "}#
    \\label{", label, "}#
    \\includegraphics[width=1\\textwidth]{", path, "}#
    \\end{center}#
    \\tabnotes{", footnote, "}#
\\end{figure}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% =====================================================================\n \n"#
)#
  cat(paste(x, collapse = "\n"), "\n")#
  }
Figure( #
    caption="Maps Of The Proposed Pennsylvania Congressional Districts", #
    label="fig:maps", #
    footnote="Maps a drawn with a Mercator projection. Shapefiles were obtained from the Pennsylvania Supreme Court website for the four government plans.")
`Figure` <- function(path=NULL, caption="", label="", footnote="")
{#
    x <- paste0("\n#
% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n \\begin{center} INSERT FIGURE \\ref{", label, "} ABOUT HERE \\end{center}#
% ---------------------------------------------------------------------#
▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄#
% ===================================================================== \n",#
#
"\n% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------\n % " #
, caption,#
"% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
% #
\\begin{figure}#
    \\begin{center}#
    \\caption{",caption, "}#
    \\label{", label, "}#
    \\includegraphics[width=1\\textwidth]{", path, "}#
    \\end{center}#
    \\tabnotes{", footnote, "}#
\\end{figure}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% =====================================================================\n \n"#
)#
  cat(paste(x, collapse = "\n"), "\n")#
  }
Figure( #
    caption="Maps Of The Proposed Pennsylvania Congressional Districts", #
    label="fig:maps", #
    footnote="Maps a drawn with a Mercator projection. Shapefiles were obtained from the Pennsylvania Supreme Court website for the four government plans.")
`Figure` <- function(path=NULL, caption="", label="", footnote="")
{#
    x <- paste0("\n#
% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n \\begin{center} INSERT FIGURE \\ref{", label, "} ABOUT HERE \\end{center}#
% ---------------------------------------------------------------------#
▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄#
% ===================================================================== \n",#
#
"\n% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------\n #
%" , caption,#
"% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
% #
\\begin{figure}#
    \\begin{center}#
    \\caption{",caption, "}#
    \\label{", label, "}#
    \\includegraphics[width=1\\textwidth]{", path, "}#
    \\end{center}#
    \\tabnotes{", footnote, "}#
\\end{figure}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% =====================================================================\n \n"#
)#
  cat(paste(x, collapse = "\n"), "\n")#
  }
Figure( #
    caption="Maps Of The Proposed Pennsylvania Congressional Districts", #
    label="fig:maps", #
    footnote="Maps a drawn with a Mercator projection. Shapefiles were obtained from the Pennsylvania Supreme Court website for the four government plans.")
`Figure` <- function(path=NULL, caption="", label="", footnote="")
{#
    x <- paste0("\n#
% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n \\begin{center} INSERT FIGURE \\ref{", label, "} ABOUT HERE \\end{center}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% ===================================================================== \n",#
#
"\n% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------\n #
%" , caption,#
"% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
% #
\\begin{figure}#
    \\begin{center}#
    \\caption{",caption, "}#
    \\label{", label, "}#
    \\includegraphics[width=1\\textwidth]{", path, "}#
    \\end{center}#
    \\tabnotes{", footnote, "}#
\\end{figure}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% =====================================================================\n \n"#
)#
  cat(paste(x, collapse = "\n"), "\n")#
  }
Figure( #
    caption="Maps Of The Proposed Pennsylvania Congressional Districts", #
    label="fig:maps", #
    footnote="Maps a drawn with a Mercator projection. Shapefiles were obtained from the Pennsylvania Supreme Court website for the four government plans.")
`Figure` <- function(path=NULL, caption="", label="", footnote="")
{#
    x <- paste0("\n#
% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n \\begin{center} INSERT FIGURE \\ref{", label, "} ABOUT HERE \\end{center}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% ===================================================================== \n",#
#
"\n% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------\n #
% " , caption,#
"% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
% #
\\begin{figure}#
    \\begin{center}#
    \\caption{",caption, "}#
    \\label{", label, "}#
    \\includegraphics[width=1\\textwidth]{", path, "}#
    \\end{center}#
    \\tabnotes{", footnote, "}#
\\end{figure}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% =====================================================================\n \n"#
)#
  cat(paste(x, collapse = "\n"), "\n")#
  }
{#
    x <- paste0("\n#
% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n \\begin{center} INSERT FIGURE \\ref{", label, "} ABOUT HERE \\end{center}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% ===================================================================== \n",#
#
"\n% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------\n #
%" , caption,#
"% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
% #
\\begin{figure}#
    \\begin{center}#
    \\caption{",caption, "}#
    \\label{", label, "}#
    \\includegraphics[width=1\\textwidth]{", path, "}#
    \\end{center}#
    \\tabnotes{", footnote, "}#
\\end{figure}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% =====================================================================\n \n"#
)#
  cat(paste(x, collapse = "\n"), "\n")#
  }
Figure( #
    caption="Maps Of The Proposed Pennsylvania Congressional Districts", #
    label="fig:maps", #
    footnote="Maps a drawn with a Mercator projection. Shapefiles were obtained from the Pennsylvania Supreme Court website for the four government plans.")
`Figure` <- function(path=NULL, caption="", label="", footnote="")
{#
    x <- paste0("\n#
% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n \\begin{center} INSERT FIGURE \\ref{", label, "} ABOUT HERE \\end{center}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% ===================================================================== \n",#
#
"\n% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------#
% " , caption,#
"% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
% #
\\begin{figure}#
    \\begin{center}#
    \\caption{",caption, "}#
    \\label{", label, "}#
    \\includegraphics[width=1\\textwidth]{", path, "}#
    \\end{center}#
    \\tabnotes{", footnote, "}#
\\end{figure}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% =====================================================================\n \n"#
)#
  cat(paste(x, collapse = "\n"), "\n")#
  }
Figure( #
    caption="Maps Of The Proposed Pennsylvania Congressional Districts", #
    label="fig:maps", #
    footnote="Maps a drawn with a Mercator projection. Shapefiles were obtained from the Pennsylvania Supreme Court website for the four government plans.")
Table(tab_prop,#
    path = "Tables/_tab_prob.tex",#
    caption = prop.caption,#
    label = prop.label, #
    footnote = prop.footnote,#
    landscape = TRUE)
# ▀▀█▀▀ █▀▀█ █▀▀▄ █░░ █▀▀ █▀▀#
# ░░█░░ █▄▄█ █▀▀▄ █░░ █▀▀ ▀▀█#
# ░░▀░░ ▀░░▀ ▀▀▀░ ▀▀▀ ▀▀▀ ▀▀▀#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
cat(#
    "\n#
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
        CREATING TABLES . . . . . . . . . . . . . . . . . . . . .#
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n")#
sink("/dev/null")#
# races <- c("cong2016", "pres16", "ussen16", "atg16", "aud16", "trea16", "comp2016")#
statewide.contests.2016 <- c("Congress", "Presidential", "US Senate", "PA Attorneys General", "PA Auditor", "PA Treasurer", "Composite")#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# County Spliits#
county_splits <- c(41, 19, 19, 17)#
# COMPACTNESS#
geom_names <- paste0(plans, ".geom")#
#
reock.plans <- numeric()#
    for (i in 1:length(geom_names)) {#
        reock.plans <- rbind(reock.plans, REOCK(get(geom_names[i])))#
        }#
polsby.plans <- numeric()#
    for (i in 1:length(geom_names)) {#
        polsby.plans <- rbind(polsby.plans, POLSBYPOPPER(get(geom_names[i])))#
        }#
#
tab_plan_sum <- cbind.data.frame(#
    Plan = plan_names,#
    CountySplits = county_splits, #
    Reock = reock.plans, #
    PolsbyPopper = polsby.plans#
    # Pres2016 = c(seats.print(enacted.pres), seats.print(court.pres), seats.print(joint.pres), seats.print(govwolf.pres)),#
    # Comp2016 = c(seats.print(enacted.comp), seats.print(court.comp), seats.print(joint.comp), seats.print(govwolf.comp))#
    )#
tab_plan_sum#
plan_summary.caption = "County Splits and Compactness Scores of the Plans"#
plan_summary.label = "tab:summaries"#
plan_summary.footnote = "County splits include all the pieces in which a county is split, not just the total number of counties that have been split. (The latter number is the one most often reported in both court documents and in the media, but we regard the measure we report as both more precise and more informative.)"#
tab_plan_summary <- #
    stargazer(tab_plan_sum,#
        style = "apsr", #
        header = FALSE,#
        summary = FALSE,#
        model.numbers = FALSE,#
        initial.zero = TRUE,#
        digits = 3,#
        column.sep.width = "0pt",#
        rownames = FALSE,#
        multicolumn = TRUE,#
        label = plan_summary.label,#
        title = plan_summary.caption,#
        covariate.labels = ,#
        notes = plan_summary.footnote #
        )#
tab_plan_summary <- tab_plan_summary[c(-6, -7, -13, -14, -15, -16)]#
# tab_plan_summary <- append(tab_plan_summary, #
#   "  &   &  &  & \\textbf{Projected} & \\textbf{Projected}  \\\\", #
#   after = 5)#
# tab_plan_summary <- append(tab_plan_summary,#
#   "  &  \\textbf{County}  &  \\textbf{Polsby}   &   &  \\textbf{2016 using}  &  \\textbf{five state-wide} \\\\",#
#   after = 6)#
# tab_plan_summary <- append(tab_plan_summary,#
#   "  \\textbf{Plan}  &  \\textbf{Splits} &  \\textbf{Popper}  &  \\textbf{Reock}  &  \\textbf{Presidential Results}  &  \\textbf{elections in 2016} \\\\",#
#   after = 7)#
#
tab_plan_summary <- append(tab_plan_summary,#
    "  &  \\textbf{County}  &  \\textbf{Polsby}   &   \\\\",#
    after = 5)#
tab_plan_summary <- append(tab_plan_summary,#
    "  \\textbf{Plan}  &  \\textbf{Splits} &  \\textbf{Popper}  &  \\textbf{Reock}  \\\\",#
    after = 6)#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# =================================================================#
# Comparing Pennsylvania Congressional Results with State-wide Elections (2016) %#
# =================================================================#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# SUMMARY OF ELECTIONS#
congsum.caption = "US House Election Summaries (PA 2012-2016)"#
congsum.label = "tab:congsum"#
congsum.footnote = "Uncontested races are imputed with 0.25 and 0.75 for the respective winners. All votes are calculated from the Republican perspective of the two-party vote. We've adjusted all gerrymandering measures such that negative numbers indicate bias in favor of the Democrats."#
congsum.tmp <- cbind.data.frame(#
    # PA2004 = gerry(default.unc(house.2004.votes)),#
    # PA2006 = gerry(default.unc(house.2006.votes)),#
    # PA2008 = gerry(default.unc(house.2008.votes)),#
    # PA2010 = gerry(default.unc(house.2010.votes)),#
    PA2012 = gerry(default.unc(house.2012.votes)), #
    PA2014 = gerry(default.unc(house.2014.votes)), #
    PA2016 = gerry(default.unc(house.2016.votes)),#
    # PA2018 = gerry(default.unc(house.2018.votes)),#
    PA2012_2016_AVE = rowMeans(cbind(   #
    gerry(default.unc(house.2012.votes), toggle=F),#
    gerry(default.unc(house.2014.votes), toggle=F),#
    gerry(default.unc(house.2016.votes), toggle=F)))#
  )#
congsum.tmp #
colnames(congsum.tmp) <- c(seq(2012,2016,2),"AVE")#
congsum.tmp.tex <- stargazer(congsum.tmp,#
    style = "apsr", #
    summary = FALSE,#
    header = FALSE,#
    column.sep.width = "-5pt",#
    multicolumn = TRUE,#
    label = congsum.label,#
    title = congsum.caption,#
    notes = congsum.footnote)#
congsum.tmp.tex <- congsum.tmp.tex[c(-6, -16, -17, -18, -19)]#
congsum.tmp.tex[8] <- "Seats &  [13R-5D] &  [13R-5D] &  [13R-5D] & [13R-5D] \\\\ "#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
dist_summary <- #
    rbind(#
      cbind.data.frame(#
        District = seq(1,18,1),#
        sapply(composite(pa.redist.dta, "enacted"), percent)),#
        c(#
          "Statewide",#
          sapply(colMeans(composite(pa.redist.dta, "enacted")), percent)#
        )#
    )#
#
district_summary.caption = "2016 District-level Summaries for 2011 Enacted Plan"#
district_summary.label = "tab:districtvotes"#
district_summary.footnote = "Uncontested races and those with only negligible competition will be imputed with 0.25 and 0.75 for the respective winners. All votes are calculated from the Republican perspective of the two-party vote. Composite does NOT include the Congressional elections. The statewide average is the unweighted mean of districts."#
#
district_summary <- stargazer(dist_summary,#
    style = "apsr", #
    summary = FALSE,#
    header = FALSE,#
    column.sep.width = "-5pt",#
    multicolumn = TRUE,#
    rownames = FALSE,#
    label = district_summary.label,#
    title = district_summary.caption,#
    notes = "REPLACE WITH NOTES" )#
district_summary <- district_summary[c(-6, -28, -29, -30, -31)]#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
# =================================================================#
# Measures of Gerrymandering for the Eight Considered Plans#
# =================================================================#
#
nintyfive <- function(x, percent=FALSE) {#
    if (percent==TRUE){ return(paste0("(", percent(r(quantile(x[!is.na(x)], 0.025),d=1)), ", ", percent(r(quantile(x[!is.na(x)], 0.975),d=1)), ")")) }#
    return(paste0("(", r(quantile(x[!is.na(x)], 0.025)), ", ", r(quantile(x[!is.na(x)], 0.975)), ")"))#
    }#
#
gtab <- function(x) {#
    p <- (paste0(x, ".sims.5050"))#
    p.tmp <- get(p)#
    s.tmp <- maps.sims.seats.5050[[x]]#
    v.tmp <- maps.sims.votes.5050[[x]]#
    x.bias <- get(paste0(p, ".bias"))#
    x.eg <- get(paste0(p, ".eg"))#
    x.mm <- get(paste0(p, ".meanmedian"))#
    x.declin <- get(paste0(p, ".declination"))#
        return(c(#
            r(mean(x.bias)), #
                nintyfive(x.bias), #
            r(mean(x.eg)), #
                nintyfive(x.eg), #
            r(mean(x.mm)), #
                nintyfive(x.mm),#
            r(mean(x.declin)), #
                nintyfive(x.declin)#
            ))#
        }#
#
ptab <- function(x) {#
    p <- (paste0(x, ".sims.5050"))#
    p.tmp <- get(p)#
    s.tmp <- maps.sims.seats.5050[[x]]#
    v.tmp <- maps.sims.votes.5050[[x]]#
        return(c(#
            paste0(r(sum(s.tmp*18)/(1000*18)*18), "R-", r(18-sum(s.tmp*18)/(1000*18)*18), "D"),#
            paste0("(", r(quantile(s.tmp, 0.025),d=1)*18, "R-", 18-r(quantile(s.tmp, 0.025),d=1)*18, "D, ", r(quantile(s.tmp, 0.975),d=1)*18, "R-", 18-r(quantile(s.tmp, 0.975),d=1)*18, "D)"),#
            paste0(median(s.tmp)*18, "R-", 18-median(s.tmp)*18, "D"),#
            percent(sum(1 * do.call(rbind, lapply(p.tmp, function(x) mean(find.winner(x)))) > 0.5) / 1000),#
            percent(sum(1 * do.call(rbind, lapply(p.tmp, function(x) mean(find.winner(x)))) < 0.5) / 1000),#
            percent(sum(1 * do.call(rbind, lapply(p.tmp, function(x) mean(find.winner(x)))) == 0.5) / 1000)#
            ))#
}   #
#
tab_prop.gen <- #
    cbind.data.frame(#
        ptab("enacted"),#
        ptab("joint"),#
        ptab("govwolf"),#
        ptab("court")#
        )#
    colnames(tab_prop.gen) <- c(plan_names)#
    rownames(tab_prop.gen) <- c(#
        "Mean Seat Share",#
        "SDS", #
        "Median Seat Share",#
        "Probability Republican Majority",#
        "Probability Democratic Majority",#
        "Probability Tied Delegation")#
#
prop.caption = "Probabilistic Projections of Partisan Outcomes for Four Plans"#
prop.label = "tab:prob"#
prop.footnote = "Using a Composite of Five Statewide Elections (adjusted to a 50\\% Vote Share)"#
#
tab_prop.tex <- stargazer(tab_prop.gen,#
    style = "apsr", #
    summary=F,#
    column.sep.width = "-5pt", #
    float = T, #
    header = FALSE,#
    multicolumn = TRUE, #
    title= prop.caption, #
    label= prop.label,#
    notes = prop.footnote)#
tab_prop <- tab_prop.tex[c(-6, -15, -16, -17, -18)]#
#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
gerry.table.gen <- #
    cbind.data.frame(#
        gtab("enacted"),#
        gtab("joint"),#
        gtab("govwolf"),#
        gtab("court")#
        )#
#
    colnames(gerry.table.gen) <- c(plan_names)#
    rownames(gerry.table.gen) <- c(#
        "Partisan Bias", #
        "SD1",#
        "Efficiency Gap",#
        "SD2",#
        "Mean/Median",#
        "SD3",#
        "Declination",#
        "SD4")#
#
gerry.caption = "Measures of Gerrymandering for the Four Considered Plans"#
gerry.label = "tab:gerry"#
gerry.footnote = "Measures are averages of 1,000 simulations for each map using the 2016 composite. Brackets numbers are the 95\\% range."#
#
tab_gerry.tex <- stargazer(gerry.table.gen,#
    style = "apsr", #
    summary=F,#
    column.sep.width = "-5pt", #
    float = T, #
    header = FALSE,#
    multicolumn = TRUE, #
    title= gerry.caption, #
    label= gerry.label,#
    notes = gerry.footnote)#
tab_gerry <- tab_gerry.tex[c(-6, -17, -18, -19, -20)]#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
# =================================================================#
# Information about Twelve States with Constitutional Provisions similar to Pennsylvania#
# =================================================================#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# latex <- function(x) cat(paste(x, collapse="\n"), "\n")#
# states_compare.caption = "Information about Twelve States with Constitutional Provisions similar to Pennsylvania"#
# states_compare.label = "tab:states_compare"#
# states_compare.footnote = "Seats and votes are based on the 2016 five-election projection (to deal with the existence of non-contested congressional districts). Percentages are of the of district level results. This difference is why the percentages reported in columns 6 and 8 are not identical. Data from DailyKos, All about Redistricting, and Ballotpedia web sites.States with fewer than 9 districts do not have efficiency gap or median values reported because of the potential unreliability of those calculations given the small number of districts involved."#
#
# tab_states_compare <- #
#   paste("#
#       \\begin{table}#
#       \\caption{", states_compare.caption, "}#
#       \\label{", states_compare.label, "}#
#       \\begin{tabular}{#
#       >{\\centering\\arraybackslash}#
#       M{0.1\\linewidth}|#
#       M{.025\\linewidth}|#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.3\\linewidth}}#
#       \\textbf{State} & \\textbf{\\# CDs} & \\textbf{Unified Control (2011)} & \\textbf{Unified Control (2016)} & \\textbf{Seats (2016)} & \\textbf{Votes (2016)} & \\textbf{Mean District Vote Share (Dem)} & \\textbf{Median District Vote Share (Dem)} & \\textbf{Efficiency Gap} & \\textbf{Who does districting} \\\\#
#        \\hline#
#       Arizona & 9 & $\\surd$ (R) & $\\surd$ (R) & 44.4\\% & 48.1\\% & 50.4\\% & 49.4\\% & 0.08 & Independent commission \\\\#
#       Arkansas & 4 & $\\surd$ (D) & $\\surd$ (R) & 0\\% & 35.7\\% & 35.5\\% &  &  & state legislature \\\\#
#       Delaware & 1 & $\\surd$ (D) & $\\surd$ (D) & 100\\% & 55.9\\% & 56\\% &  &  & NA \\\\#
#       Illinois & 18 & $\\surd$ (D) &  & 61.1\\% & 59.0\\% & 59.6\\% & 59.8\\% & 0.08 & state legislature \\\\#
#       Indiana & 9 & $\\surd$ (R) & $\\surd$ (R) & 22.2\\% & 39.9\\% & 40.1\\% & 35.9\\% & 0.09 & state legislature \\\\#
#       Kentucky & 6 &  & $\\surd$ (R) & 16.7\\% & 34.3\\% & 33.8\\% &  &  & state legislature \\\\#
#       Oklahoma & 5 & $\\surd$ (R) & $\\surd$ (R) & 0\\% & 30.7\\% & 30.7\\% &  &  & state legislature \\\\#
#       Oregon & 5 &  & $\\surd$ (D) & 80\\% & 56.2\\% & 56\\% &  &  & state legislature \\\\#
#       South Dakota & 1 & $\\surd$ (R) & $\\surd$ (R) & 0\\% & 34.0\\% & 34\\% &  &  & NA \\\\#
#       Tennessee & 9 & $\\surd$ (R) & $\\surd$ (R) & 22.2\\% & 36.4\\% & 37.4\\% & 31.3\\% & 0.03 & state legislature \\\\#
#       Washington & 10 & $\\surd$ (D) & $\\surd$ (D) & 70\\% & 58.8\\% & 56\\% & 52.3\\% & -0.05 & 5-member independent commission \\\\#
#       Wyoming & 1 & $\\surd$ (R) & $\\surd$ (R) & 0\\% & 24.3\\% & 24.3\\% &  &  & NA ")#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
# TWO-PARTY VOTE SHARES, ACTUAL (CONGRESSIONAL)#
# tab_summary_stats <- stargazer(#
#   congress.PA.2008.2018,#
#   title="Republican Two-Party Vote/Seat Share, (PA Congressional Elections 2008-2018)",#
#   style = "apsr", #
#   header = FALSE,#
#   column.sep.width = "-5pt",#
#   multicolumn = TRUE,#
#   label = "tab:twoparty_actuals" )#
# tab_summary_stats <- tab_summary_stats[c(-6, -11)]#
#
#  Table(tab_summary_stats,#
#   caption="Two-Party Vote/Seat Share, (PA Congressional Elections 2008-2018)",#
#   label="ab:twoparty_actuals",#
#   footnote="Votes are the two-party unweighted average of PA Congressional Districts by year (uncontested elections imputed).")#
#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# AVERAGE VOTE BY DISTRICT#
means_races <- numeric()#
  base.form <- formula(. ~ 1)#
  cong.form <- formula(default.unc(enacted.elections$CONG) ~ + pahouse.2016$INC)#
for (k in colnames(enacted.elections))#
{#
  r.tmp <- composite(pa.redist.dta, "enacted")[,k]#
    reg_races <- summary(lm(update(base.form, as.formula(default.unc(r.tmp) ~ .))))#
    means_races[k] <- coef(reg_races)[1]#
}#
#
  cat(#
    "2016 Average Vote Share by State-level Contest \n"#
    )#
    print(cbind.data.frame(Race = statewide.contests.2016, Mean = percent(means_races)))#
    cat(paste("", collapse = "\n"), "\n")#
# # Regression of Race on Congressional Results#
    reg_cong_pres <- lm(update(cong.form, as.formula(. ~ . + default.unc(enacted.elections$PRES))))#
    reg_cong_ussen <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$USSEN))))#
    reg_cong_atg <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$ATTGEN))))#
    reg_cong_aud <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$AUDITOR))))#
    reg_cong_trea <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$TREASURER))))#
    reg_cong_comp <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$COMPOSITE))))#
    reg_cong_all <- lm(update(cong.form, #
      as.formula(. ~  . +  #
        default.unc(enacted.elections$PRES) + #
        default.unc(enacted.elections$USSEN) +#
        default.unc(enacted.elections$ATTGEN) +#
        default.unc(enacted.elections$AUDITOR) +#
        default.unc(enacted.elections$TREASURER))#
    ))#
#
congress_predict.caption = "Comparing Pennsylvania Congressional Results with State-wide Elections (2016)"#
congress_predict.label = "tab:tab_congress_predict"#
congress_predict.footnote = "$^{*}$p $<$ 0.05; $^{**}$p $<$ .01; $^{***}$p $<$ 0.001 \\\\ Uncontested (or non-competitive) elections replaced with 0.25 \\& 0.75 vote shares. Regressions are unweighted, ie, all districts are assumed to have identical turnout. This is the usual way political scientist measure aggregate congressional vote \\cite{GelmanKing1994_unifiedAJPS}. \\\\"#
#
tab_congress_predict <- stargazer(#
        reg_cong_pres, #
         reg_cong_ussen, #
         reg_cong_atg, #
         reg_cong_aud, #
         reg_cong_trea, #
         reg_cong_comp,#
         reg_cong_all,#
star.cutoffs = c(0.05,0.01, 0.001),#
style = "apsr", #
header = FALSE,#
model.numbers = FALSE,#
initial.zero = TRUE,#
digits = 2,#
column.sep.width = "0pt",#
multicolumn = TRUE,#
omit.stat = c("ll", "F", "ser"),#
dep.var.labels = "Actual Congressional Results (2016)",#
covariate.labels = c("Incumbency Advantage","Presidential", "US Senate", "PA Attorneys General", "PA Auditor", "PA Treasurer", "Composite"),#
label = congress_predict.label,#
title = congress_predict.caption,#
notes = congress_predict.footnote#
    )#
tab_congress_predict <- tab_congress_predict[c(-6, -26, -28, -29, -30, -31, -32)]#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
sink()#
Table(tab_plan_summary,#
    path = "Tables/_tab_summaries.tex",#
    caption = plan_summary.caption,#
    label = plan_summary.label,#
    footnote = plan_summary.footnote)#
#
Table(congsum.tmp.tex,#
    path = "Tables/_tab_congsum.tex",#
    caption = congsum.caption,#
    label = congsum.label,#
    footnote = congsum.footnote)#
#
Table(tab_gerry, #
    path = "Tables/_tab_gerry.tex", #
    caption = gerry.caption,#
    label = gerry.label, #
    footnote = gerry.footnote)#
#
Table(tab_prop,#
    path = "Tables/_tab_prob.tex",#
    caption = prop.caption,#
    label = prop.label, #
    footnote = prop.footnote,#
    landscape = TRUE)#
#
Table(district_summary,#
    caption = district_summary.caption,#
    label = district_summary.label,#
    footnote = district_summary.footnote#
    )#
#
Table(tab_congress_predict,#
    caption = congress_predict.caption,#
    label = congress_predict.label,#
    footnote = congress_predict.footnote)#
cat("#
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n#
    ")
Table(tab_prop,#
    path = "Tables/_tab_prob.tex",#
    caption = prop.caption,#
    label = prop.label, #
    footnote = prop.footnote,#
    landscape = TRUE)
`Table` <- function(x, path=NULL, caption="", label="", footnote="", landscape=FALSE, out=NULL)
{#
    x <- append(x,#
paste0(#
"\n% =====================================================================#
% ▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟#
% ---------------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n \\begin{center}\\textbf{INSERT TABLE \\ref{", label, "} ABOUT HERE} \\end{center}#
% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n#
\n% =====================================================================#
% ▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟#
% ---------------------------------------------------------------------",#
ifelse(landscape==T, "\n\\begin{landscape}", "")),#
 after = 1)#
#
    x <- append(x,#
paste0("\\end{tabular}#
\\tabnotes{", footnote, "}#
\\end{table}",#
ifelse(landscape==T, "\n\\end{landscape}", ""),#
"#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ T͎A͎B͎L͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ T͎A͎B͎L͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ T͎A͎B͎L͎E͎ ▄▀▄▀▄▀#
% ===================================================================== \n \n"),#
after = length(x))#
cat(paste(x, collapse = "\n"), "\n")#
cat(paste0())#
  }
Table(tab_prop,#
    path = "Tables/_tab_prob.tex",#
    caption = prop.caption,#
    label = prop.label, #
    footnote = prop.footnote,#
    landscape = TRUE)
# █▀▀ ░▀░ █▀▀▀ █░░█ █▀▀█ █▀▀ █▀▀#
# █▀▀ ▀█▀ █░▀█ █░░█ █▄▄▀ █▀▀ ▀▀█#
# ▀░░ ▀▀▀ ▀▀▀▀ ░▀▀▀ ▀░▀▀ ▀▀▀ ▀▀▀#
# 🅙🅞🅝🅐🅣🅗🅐🅝 🅡. 🅒🅔🅡🅥🅐🅢#
# 🅑🅔🅡🅝🅐🅡🅓 🅖🅡🅞🅕🅜🅐🅝#
#
cat(#
    "\n#
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
        CREATING PLOTS . . . . . . . . . . . . . . . . . . . . . #
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n")#
#
# % -----------------------------------------------------------------#
yrs <- seq(2012,2016,2)#
pdf(paste0("Figures/fig_sims_actual_density.pdf"), #
    width = 5, #
    height = 6)#
par(mfrow=c(3,1), #
    oma= c(3,1.5,0,0), #
    mar=c(3,1,1,1), #
    mgp= c(2,1,0))#
for (k in 1:3)#
    {       #
        sims.tmp.yrs <- sim.election(#
            votes = default.unc(house.2016.votes), #
            center = default.unc(get(paste0("house.", yrs[k],".votes"))), #
            yr=yrs[k], sims=1000, #
            sigma=sigma)#
#
        x <- (unlist(lapply(sims.tmp.yrs, seats))) # Vector of Seats from Simulations for each year#
        x.sd <- sd(x)#
        x.mean <- mean(x)#
        a <- density(x, na.rm=TRUE, from=x.mean-x.sd, to=x.mean+x.sd)#
        area <- abs(sum(a$y)*(a$x[1]-a$x[2]))#
        # twec <- sum(d$ecvotes[d$p>.5])/sum(d$ecvotes)#
        e1 <- density(x, na.rm=TRUE, adjust=2)#
    plot(e1, xlim=c(0,1), ylim=c(0,15), main=yrs[k], xlab = "", ylab = "", xaxt = "n", yaxt = "n")#
        abline(v=seq(0,1,0.1), #
            lty=2, #
            col="gray95")#
        axis(#
            side=1, #
            las=1, #
            at=seq(0,1,0.1), #
            labels=paste0(seq(0,100,10),"%"), #
            cex.axis=0.85)#
        mtext(side=1, #
            line=3, #
            ifelse(k %in% c(3, 8), "Republican Share of Seats", ""), #
            cex=0.65)#
        x4 <- min(which(e1$x>x.mean-x.sd))#
        x2 <- min(which(e1$x>x.mean+x.sd))#
    with(e1, #
        polygon(#
            x = c(x[c(x2,x2:x4,x4)]),  #
            y = c(0, y[x2:x4], 0), #
            col = "gray60", #
            angle = 225, #
            density = 40, #
            border = NA))#
    with(e1, #
        polygon(#
            x = c(x[c(x2,x2:x4,x4)]),  #
            y = c(0, y[x2:x4], 0), #
            col = "gray60", #
            angle = 135, #
            density = 40, #
            border = NA))#
        rect(#
            -.1,-1,1.1,0, #
            col="black")#
        points(e1, #
            type="l")#
        actual.seats <- seats(default.unc(get(paste0("house.", yrs[k], ".votes"))))#
            if (k == 1) arrows(#
                x0 = actual.seats - 0.03, #
                x1 = actual.seats - 0.1, #
                y0 = 7,#
                y1 = 7, #
                angle=40, #
                length=0.05, #
                code=1, #
                lty=1, #
                col="gray10", #
                lwd=1)#
            abline(v = actual.seats, lty=2, col="gray5")#
    if (k == 1) text(actual.seats - 0.1, 7, "Actual Congressional \n Results", pos=2)#
    }#
    dev.off()#
#
Figure(#
    path="Figures/fig_sims_actual_density.pdf", #
    caption="Comparing the Simulated Elections with US Congressional Elections (PA)", #
    label="fig:densityplots_congressional", #
    footnote="Plots based on the 2016 Five Election Composite data centered at the vote share for each year. All percentages in terms of Republican share of the two-party vote from the composite measure of five state-wide races in 2016. Shaded area contains one standard deviation on either side of the mean, representing 68\\% of the simulated seat percentages.")#
pdf(paste0("Figures/fig_sims_2016_maps_density.pdf"), #
    width = 8, #
    height = 10)#
par(mfrow=c(4,2), #
    oma= c(3,1.5,0,0), #
    mar=c(3,1,1,1), #
    mgp= c(2,1,0))#
for (k in 1:length(maps.sims.seats.2016))#
    {       #
        x <- do.call(rbind, maps.sims.seats.2016[k])#
        x.sd <- sd(x)#
        x.mean <- mean(x)#
        a <- density(x, na.rm=TRUE, from=x.mean-x.sd, to=x.mean+x.sd)#
        area <- abs(sum(a$y)*(a$x[1]-a$x[2]))#
        # twec <- sum(d$ecvotes[d$p>.5])/sum(d$ecvotes)#
        e1 <- density(x, na.rm=TRUE, adjust=2)#
    plot(e1, xlim=c(0,1), ylim=c(0,10), main=plan_names[k], xlab = "", ylab = "", xaxt = "n", yaxt = "n")#
        abline(v=seq(0,1,0.1), #
            lty=2, #
            col="gray95")#
        axis(#
            side=1, #
            las=1, #
            at=seq(0,1,0.1), #
            labels=paste0(seq(0,100,10),"%"), #
            cex.axis=0.85)#
        mtext(side=1, #
            line=3, #
            ifelse(k %in% c(7, 8), "Republican Share of Seats", ""), #
            cex=0.65)#
        x4 <- min(which(e1$x>x.mean-x.sd))#
        x2 <- min(which(e1$x>x.mean+x.sd))#
    with(e1, #
        polygon(#
            x = c(x[c(x2,x2:x4,x4)]),  #
            y = c(0, y[x2:x4], 0), #
            col = "gray60", #
            angle = 225, #
            density = 40, #
            border = NA))#
    with(e1, #
        polygon(#
            x = c(x[c(x2,x2:x4,x4)]),  #
            y = c(0, y[x2:x4], 0), #
            col = "gray60", #
            angle = 135, #
            density = 40, #
            border = NA))#
        rect(#
            -.1,-1,1.1,0, #
            col="black")#
        points(e1, #
            type="l")#
        actual.seats <- seats(default.unc(get(paste0("house.2016.votes"))))#
            if (k == 1) arrows(#
                x0 = actual.seats - 0.03, #
                x1 = actual.seats - 0.1, #
                y0 = 7,#
                y1 = 7, #
                angle=40, #
                length=0.05, #
                code=1, #
                lty=1, #
                col="gray10", #
                lwd=1)#
            abline(v = actual.seats, lty=2, col="gray5")#
    if (k == 1) text(actual.seats - 0.1, 7, "Actual Congressional \n Results", pos=2)#
                legend("topright", #
            legend=#
                c("SEAT SHARE ",#
                    paste0("  Average: ", #
                    percent(mean(unlist(maps.sims.seats.2016[k])))), #
                paste0("  Median: ", #
                    percent(median(unlist(maps.sims.seats.2016[k]))))),#
                 bty="n", #
                 box.lwd=0,#
                 cex=0.75)#
        }#
    dev.off()#
#
Figure(#
    path="Figures/fig_sims_2016_maps_density.pdf", #
    caption="Simulated 2016 Elections by Plan", #
    label="fig:density2016", #
    footnote="Plots based on the 2016 Five Election Composite data centered at the 2016 vote share. All percentages in terms of Republican share of the two-party vote from the composite measure of five state-wide races in 2016. Shaded area contains one standard deviation on either side of the mean, representing 68\\% of the simulated seat percentages.")#
radius <- function(x) perimeter(x) / (2 * 3.1415926535)#
# COMPACTNESS EXAMPLE: DISTRICT 6 OF THE COURT ADOPTED court PLAN AND DISTRICT 7 OF THE 2011 PLAN#
# % =================================================================#
# % -- FIGURE -- FIGURE -- FIGURE -- FIGURE -- FIGURE -- FIGURE --  %#
# % -----------------------------------------------------------------#
pdf(paste0("Figures/fig_compactness.pdf"), width = 6, height = 6)#
    par(#
        mfrow = c(2, 2), #
        mar = c(0, 0, 0, 0), #
        oma = c(0, 0, 0, 0), #
        mai = c(0, 0, 0.4, 0), #
        xpd = NA, #
        pty = "s")#
# Reock#
    plot(#
        boundingcircle(court.cd.6.boundary), main = "")#
        rect(#
            1 * par("usr")[1], #
            (1 * par("usr")[3]), #
            0.995 * par("usr")[2], #
            (1 * par("usr")[4]), #
            density = NULL, #
            angle = 45, #
            col = "gray70", #
            border = NA,#
            lty = par("lty"), #
            lwd = par("lwd"), #
            xpd = NA)#
#
    plot(#
        boundingcircle(court.cd.6.boundary), #
        col = "white", #
        add = T)#
#
    plot(#
        court.cd.6.boundary, #
        add = T, #
        col = "gray30", #
        border = "gray30")#
# Plot Polsby - Popper#
    r <- radius(court.cd.6.boundary)#
        circle.new(#
            centroid.owin(court.cd.6.boundary)$x, #
            centroid.owin(court.cd.6.boundary)$y, #
            r, #
            main = "", #
            add = F)#
        rect(#
            1.0015 * par("usr")[1], #
            (1 * par("usr")[3]), #
            1 * par("usr")[2], #
            (1 * par("usr")[4]), #
            density = NULL, #
            angle = 45, #
            col = "gray70", #
            border = NA,#
            lty = par("lty"), #
            lwd = par("lwd"), #
            xpd = NA)#
        circle(#
            centroid.owin(court.cd.6.boundary)$x, #
            centroid.owin(court.cd.6.boundary)$y, #
            r, #
            col = "white")#
#
    plot(#
        court.cd.6.boundary, #
        col = "gray30", #
        border = "gray30", #
        add = T)#
#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
    # Plot Second plan#
        # Reock#
    plot(#
        boundingcircle(enacted.cd.7.shp), #
        main = "Reock")#
        rect(#
            1 * par("usr")[1], #
            (1 * par("usr")[3]), #
            0.995 * par("usr")[2], #
            (1 * par("usr")[4]), #
            density = NULL, #
            angle = 45, #
            col = "gray70", #
            border = NA,#
            lty = par("lty"), #
            lwd = par("lwd"), #
            xpd = NA)#
    plot(#
        boundingcircle(enacted.cd.7.shp), #
        col = "white", #
        add = T)#
#
    plot(#
        enacted.cd.7.shp, #
        add = T, #
        col = "gray30", #
        border = "gray30")#
    # Plot Polsby - Popper#
    r <- radius(enacted.cd.7.shp) #
        circle.new(#
            centroid.owin(enacted.cd.7.shp)$x, #
            centroid.owin(enacted.cd.7.shp)$y, #
            r, #
            main = "Polsby-Popper", #
            add = F)#
        rect(#
            1.0015 * par("usr")[1], #
            (1 * par("usr")[3]), 1 * par("usr")[2], #
            (1 * par("usr")[4]), #
            density = NULL, #
            angle = 45, #
            col = "gray70", #
            border = NA,#
            lty = par("lty"), #
            lwd = par("lwd"), #
            xpd = NA)#
        circle(#
            centroid.owin(enacted.cd.7.shp)$x, #
            centroid.owin(enacted.cd.7.shp)$y, #
            r, #
            col = "white")#
#
    plot(#
        enacted.cd.7.shp, #
        col = "gray30", #
        border = "gray30", #
        add = T)#
    title(#
        "court Plan\n District 6", #
        outer = TRUE, #
        line = -5, #
        cex.main = 0.7)#
    title(#
        "2011 Plan Plan\n District 7", #
        outer = TRUE, #
        line = -23, #
        cex.main = 0.7)#
dev.off()#
  # write.csv(do.call("rbind", plan_compactness),  "Side Projects/PA Redistricting/Data/Plan Comparisons/compactness.csv")#
Figure(#
    path="Figures/fig_compactness.pdf", #
    caption="Compactness Example: District 6 of the Court Adopted court Plan and District 7 of the 2011 Plan", #
    label="fig:compact", #
    footnote="District 7 of the Enacted plan is recognized as the ``Goofy kicking Donald Duck'', while District 6 of the court map has the same geographic center.")#
# % =================================================================#
# % -- MAPS -- MAPS -- MAPS -- MAPS -- MAPS -- MAPS -- MAPS -- MAPS -#
# % =================================================================#
  plans.compressed <- c("enacted2011.compressed", "court.compressed", "joint.compressed", "govwolf.compressed") #, "dailykos.compressed", "authorv1.compressed", "authorv2.compressed", "authorv3.compressed")#
  plans <- c("enacted2011", "court", "joint", "govwolf") #, "dailykos.compressed", "authorv1.compressed", "authorv2.compressed", "authorv3.compressed")#
  rem.philly <- court.compressed[court.compressed@data$DISTRICT %in% c("01", "02", "03", "04", "05"),]#
  # Plot Plan Maps#
        plot(rem.philly, border=NA)#
        e <- par("usr")#
        e2 <- e + c(-.1, .1, -.1, .1)#
        x <- e[2] - (e[2]-e[1])/2#
        y <- e[4] - (e[4]-e[3])/2#
        cir <-  circle(x,y, radius=(e[2]-e[1])/2.5)#
        c <- cbind.data.frame(x=rev(cir$x),y=rev(cir$y))#
        rim <- rbind(cbind(e2[2],e2[3]),cbind(e2[2],e2[4]), cbind(e2[1],e2[4]), cbind(e2[1],e2[3]), cbind(e2[2],e2[3])) #
        colnames(rim) <- c("x", "y")#
        c <- rbind(rim,c, c[1,])#
        dev.off()#
pdf(paste0("Figures/fig_maps.pdf"), #
    width=8, #
    height=10)#
par(mar=c(0,0,0,0),#
    bg="white")#
nf <- layout(#
    rbind(mat=#
        c(0,1:2), c(3,7,8), c(4,9,10), c(5,11,12), c(6,13,14)#
        ),#
    widths= c(.1,3,1.5),#
    heights= c(.1,1,1,1,1), respect=F)#
# layout.show(nf)#
par(mar=c(0,0,0,0))#
plot(.5,.5, xlim = c(.4, .7), ylim = c(.4, .7), type = "n", axes = F, xlab = "", ylab = "")#call empty plot to keep on same scale#
text(.55, .55, " ", cex = 1.2, srt = 0, xpd = NA)#
plot(.5,.5, xlim = c(.4, .7), ylim = c(.4, .7), type = "n", axes = F, xlab = "", ylab = "")#call empty plot to keep on same scale#
text(.55, .55, "Southeast Philadelphia", cex = 1.2, srt = 0, xpd = NA)#
for (plan in 1:4){#
par(mar=c(0,0.5,0,0))#
plot(.5,.5, xlim = c(.4, .7), ylim = c(.4, .7), type = "n", axes = F, xlab = "", ylab = "")#call empty plot to keep on same scale#
text(.55, .55, plan_names[plan], cex = 1.2, srt = 90, xpd = NA)#
}#
    for (plan in 1:length(plans.compressed)) {#
        shapeFile.compressed <- get(plans.compressed[plan])#
        shapeFile <- get(plans[plan])#
    par(mar=c(0,0,0,0))#
        plot(shapeFile.compressed, #
            col="gray30", #
            border="gray70",#
            lwd=1)#
        plot(shapeFile.compressed,#
            add=T,#
            col=NA,#
            lwd=0.25,#
            border="white")#
        polygon(cir, border="black", lwd=6)#
        polygon(cir, border="white", lwd=2)#
    par(mar=c(0,0,0,0)) #
        plot(rem.philly, border=NA)#
        plot(raster::crop(shapeFile.compressed,c), add=T, col="gray30", border="gray70", lwd=1)#
        plot(pa_counties.compressed, add=T, col="NA", border="gray10", lwd=3)#
        plot(raster::crop(shapeFile.compressed,c), add=T, col=NA, border="white", lwd=0.25)#
        polygon(cir, border="black", lwd=15)#
        polygon(cir, border="white", lwd=5)#
        polygon(c, col="white", border="white")#
  }#
dev.off()#
#
Figure(#
    path="Figures/fig_maps.pdf", #
    caption="Maps Of The Proposed Pennsylvania Congressional Districts", #
    label="fig:maps", #
    footnote="Maps a drawn with a Mercator projection. Shapefiles were obtained from the Pennsylvania Supreme Court website for the four government plans.")#
cat("#
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n#
    ")#
# plot.density <- function(x) {#
#       if (is.list(x)) x <- unlist(x)#
#       x.mean <- mean(x)#
#       x.sd <- sd(x)#
#       a <- density(x, na.rm=TRUE, from=x.mean-x.sd, to=x.mean+x.sd)#
#       area <- abs(sum(a$y)*(a$x[1]-a$x[2]))#
#       # twec <- sum(d$ecvotes[d$p>.5])/sum(d$ecvotes)#
#       e1 <- density(x, na.rm=TRUE, adjust=2)#
#       plot(e1, xlim=c(0,1), ylim=c(0,10), xlab = "", ylab = "", xaxt = "n", yaxt = "n")#
#           abline(v=seq(0,1,0.1), lty=2, col="gray95")#
#           axis(side=1, las=1, at=seq(0,1,0.1), labels=paste0(seq(0,100,10),"%"), cex.axis=0.85)#
#       mtext(side=1, line=3, ifelse(k %in% c(7, 8), "Republican Share of Seats", ""), cex=0.65)#
#
#       x4 <- min(which(e1$x>x.mean-x.sd))#
#       x2 <- min(which(e1$x>x.mean+x.sd))#
#   with(e1, polygon(x=c(x[c(x2,x2:x4,x4)]),  y= c(0, y[x2:x4], 0), col="gray60", angle=225, density=40, border=NA))#
#   with(e1, polygon(x=c(x[c(x2,x2:x4,x4)]),  y= c(0, y[x2:x4], 0), col="gray60", angle=135, density=40, border=NA))#
#       rect(-.1,-1,1.1,0, col="black", fill="black")#
#       points(e1, type="l", add=TRUE)#
#       actual.seats <- seats(default.unc(get(paste0("house.", yrs[k], ".votes"))))#
# if (k ==1 ) arrows(#
#   x0 = actual.seats + 0.03, #
#   x1 = actual.seats + 0.1, #
#   y0 = 7,#
#   y1 = 7, #
#       angle=40, length=0.05, code=1, lty=1, col="gray10", lwd=1)#
#           abline(v = actual.seats, lty=2, col="gray5")#
# if (k == 1) text(actual.seats + 0.1, 7, "Actual Congressional \n Results", pos=4)#
#   }#
# % =================================================================#
# % -- FIGURE -- FIGURE -- FIGURE -- FIGURE -- FIGURE -- FIGURE --  %#
# % -----------------------------------------------------------------#
#
# # Alternative Partisanship Graph#
#
# Old <-  t((matrix(c(4, 1, 5, 8), nrow=1)))#
# govwolf <- t((matrix(c(5,2,3,8), nrow=1)))#
# Joint <- t((matrix(c(4, 3, 3, 8), nrow=1)))#
# court <- t((matrix(c(5, 4, 2, 7), nrow=1)))#
# district_per <- abs(50 - r(comp.2016.votes * 100, d = 0))#
#
# # Gradiant Version#
# pdf(paste0("Figures/fig_barplotPartisanship.pdf"), width=8, height=8)#
#   par(mfrow=c(1,9),#
#       mar=c(0,0,0,0))#
#   for (i in 1:4) #
#     {#
#     plot(x=c(0,1), y=c(0,18), col="white", xaxt="none", yaxt="none", bty="n")#
#       rect(0,0,1,1, col = paste0("grey", abs(100-district_per[1,i]*2)), border = "white")#
#       rect(0,1,1,2, col = paste0("grey", abs(100-district_per[2,i]*2)), border = "white")#
#       rect(0,2,1,3, col = paste0("grey", abs(100-district_per[3,i]*2)), border = "white")#
#       rect(0,3,1,4, col = paste0("grey", abs(100-district_per[4,i]*2)), border = "white")#
#       rect(0,4,1,5, col = paste0("grey", abs(100-district_per[5,i]*2)), border = "white")#
#       rect(0,5,1,6, col = paste0("grey", abs(100-district_per[6,i]*2)), border = "white")#
#       rect(0,6,1,7, col = paste0("grey", abs(100-district_per[7,i]*2)), border = "white")#
#       rect(0,7,1,8, col = paste0("grey", abs(100-district_per[8,i]*2)), border = "white")#
#       rect(0,8,1,9, col = paste0("grey", abs(100-district_per[9,i]*2)), border = "white")#
#       rect(0,9,1,10, col = paste0("grey", abs(100-district_per[10,i]*2)), border = "white")#
#       rect(0,10,1,11, col = paste0("grey", abs(100-district_per[11,i]*2)), border = "white")#
#       rect(0,11,1,12, col = paste0("grey", abs(100-district_per[12,i]*2)), border = "white")#
#       rect(0,12,1,13, col = paste0("grey", abs(100-district_per[13,i]*2)), border = "white")#
#       rect(0,13,1,14, col = paste0("grey", abs(100-district_per[14,i]*2)), border = "white")#
#       rect(0,14,1,15, col = paste0("grey", abs(100-district_per[15,i]*2)), border = "white")#
#       rect(0,15,1,16, col = paste0("grey", abs(100-district_per[16,i]*2)), border = "white")#
#       rect(0,16,1,17, col = paste0("grey", abs(100-district_per[17,i]*2)), border = "white")#
#       rect(0,17,1,18, col = paste0("grey", abs(100-district_per[18,i]*2)), border = "white")#
# # 50/50#
#       abline(h=9, lty=3, lwd=1, col="gray20")#
#       shadowtext(.5,9, pos=1, srt=90, label=plan_names[i], cex=1.5, col="black", bg="gray90")#
#     }#
#     plot(x=c(0,1), y=c(-200,400), col="white", xaxt="none", yaxt="none", bty="n")#
#       for (j in 0:99)#
#         {#
#            rect(.4,j,.6,(j+1), col = paste0("grey", j+1), border = "transparent")#
#         }#
#       for (j in 99:0)#
#         {#
#           rect(.4,j+100,.6,j+101, col = paste0("grey", abs(j-100)), border = "transparent")#
#         }#
#         mtext(side=4,line=-5.25,"<---- More Democratic", cex=.75, adj=.5, at=-100)#
#         mtext(side=4,line=-5.25,"More Republican ---->", cex=.75, adj=.5, at=300)#
#         mtext(side=4, las=2, line=-5.95,"50/50", cex=.5, adj=.5, at=100)#
#         axis(side=4, las=1, at=c(0, 25, 50, 75, 100, 125, 150, 175, 200), line=-2.65, labels=paste0(c(seq(100,0,-25),seq(25,100,25)), "%"), cex.axis=.75)#
# dev.off()#
#
# Figure(#
#   path="Figures/fig_barplotpartisanship.pdf", #
#   caption="District Partisanship by Plan", #
#   label="fig:1a", #
#   footnote="All percentages in terms of Democratic share of the two-party vote from the composite measure of five state-wide races in 2016."#
#   )#
#
# % -----------------------------------------------------------------#
# % -- END FIGURE -- END FIGURE -- END FIGURE -- END FIGURE -- FIGU %#
# % =================================================================#
# % =================================================================#
# % -- FIGURE -- FIGURE -- FIGURE -- FIGURE -- FIGURE -- FIGURE --  %#
# MAP SIMULATIONS OF PLANS - 2018#
# # % =================================================================#
# # % -- FIGURE -- FIGURE -- FIGURE -- FIGURE -- FIGURE -- FIGURE --  %#
# # % -----------------------------------------------------------------#
#
# pdf(paste0("Figures/fig_sims_2018_maps_density.pdf"), #
#   width = 8, #
#   height = 10)#
# par(mfrow=c(4,2), #
#   oma= c(3,1.5,0,0), #
#   mar=c(3,1,1,1), #
#   mgp= c(2,1,0))#
# for (k in 1:length(maps.sims.seats.2018))#
#   {       #
#       x <- do.call(rbind, maps.sims.seats.2018[k])#
#       x.sd <- sd(x)#
#       x.mean <- mean(x)#
#       a <- density(x, na.rm=TRUE, from=x.mean-x.sd, to=x.mean+x.sd)#
#       area <- abs(sum(a$y)*(a$x[1]-a$x[2]))#
#       # twec <- sum(d$ecvotes[d$p>.5])/sum(d$ecvotes)#
#       e1 <- density(x, na.rm=TRUE, adjust=1)#
#   plot(e1, xlim=c(0,1), ylim=c(0,10), main=plan_names[k], xlab = "", ylab = "", xaxt = "n", yaxt = "n")#
#       abline(v=seq(0,1,0.1), #
#           lty=2, #
#           col="gray95")#
#       axis(#
#           side=1, #
#           las=1, #
#           at=seq(0,1,0.1), #
#           labels=paste0(seq(0,100,10),"%"), #
#           cex.axis=0.85)#
#       mtext(side=1, #
#           line=3, #
#           ifelse(k %in% c(7, 8), "Republican Share of Seats", ""), #
#           cex=0.65)#
#       x4 <- min(which(e1$x>x.mean-x.sd))#
#       x2 <- min(which(e1$x>x.mean+x.sd))#
#   with(e1, #
#       polygon(#
#           x = c(x[c(x2,x2:x4,x4)]),  #
#           y = c(0, y[x2:x4], 0), #
#           col = "gray60", #
#           angle = 225, #
#           density = 40, #
#           border = NA))#
#   with(e1, #
#       polygon(#
#           x = c(x[c(x2,x2:x4,x4)]),  #
#           y = c(0, y[x2:x4], 0), #
#           col = "gray60", #
#           angle = 135, #
#           density = 40, #
#           border = NA))#
#       rect(#
#           -.1,-1,1.1,0, #
#           col="black")#
#       points(e1, #
#           type="l")#
#       actual.seats <- seats(default.unc(get(paste0("house.2018.votes"))))#
#           if (k == 1) arrows(#
#               x0 = actual.seats - 0.03, #
#               x1 = actual.seats - 0.1, #
#               y0 = 7,#
#               y1 = 7, #
#               angle=40, #
#               length=0.05, #
#               code=1, #
#               lty=1, #
#               col="gray10", #
#               lwd=1)#
#           abline(v = actual.seats, lty=2, col="gray5")#
#   if (k == 1) text(actual.seats - 0.1, 7, "Actual Congressional \n Results", pos=2)#
#           legend("topright", #
#           legend=#
#               c("SEAT SHARE ",#
#                   paste0("  Average: ", #
#                   percent(mean(unlist(maps.sims.seats.2018[k])))), #
#               paste0("  Median: ", #
#                   percent(median(unlist(maps.sims.seats.2018[k]))))),#
#                bty="n", #
#                box.lwd=0,#
#                cex=0.75)#
#   }#
#   dev.off()#
#
# Figure(#
#   path="Figures/fig_sims_2018_maps_density.pdf", #
#   caption="Simulated 2018 Elections by Plan", #
#   label="fig:density2018", #
#   footnote="Plots based on the 2016 Five Election Composite data centered at the 2018 vote share. All percentages in terms of Republican share of the two-party vote from the composite measure of five state-wide races in 2016. Shaded area contains one standard deviation on either side of the mean, representing 68\\% of the simulated seat percentages.")#
# # % -----------------------------------------------------------------#
# # % -- END FIGURE -- END FIGURE -- END FIGURE -- END FIGURE -- FIGU %#
# # % =================================================================#
#
# # MAP SIMULATIONS OF PLANS - 50/50 Hypothetical Tie#
# # % =================================================================#
# # % -- FIGURE -- FIGURE -- FIGURE -- FIGURE -- FIGURE -- FIGURE --  %#
# # % -----------------------------------------------------------------#
#
# pdf(paste0("Figures/fig_sims_5050_maps_density.pdf"), #
#   width = 8, #
#   height = 10)#
# par(mfrow=c(4,2), #
#   oma= c(3,1.5,0,0), #
#   mar=c(3,1,1,1), #
#   mgp= c(2,1,0))#
# for (k in 1:length(maps.sims.seats.5050))#
#   {       #
#       x <- do.call(rbind, maps.sims.seats.5050[k])#
#       x.sd <- sd(x)#
#       x.mean <- mean(x)#
#       a <- density(x, na.rm=TRUE, from=x.mean-x.sd, to=x.mean+x.sd)#
#       area <- abs(sum(a$y)*(a$x[1]-a$x[2]))#
#       # twec <- sum(d$ecvotes[d$p>.5])/sum(d$ecvotes)#
#       e1 <- density(x, na.rm=TRUE, adjust=1)#
#   plot(e1, xlim=c(0,1), ylim=c(0,8), main=plan_names[k], xlab = "", ylab = "", xaxt = "n", yaxt = "n")#
#       abline(v=seq(0,1,0.1), #
#           lty=2, #
#           col="gray95")#
#       axis(#
#           side=1, #
#           las=1, #
#           at=seq(0,1,0.1), #
#           labels=paste0(seq(0,100,10),"%"), #
#           cex.axis=0.85)#
#       mtext(side=1, #
#           line=3, #
#           ifelse(k %in% c(7, 8), "Republican Share of Seats", ""), #
#           cex=0.65)#
#       x4 <- min(which(e1$x>x.mean-x.sd))#
#       x2 <- min(which(e1$x>x.mean+x.sd))#
#   with(e1, #
#       polygon(#
#           x = c(x[c(x2,x2:x4,x4)]),  #
#           y = c(0, y[x2:x4], 0), #
#           col = "gray60", #
#           angle = 225, #
#           density = 40, #
#           border = NA))#
#   with(e1, #
#       polygon(#
#           x = c(x[c(x2,x2:x4,x4)]),  #
#           y = c(0, y[x2:x4], 0), #
#           col = "gray60", #
#           angle = 135, #
#           density = 40, #
#           border = NA))#
#       rect(#
#           -.1,-1,1.1,0, #
#           col="black")#
#       points(e1, #
#           type="l")#
#       actual.seats <- 0.5#
#           if (k == 1) arrows(#
#               x0 = actual.seats - 0.03, #
#               x1 = actual.seats - 0.1, #
#               y0 = 7,#
#               y1 = 7, #
#               angle=40, #
#               length=0.05, #
#               code=1, #
#               lty=1, #
#               col="gray10", #
#               lwd=1)#
#           abline(v = 0.5, lty=2, col="gray5")#
#   if (k == 1) text(actual.seats - 0.1, 7, "Hypothetical (Proportional) \n Congressional Results", pos=2)#
#       legend("topright", #
#           legend=#
#               c("SEAT SHARE ",#
#                   paste0("  Average: ", #
#                   percent(mean(unlist(maps.sims.seats.5050[k])))), #
#               paste0("  Median: ", #
#                   percent(median(unlist(maps.sims.seats.5050[k]))))),#
#                bty="n", #
#                box.lwd=0,#
#                cex=0.75)#
#   }#
#   dev.off()#
#
# Figure(#
#   path="Figures/fig_sims_5050_maps_density.pdf", #
#   caption="Hypothetical 50/50 Tied Election", #
#   label="fig:5050Tie", #
#   footnote="Plots based on the 2016 Five Election Composite data centered at 50\\% vote share for each party. All percentages in terms of Republican share of the two-party vote from the composite measure of five state-wide races in 2016. Shaded area contains one standard deviation on either side of the mean, representing 68\\% of the simulated seat percentages.")
Figure(#
    path="Figures/fig_maps.pdf", #
    caption="Maps Of The Proposed Pennsylvania Congressional Districts", #
    label="fig:maps", #
    footnote="Maps a drawn with a Mercator projection. Shapefiles were obtained from the Pennsylvania Supreme Court website for the four government plans.")
Figure(#
    path="Figures/_maps.tex", #
    caption="Maps Of The Proposed Pennsylvania Congressional Districts", #
    label="fig:maps", #
    footnote="Maps a drawn with a Mercator projection. Shapefiles were obtained from the Pennsylvania Supreme Court website for the four government plans.")
Table(congsum.tmp.tex,#
    path = "Tables/_tab_congsum.tex",#
    caption = congsum.caption,#
    label = congsum.label,#
    footnote = congsum.footnote)
house.2016.votes
cbind(house.inc.2016,house.2016.votes)
a <- cbind(house.inc.2016,house.2016.votes)
a(order(a[,2]))
a
a[,2]
a(sort(a[,2]))
a[order(a[,2])]
a
a[sort(a[,2])]
a[order(a[,2]),]
b <- cbind(house.inc.2018,house.2018.votes)
b[order(b[,2]),]
mean.w(house.2018.votes, house.2018.turnout)
mean(house.2018.votes)
Table(tab_prop,#
    path = "Tables/_tab_prob.tex",#
    caption = prop.caption,#
    label = prop.label, #
    footnote = prop.footnote,#
    landscape = TRUE)
out.sims.stats("Remedial Centered at 2018 Actual", remedial.at.2018.seats, remedial.at.2018.votes)
shift(court.comp, c=.533)
shift(court.comp, c=.449)
remedial.at.2018.list.bias <- lapply(remedial.at.2018, bias)#
remedial.at.2018.unlist.bias <- do.call(rbind, remedial.at.2018.list.bias)#
    mean(remedial.at.2018.unlist.bias)#
remedial.at.2018.eg <- simulation(remedial.at.2018, eg_TP)#
    -1 * mean(remedial.at.2018.eg)#
remedial.at.2018.meanmedian <- simulation(remedial.at.2018, meanmedian)#
    mean(remedial.at.2018.meanmedian)#
remedial.at.2018.declination <- simulation(remedial.at.2018, declination)#
    -1 * mean(remedial.at.2018.declination)#
remedial.at.2018.bias <- remedial.at.2018.unlist.bias
gerry(remedial.at.2018)
Table(tab_prop,#
    path = "Tables/_tab_prob.tex",#
    caption = prop.caption,#
    label = prop.label, #
    footnote = prop.footnote,#
    landscape = TRUE)
p.tmp <- remedial.at.2018
s.tmp <- remedial.at.2018.seats
v.tmp <- remedial.at.2018.votes
c(#
      paste0(r(sum(s.tmp*18)/(1000*18)*18), "R-", r(18-sum(s.tmp*18)/(1000*18)*18), "D"),#
      paste0("(", r(quantile(s.tmp, 0.025),d=1)*18, "R-", 18-r(quantile(s.tmp, 0.025),d=1)*18, "D, ", r(quantile(s.tmp, 0.975),d=1)*18, "R-", 18-r(quantile(s.tmp, 0.975),d=1)*18, "D)"),#
      paste0(median(s.tmp)*18, "R-", 18-median(s.tmp)*18, "D"),#
      percent(sum(1 * do.call(rbind, lapply(p.tmp, function(x) mean(find.winner(x)))) > 0.5) / 1000),#
      percent(sum(1 * do.call(rbind, lapply(p.tmp, function(x) mean(find.winner(x)))) < 0.5) / 1000),#
      percent(sum(1 * do.call(rbind, lapply(p.tmp, function(x) mean(find.winner(x)))) == 0.5) / 1000)#
      )
cat(#
  "\n#
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
    LOADING FUNCTIONS. . . . . . . . . . . . . . . . . . . . . . #
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n")#
`Table` <- function(x, path=NULL, caption="", label="", footnote="", landscape=FALSE, out=NULL)#
  {#
    x <- append(x,#
paste0(#
"\n% =====================================================================#
% ▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟#
% ---------------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n \\begin{center}\\textbf{INSERT TABLE \\ref{", label, "} ABOUT HERE} \\end{center}#
% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n#
\n% =====================================================================#
% ▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟#
% ---------------------------------------------------------------------",#
ifelse(landscape==T, "\n\\begin{landscape}", "")),#
 after = 1)#
#
    x <- append(x,#
paste0("\\end{tabular}#
\\tabnotes{", footnote, "}#
\\end{table}",#
ifelse(landscape==T, "\n\\end{landscape}", ""),#
"#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ T͎A͎B͎L͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ T͎A͎B͎L͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ T͎A͎B͎L͎E͎ ▄▀▄▀▄▀#
% ===================================================================== \n \n"),#
after = length(x))#
cat(paste(x, collapse = "\n"), "\n")#
cat(paste0())#
  }#
 `Figure` <- function(path=NULL, caption="", label="", footnote="")#
  {#
    x <- paste0("\n#
% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n \\begin{center} INSERT FIGURE \\ref{", label, "} ABOUT HERE \\end{center}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% ===================================================================== \n",#
#
"\n% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------#
% " , caption,#
"% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
% #
\\begin{figure}#
    \\begin{center}#
    \\caption{",caption, "}#
    \\label{", label, "}#
    \\includegraphics[width=1\\textwidth]{", path, "}#
    \\end{center}#
    \\tabnotes{", footnote, "}#
\\end{figure}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% =====================================================================\n \n"#
)#
  cat(paste(x, collapse = "\n"), "\n")#
  }#
#
`new.list` <-#
function(len) {#
  out <- list(NA)#
  if (len<1) stop ("Can't make a list of length ",len,".")#
  for (ii in 1:len) out[[ii]] <- NA#
  return(out)#
}#
#
`shift` <- # Seats at c vote#
function(x, w=NULL, c=0.5) {#
    if(is.null(w)) w <- rep(1,length(x))#
  tmp <- mean.w(x, w = w) - c#
    tmp.votes <- x - tmp#
    return(seats(tmp.votes))#
}#
`cube` <- function (x)  x^3/(1-3*x+3*x^2)#
#
seats.display <- function(x) {#
  tmp <- numeric()#
    for (i in 1:dim(x)[2]) {#
      rep <- seats(x[,i]) * length(x[,i])#
      dem <- length(x[,i]) - rep#
      tmp <- rbind(tmp, paste0(rep,"R-", dem, "D"))#
    }#
    return(tmp)#
  }#
#
`two_party` <- #
  function(D, R) {#
    replaceNA(as.numeric(D))/(replaceNA(as.numeric(D))+replaceNA(as.numeric(R)))#
    }#
#
`find.winner` <- #
  function(inp) 0*(inp<0.5)+1*(inp>0.5)#
#
`seats` <- #
  function(inp) mean(inp>.5)#
#
`make.weights` <-  #
  function(x, d = 5) {#
    r(x/sum(x,na.rm=T), d = d)}#
#
`f.num` <- function(x, d=2) format(round(x, d=d), nsmall=d)#
#
`percent` <- #
  function(x, d = 1) {#
    paste0(f.num(x * 100, d= d), "%")#
  }#
#
`replaceNA` <- #
  function (x, value=0) {#
   x[is.na(x)] <- value #
   return(x)}#
#
`mean.w` <- # WEIGHTED MEAN#
function (x, weight=NULL, na.rm = FALSE, ...) {#
    if (is.null(weight)) weight <- rep(1, length(x))#
      w <- as.double(weight)#
    if (na.rm) {#
        i <- !is.na(x)#
        w <- w[i]#
        x <- x[i]#
    }#
    sum((x * w)[w != 0])/sum(w)}#
#
inv <- function(x) {#
  (exp(x) / ( 1 + exp(x)))#
}#
#
sv.curve <- function(s,v) {#
  reg <- lm(log(sv(s)) ~ log(sv(v)))#
  vote <- seq(0.01,0.99, by=.01)#
  seatvotes <-  reg$coefficients[2]*log(vote/(1-vote)) + reg$coefficients[1]#
  return(inv(seatvotes))#
}#
#
sv <- function(x) (x / (1 - x))#
#
`seats.print` <- function(x) paste0(sum(find.winner(x)), "R-", length(x)-sum(find.winner(x)), "D")#
#
`agg.precinct` <- function(data, var, id) {#
        cbind.data.frame(#
          REP = aggregate(as.numeric(data[,paste0(var, "R")]), by=list(id=data[,id]), FUN=sum)[,2], #
          DEM = aggregate(as.numeric(data[,paste0(var, "D")]), by=list(id=data[,id]), FUN=sum)[,2]#
        )#
      }#
#
comp.raw <- function(data) {#
  (two_party(as.numeric(data[,"T16PRESR"]), as.numeric(data[,"T16PRESD"])) +#
  two_party(as.numeric(data[,"T16SENR"]), as.numeric(data[,"T16SEND"])) +#
  two_party(as.numeric(data[,"T16ATGR"]), as.numeric(data[,"T16ATGD"])) +#
  two_party(as.numeric(data[,"T16AUDR"]), as.numeric(data[,"T16AUDD"])) +#
  two_party(as.numeric(data[,"T16TREASR"]), as.numeric(data[,"T16TREASD"]))#
  ) / 5#
  }#
#
composite <- function(data, id) {#
  data <- data[order(data[,id]),]#
  cbind.data.frame(#
        CONG = two_party(aggregate(as.numeric(data[,"T16CONGR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16CONGD"]), by=list(id=data[,id]), FUN=sum)[,2]),#
        PRES = two_party(aggregate(as.numeric(data[,"T16PRESR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16PRESD"]), by=list(id=data[,id]), FUN=sum)[,2]), #
        USSEN = two_party(aggregate(as.numeric(data[,"T16SENR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16SEND"]), by=list(id=data[,id]), FUN=sum)[,2]) ,#
        ATTGEN = two_party(aggregate(as.numeric(data[,"T16ATGR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16ATGD"]), by=list(id=data[,id]), FUN=sum)[,2]) ,#
        AUDITOR = two_party(aggregate(as.numeric(data[,"T16AUDR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16AUDD"]), by=list(id=data[,id]), FUN=sum)[,2]) ,#
        TREASURER = two_party(aggregate(as.numeric(data[,"T16TREASR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16TREASD"]), by=list(id=data[,id]), FUN=sum)[,2]) ,#
        COMPOSITE = composite.sum(data, id)#
        )#
  }#
#
composite.sum <- function(data, id) {#
  two_party(#
            (#
              aggregate(as.numeric(data[,"T16PRESR"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16SENR"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16ATGR"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16AUDR"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16TREASR"]), by=list(id=data[,id]), FUN=sum)[,2]#
            ),#
            (#
              aggregate(as.numeric(data[,"T16PRESD"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16SEND"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16ATGD"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16AUDD"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16TREASD"]), by=list(id=data[,id]), FUN=sum)[,2]#
            )#
          )#
  }#
#
std <- function(x) {#
  (mean(x[!is.na(x)]) - x) / sd(x[!is.na(x)])#
  }#
#
ci <- function(x)#
  {#
    r <- summary(lm(x~1))#
      m <- coef(r)[1]#
      se <- coef(r)[2]#
      return(qt(0.975, df=length(x)-1) * se)#
  }#
#
`quick.summary` <- function (x) #
  {#
  `qsum` <- function (set) cbind(mean(set[!is.na(set)]),#
                            sd(set[!is.na(set)]),#
                            var(set[!is.na(set)]),#
                            min(set[!is.na(set)]),#
                            max(set[!is.na(set)]),#
                            sum(1*!is.na(set)),#
                            sum(1*is.na(set)))#
    out <- qsum(x)#
  colnames(out) <- c("Mean","SD","Variance","Min","Max","Valid","Missing")#
    return(out)#
  }#
#
`quick.sum` <- #
  function (x) {#
  `qsum` <- #
    function (set) cbind(#
                      mean(set[!is.na(set)]),#
                      mean(set[!is.na(set)]) - ci(set[!is.na(set)]),#
                      mean(set[!is.na(set)]) + ci(set[!is.na(set)]),#
                      sd(set[!is.na(set)]),#
                      min(set[!is.na(set)]),#
                      quantile(set[!is.na(set)], 0.025),#
                      quantile(set[!is.na(set)], 0.975),                            #
                      max(set[!is.na(set)])#
                      )#
#
    out <- qsum(x)#
  colnames(out) <- c("Mean","CI_lower","CI_upper","SD","Min","2.5%","97.5%","Max")#
    return(out)}#
#
  comb <-combn(c(0:9,LETTERS[1:6]),2)#
  opacity <- c(paste0(comb[1,1:120], comb[2,1:120]), paste0("FF"))#
#
`unc` <- function(x) -1 * (x <= .25) + 1 * (x >= .75)#
#
`delete.unc` <-#
function(vs, uncL, uncU) {#
  #replaces uncontested vote values with "missing".#
 f1 <- function (a,b,c) ifelse (is.na(a),NA,#
                                 ifelse(a<b,NA, ifelse(a>c,NA,a)))#
  return(sapply (vs,f1,uncL,uncU)) }#
#
`replace.unc` <-#
function (vs,l,u,lr,ur, na.rm=T) { # na.rm replaces NAs with 0#
  na <- numeric()#
    if(na.rm==T) #
    {#
      na <- 0#
    } else NA#
  f1 <- function (a,b,c,d,e) if (!is.na(a)) {#
    if (a<b) a <- d else if (a>c) a <- e else a#
  } else NA#
  return(sapply (vs,f1,l,u,lr,ur))}#
`default.unc` <-#
function (vs, uncL = 0.25, uncU = 0.75, uncLR = 0.25, uncUR = 0.75) {#
  vs <- replace.unc(vs, uncL, uncU, uncLR, uncUR)#
  return(vs)}#
#
`mean.unc` <- # uncL and uncU to replace outside bounds, otherwise just NAs#
function(vs, uncL = 0.0001, uncU = 0.99999) {#
  vs <- delete.unc(vs, uncL=uncL, uncU=uncU)#
tmp <- vs[!is.na(vs)]#
reg <- summary(lm(tmp ~ 1))$coef[1] # mean#
reg_sig <- summary(lm(tmp ~ 1))$coef[2] # sigma#
  new.mean <- truncate(rnorm(length(vs[is.na(vs)]), reg, reg_sig))#
  vs[is.na(vs)] <- new.mean#
  return(vs)}#
`impute.weights` <- # for use when turnout in districts is abnormally high or low (w = # of standard deviations from median)#
function(t1, t2, w = 2) {#
  t <- t1+t2#
  uncL <- (median(t, na.rm=T) -  (w * sd(t, na.rm=T)))#
  uncU <- (median(t, na.rm=T) + (w * sd(t, na.rm=T)))#
  t1 <- delete.unc(t, uncL=uncL, uncU=uncU)#
tmp <- t1[!is.na(t1)]#
reg <- summary(lm(tmp ~ 1))$coef[1] # mean#
reg_sig <- summary(lm(tmp ~ 1))$coef[2] # sigma#
  new.reg <- r(rnorm(length(t1[is.na(t1)]), reg, reg_sig), d=0)#
  t1[is.na(t1)] <- new.reg#
  return(t1)}#
`truncate` <-#
function(r1) {#
  below <- r1<=0#
  above <- r1>=1#
  between <- !(below|above)#
  (below*0.0001)+(r1*between)+0.9999*above#
}#
sim.election <- function(votes= NULL, center=house.2016.votes, incumbency=NULL, yr=2018, sims=1000, sigma=sigma) {#
  if (is.null(sims)) sims <- 1000#
      equal.vote <- mean(votes) - mean(center)#
      sims.year <- new.list(sims)#
    for (k in 1:sims)#
      {#
    sims.year[[k]] <- #
        rnorm(length(votes), votes - equal.vote, #
          sigma)#
      }#
  return(sims.year)#
  }#
#
r <- function(r, d=2) round(r, digits=d)#
# =================================================================#
# -- GERRYMANDER MEASURES -- GERRYMANDER MEASURES -- GERRYMANDER ME#
# =================================================================#
# ••• DELINATION ••••••••••••••••••••••••••••••••••••••••••••••••••#
`declination` <- # Warrington, Gregory S. 2018. “Quantifying Gerrymandering Using the Vote Distribution.” Election Law Journal 17(1): 39–57. www.liebertpub.com (Accessed February 22, 2019).#
  function(votes) {#
    abo = votes[votes > 0.5]   # districts won by party A#
    bel = votes[votes <= 0.5]  # districts won by party B#
  # declination is undefined if one party wins all seats.#
    if (length(bel) == 0 | length(abo) == 0) {#
      return(NaN)#
    }#
  # angle for party B#
    theta = atan((1-(2*mean(bel))) / (length(bel) / length(votes)))#
  # angle for party A#
    gamma = atan((2*mean(abo)-1) / (length(abo) / length(votes)))#
  # normalize from radians to values betwen -1 and 1#
  # A little extra precision just in case :)#
    return(2.0*(gamma-theta)/3.1415926535)}#
#
`declin2` <- # Simplified, not transformed from: Katz, Jonathan N. et al. 2018. Theoretical Foundations and Empirical Evaluations of Partisan Fairness in District-Based Democracies *. https://gking.harvard.edu/files/psym_2.pdf (Accessed March 16, 2019).#
  function(vs) {#
    abo = vs[vs > 0.5]   # districts won by party A#
    bel = vs[vs <= 0.5]  # districts won by party B#
    ((mean(abo) - 0.5) / (sum(find.winner(abo))/length(vs))) - ((0.5 - mean(bel)) / (1 - sum(find.winner(abo))/length(vs)))#
  }#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••• MEAN/MEDIAN••••••••••••••••••••••••••••••••••••••••••••••••••#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
`meanmedian` <- # Best, Robin E., Shawn J. Donahue, Jonathan Krasno, Daniel B. Magleby, et al. 2018. “Considering the Prospects for Establishing a Packing Gerrymandering Standard.” Election Law Journal: Rules, Politics, and Policy 17(1): 1–20. http://www.liebertpub.com/doi/10.1089/elj.2016.0392 (Accessed July 24, 2018).#
  function(votes) median(votes) - mean(votes)#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# •••• EFFICIENCY GAP••••••••••••••••••••••••••••••••••••••••••••••#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
`eff_gap` <- # Stephanopoulos, Nicholas, and Eric Mcghee. 2014. “Partisan Gerrymandering and the Efficiency Gap.” University of Chicago Law School 82. http://ssrn.com/abstract=2457468.. (Accessed September 10, 2018).#
  function(D, R) {#
    total <- sum(D)+sum(R)#
    dem_wasted <- sum(ifelse(D>R, D[D>R] - R[D>R], D[D<R]))#
    rep_wasted <- sum(ifelse(D<R, R[D<R] - D[D<R], R[D>R]))#
      return((dem_wasted - rep_wasted) / sum(total))}#
#
eg_TP <- function(votes) #
  {#
    y <- cbind.data.frame(votes, 1-votes)#
      return(eff_gap(y[1], y[2]))#
  }#
#
  gerry <- function(x, toggle=TRUE)#
    {#
    Seats = paste0(" [", seats.print(x), "]")#
    SeatPER = percent(seats(x))#
    Votes = percent(mean(default.unc(x)))#
    Bias = r(seatsvotes(x)$bias)#
    EfficiencyGap = -1 * r(eg_TP(x))#
    MeanMedian = r(meanmedian(x))#
    Declination = -1 * r(declination(x))#
    a <- rbind.data.frame(#
      Seats, SeatPER, Votes, Bias, EfficiencyGap, MeanMedian, Declination)#
    rownames(a) <- c("Seats","Seat %","Votes","Bias","Efficiency Gap","Mean/Median","Declination")#
    colnames(a) <- "Summary"#
#
    if (toggle!=TRUE) { # TO RETURN UNFORMATTED MEASUREMENTS#
    SeatsT = NA#
    SeatPERT = r(seats(x))#
    VotesT = r(mean(default.unc(x)))#
    BiasT = r(seatsvotes(x)$bias)#
    EfficiencyGapT = -1 * r(eg_TP(x))#
    MeanMedianT = r(meanmedian(x))#
    DeclinationT = -1 * r(declination(x))#
      return(rbind.data.frame(#
      SeatsT, SeatPERT, VotesT, BiasT, EfficiencyGapT, MeanMedianT, DeclinationT))}#
    return(a)#
    }#
nintyfive <- function(x, percent=FALSE) {#
  if (percent==TRUE){ return(paste0("(", percent(r(quantile(x[!is.na(x)], 0.025),d=1)), ", ", percent(r(quantile(x[!is.na(x)], 0.975),d=1)), ")")) }#
  return(paste0("(", r(quantile(x[!is.na(x)], 0.025)), ", ", r(quantile(x[!is.na(x)], 0.975)), ")"))#
  }#
#
gtab <- function(x) {#
  p <- (paste0(x, ".sims.5050"))#
  p.tmp <- get(p)#
  s.tmp <- maps.sims.seats.5050[[x]]#
  v.tmp <- maps.sims.votes.5050[[x]]#
  x.bias <- get(paste0(p, ".bias"))#
  x.eg <- get(paste0(p, ".eg"))#
  x.mm <- get(paste0(p, ".meanmedian"))#
  x.declin <- get(paste0(p, ".declination"))#
    return(c(#
      r(mean(x.bias)), #
        nintyfive(x.bias), #
      r(mean(x.eg)), #
        nintyfive(x.eg), #
      r(mean(x.mm)), #
        nintyfive(x.mm),#
      r(mean(x.declin)), #
        nintyfive(x.declin)#
      ))#
    }#
#
ptab <- function(x) {#
  p <- (paste0(x, ".sims.5050"))#
  p.tmp <- get(p)#
  s.tmp <- maps.sims.seats.5050[[x]]#
  v.tmp <- maps.sims.votes.5050[[x]]#
    return(c(#
      paste0(r(sum(s.tmp*18)/(1000*18)*18), "R-", r(18-sum(s.tmp*18)/(1000*18)*18), "D"),#
      paste0("(", r(quantile(s.tmp, 0.025),d=1)*18, "R-", 18-r(quantile(s.tmp, 0.025),d=1)*18, "D, ", r(quantile(s.tmp, 0.975),d=1)*18, "R-", 18-r(quantile(s.tmp, 0.975),d=1)*18, "D)"),#
      paste0(median(s.tmp)*18, "R-", 18-median(s.tmp)*18, "D"),#
      percent(sum(1 * do.call(rbind, lapply(p.tmp, function(x) mean(find.winner(x)))) > 0.5) / 1000),#
      percent(sum(1 * do.call(rbind, lapply(p.tmp, function(x) mean(find.winner(x)))) < 0.5) / 1000),#
      percent(sum(1 * do.call(rbind, lapply(p.tmp, function(x) mean(find.winner(x)))) == 0.5) / 1000)#
      ))#
} #
#
 # •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••   #
`circle.new` <- #
  function(xorig, yorig, radius, add, ...){#
    x <- seq(-radius, radius, length.out = 1000)#
  # Euclidian distance to the origin#
  y <- sapply(x, function(z) sqrt(radius^2 - z^2))#
  if(add == TRUE){#
    line(xorig + c(x, rev(x)), c(yorig + y, yorig + rev(-y)),#
          type = "l", add=T, ...)#
   } else {#
   plot(xorig + c(x, rev(x)), c(yorig + y, yorig + rev(-y)),#
        type = "l",  #
    xlab="", #
    ylab="", #
    xaxt="n", #
    yaxt="n", #
    bty="n", ...)#
   }#
}#
#
`circle` <- #
function (x, y, radius, nv = 100, border = NULL, col = NA, lty = 1, #
    lwd = 1) {#
    xylim <- par("usr")#
    plotdim <- par("pin")#
    ymult <- getYmult()#
    angle.inc <- 2 * pi/nv#
    angles <- seq(0, 2 * pi - angle.inc, by = angle.inc)#
    if (length(col) < length(radius)) #
        col <- rep(col, length.out = length(radius))#
    for (circle in 1:length(radius)) {#
        xv <- cos(angles) * radius[circle] + x#
        yv <- sin(angles) * radius[circle] * ymult + y#
        polygon(xv, yv, border = border, col = col[circle], lty = lty, #
            lwd = lwd)#
    }#
    invisible(list(x = xv, y = yv))#
}#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# COMPACTNESS MEASURES#
#
POLSBYPOPPER <- function (x) r(mean((4 * 3.1415926535 * x$area) / (x$perimeter^2)), d = 3)#
REOCK <- function (x) r(mean(x$area/(x$smallestcircle^2 * 3.1415926535)), d = 3)#
poly.math <- function (x) {#
    compactness <- NULL#
  if (class(x)=="character") x <- get(x)#
      shapeFile <- x#
      mapObject <- fortify(shapeFile)#
      mapObject$id <- as.character(as.numeric(mapObject$id) + 1)#
      mapObject <- data.frame(mapObject, shapeFile@data[mapObject$id, ])#
      mapObject$piece <- as.character(mapObject$piece)#
      uniqueCDs <- sort(unique(as.numeric(mapObject$id)))#
      for(id in uniqueCDs)#
        {#
          cdShape <- mapObject[mapObject$id == id, ]#
          cdPoly <- SpatialPolygons(list(Polygons(lapply(split(cdShape[, c("long", "lat")], cdShape$piece), Polygon), ID = "b")))#
          owinObject <- try(as(cdPoly, "owin"))#
          compactness[[id]] <-  data.frame(area=area.owin(owinObject), perimeter=perimeter(owinObject), smallestcircle=boundingradius(owinObject))#
        }#
        x <- do.call("rbind", compactness)#
        cat(#
          "\n REOCK:        ", REOCK(x), "\n",#
          "POLSBY-POPPER:", POLSBYPOPPER(x), "\n \n"#
          )#
        return(x)#
  }
c(#
      paste0(r(sum(s.tmp*18)/(1000*18)*18), "R-", r(18-sum(s.tmp*18)/(1000*18)*18), "D"),#
      paste0("(", r(quantile(s.tmp, 0.025),d=1)*18, "R-", 18-r(quantile(s.tmp, 0.025),d=1)*18, "D, ", r(quantile(s.tmp, 0.975),d=1)*18, "R-", 18-r(quantile(s.tmp, 0.975),d=1)*18, "D)"),#
      paste0(median(s.tmp)*18, "R-", 18-median(s.tmp)*18, "D"),#
      percent(sum(1 * do.call(rbind, lapply(p.tmp, function(x) mean(find.winner(x)))) > 0.5) / 1000),#
      percent(sum(1 * do.call(rbind, lapply(p.tmp, function(x) mean(find.winner(x)))) < 0.5) / 1000),#
      percent(sum(1 * do.call(rbind, lapply(p.tmp, function(x) mean(find.winner(x)))) == 0.5) / 1000)#
      )
mean(enacted.comp)
mean(enacted.comp)-mean(house.2018.votes)
mean(house.2016.votes)-mean(house.2018.votes)
incum_advant
incum_advant*house.inc.2018
court.comp+(incum_advant*house.inc.2018)
seats(court.comp+(incum_advant*house.inc.2018))
cat("Court-remedial 2018 set to Congressional 2018 vote-share and adjusted for incumbency\n",#
"   ", seats(court.comp+(incum_advant*house.inc.2018))#
)
cat("Court-remedial 2018 set to Congressional 2018 vote-share and adjusted for incumbency\n",#
"   ", percent(seats(court.comp+(incum_advant*house.inc.2018)))#
)
gtab(remedial.at.2018)
ptab("court")
out.sims.stats("Court court", maps.sims.seats.5050$court, maps.sims.votes.5050$court)
out.sims.stats("Enacted 2011", maps.sims.seats.5050$enacted, maps.sims.votes.5050$enacted)
out.sims.stats("Court court", maps.sims.seats.5050$court, maps.sims.votes.5050$court)
out.sims.stats("Joint Legislative", maps.sims.seats.5050$joint, maps.sims.votes.5050$joint)
out.sims.stats("Gov. Wolf", maps.sims.seats.5050$govwolf, maps.sims.votes.5050$govwolf)
out.sims.stats("2018 Court", remedial.at.2018.seats, remedial.at.2018.votes)
house.inc.2018
Table(congsum.tmp.tex,#
    path = "Tables/_tab_congsum.tex",#
    caption = congsum.caption,#
    label = congsum.label,#
    footnote = congsum.footnote)
Table(tab_plan_summary,#
    path = "Tables/_tab_summaries.tex",#
    caption = plan_summary.caption,#
    label = plan_summary.label,#
    footnote = plan_summary.footnote)
Table(tab_gerry, #
    path = "Tables/_tab_gerry.tex", #
    caption = gerry.caption,#
    label = gerry.label, #
    footnote = gerry.footnote)
cat(#
  "\n#
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
    LOADING FUNCTIONS. . . . . . . . . . . . . . . . . . . . . . #
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n")#
`Table` <- function(x, path=NULL, caption="", label="", footnote="", landscape=FALSE, out=NULL)#
  {#
    x <- append(x,#
paste0(#
"\n% =====================================================================#
% ▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟#
% ---------------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n \\begin{center}\\textbf{INSERT TABLE \\ref{", label, "} ABOUT HERE} \\end{center}#
% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n#
\n% =====================================================================#
% ▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟#
% ---------------------------------------------------------------------",#
ifelse(landscape==T, "\n\\begin{landscape}", "")),#
 after = 1)#
#
    x <- append(x,#
paste0("\\end{tabular}#
\\tabnotes{", footnote, "}#
\\end{table}",#
ifelse(landscape==T, "\n\\end{landscape}", ""),#
"#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ T͎A͎B͎L͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ T͎A͎B͎L͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ T͎A͎B͎L͎E͎ ▄▀▄▀▄▀#
% ===================================================================== \n \n"),#
after = length(x))#
cat(paste(x, collapse = "\n"), "\n")#
cat(paste0())#
  }#
 `Figure` <- function(path=NULL, caption="", label="", footnote="")#
  {#
    x <- paste0("\n#
% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n \\begin{center} INSERT FIGURE \\ref{", label, "} ABOUT HERE \\end{center}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% ===================================================================== \n",#
#
"\n% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------#
% " , caption,#
"% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
% #
\\begin{figure}#
    \\begin{center}#
    \\caption{",caption, "}#
    \\label{", label, "}#
    \\includegraphics[width=1\\textwidth]{", path, "}#
    \\end{center}#
    \\tabnotes{", footnote, "}#
\\end{figure}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% =====================================================================\n \n"#
)#
  cat(paste(x, collapse = "\n"), "\n")#
  }#
#
`new.list` <-#
function(len) {#
  out <- list(NA)#
  if (len<1) stop ("Can't make a list of length ",len,".")#
  for (ii in 1:len) out[[ii]] <- NA#
  return(out)#
}#
#
`shift` <- # Seats at c vote#
function(x, w=NULL, c=0.5) {#
    if(is.null(w)) w <- rep(1,length(x))#
  tmp <- mean.w(x, w = w) - c#
    tmp.votes <- x - tmp#
    return(seats(tmp.votes))#
}#
`cube` <- function (x)  x^3/(1-3*x+3*x^2)#
#
seats.display <- function(x) {#
  tmp <- numeric()#
    for (i in 1:dim(x)[2]) {#
      rep <- seats(x[,i]) * length(x[,i])#
      dem <- length(x[,i]) - rep#
      tmp <- rbind(tmp, paste0(rep,"R-", dem, "D"))#
    }#
    return(tmp)#
  }#
#
`two_party` <- #
  function(D, R) {#
    replaceNA(as.numeric(D))/(replaceNA(as.numeric(D))+replaceNA(as.numeric(R)))#
    }#
#
`find.winner` <- #
  function(inp) 0*(inp<0.5)+1*(inp>0.5)#
#
`seats` <- #
  function(inp) mean(inp>.5)#
#
`make.weights` <-  #
  function(x, d = 5) {#
    r(x/sum(x,na.rm=T), d = d)}#
#
`f.num` <- function(x, d=2) format(round(x, d=d), nsmall=d)#
#
`percent` <- #
  function(x, d = 1) {#
    paste0(f.num(x * 100, d= d), "%")#
  }#
#
`replaceNA` <- #
  function (x, value=0) {#
   x[is.na(x)] <- value #
   return(x)}#
#
`mean.w` <- # WEIGHTED MEAN#
function (x, weight=NULL, na.rm = FALSE, ...) {#
    if (is.null(weight)) weight <- rep(1, length(x))#
      w <- as.double(weight)#
    if (na.rm) {#
        i <- !is.na(x)#
        w <- w[i]#
        x <- x[i]#
    }#
    sum((x * w)[w != 0])/sum(w)}#
#
inv <- function(x) {#
  (exp(x) / ( 1 + exp(x)))#
}#
#
sv.curve <- function(s,v) {#
  reg <- lm(log(sv(s)) ~ log(sv(v)))#
  vote <- seq(0.01,0.99, by=.01)#
  seatvotes <-  reg$coefficients[2]*log(vote/(1-vote)) + reg$coefficients[1]#
  return(inv(seatvotes))#
}#
#
sv <- function(x) (x / (1 - x))#
#
`seats.print` <- function(x) paste0(sum(find.winner(x)), "R-", length(x)-sum(find.winner(x)), "D")#
#
`agg.precinct` <- function(data, var, id) {#
        cbind.data.frame(#
          REP = aggregate(as.numeric(data[,paste0(var, "R")]), by=list(id=data[,id]), FUN=sum)[,2], #
          DEM = aggregate(as.numeric(data[,paste0(var, "D")]), by=list(id=data[,id]), FUN=sum)[,2]#
        )#
      }#
#
comp.raw <- function(data) {#
  (two_party(as.numeric(data[,"T16PRESR"]), as.numeric(data[,"T16PRESD"])) +#
  two_party(as.numeric(data[,"T16SENR"]), as.numeric(data[,"T16SEND"])) +#
  two_party(as.numeric(data[,"T16ATGR"]), as.numeric(data[,"T16ATGD"])) +#
  two_party(as.numeric(data[,"T16AUDR"]), as.numeric(data[,"T16AUDD"])) +#
  two_party(as.numeric(data[,"T16TREASR"]), as.numeric(data[,"T16TREASD"]))#
  ) / 5#
  }#
#
composite <- function(data, id) {#
  data <- data[order(data[,id]),]#
  cbind.data.frame(#
        CONG = two_party(aggregate(as.numeric(data[,"T16CONGR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16CONGD"]), by=list(id=data[,id]), FUN=sum)[,2]),#
        PRES = two_party(aggregate(as.numeric(data[,"T16PRESR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16PRESD"]), by=list(id=data[,id]), FUN=sum)[,2]), #
        USSEN = two_party(aggregate(as.numeric(data[,"T16SENR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16SEND"]), by=list(id=data[,id]), FUN=sum)[,2]) ,#
        ATTGEN = two_party(aggregate(as.numeric(data[,"T16ATGR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16ATGD"]), by=list(id=data[,id]), FUN=sum)[,2]) ,#
        AUDITOR = two_party(aggregate(as.numeric(data[,"T16AUDR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16AUDD"]), by=list(id=data[,id]), FUN=sum)[,2]) ,#
        TREASURER = two_party(aggregate(as.numeric(data[,"T16TREASR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16TREASD"]), by=list(id=data[,id]), FUN=sum)[,2]) ,#
        COMPOSITE = composite.sum(data, id)#
        )#
  }#
#
composite.sum <- function(data, id) {#
  two_party(#
            (#
              aggregate(as.numeric(data[,"T16PRESR"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16SENR"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16ATGR"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16AUDR"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16TREASR"]), by=list(id=data[,id]), FUN=sum)[,2]#
            ),#
            (#
              aggregate(as.numeric(data[,"T16PRESD"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16SEND"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16ATGD"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16AUDD"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16TREASD"]), by=list(id=data[,id]), FUN=sum)[,2]#
            )#
          )#
  }#
#
std <- function(x) {#
  (mean(x[!is.na(x)]) - x) / sd(x[!is.na(x)])#
  }#
#
ci <- function(x)#
  {#
    r <- summary(lm(x~1))#
      m <- coef(r)[1]#
      se <- coef(r)[2]#
      return(qt(0.975, df=length(x)-1) * se)#
  }#
#
`quick.summary` <- function (x) #
  {#
  `qsum` <- function (set) cbind(mean(set[!is.na(set)]),#
                            sd(set[!is.na(set)]),#
                            var(set[!is.na(set)]),#
                            min(set[!is.na(set)]),#
                            max(set[!is.na(set)]),#
                            sum(1*!is.na(set)),#
                            sum(1*is.na(set)))#
    out <- qsum(x)#
  colnames(out) <- c("Mean","SD","Variance","Min","Max","Valid","Missing")#
    return(out)#
  }#
#
`quick.sum` <- #
  function (x) {#
  `qsum` <- #
    function (set) cbind(#
                      mean(set[!is.na(set)]),#
                      mean(set[!is.na(set)]) - ci(set[!is.na(set)]),#
                      mean(set[!is.na(set)]) + ci(set[!is.na(set)]),#
                      sd(set[!is.na(set)]),#
                      min(set[!is.na(set)]),#
                      quantile(set[!is.na(set)], 0.025),#
                      quantile(set[!is.na(set)], 0.975),                            #
                      max(set[!is.na(set)])#
                      )#
#
    out <- qsum(x)#
  colnames(out) <- c("Mean","CI_lower","CI_upper","SD","Min","2.5%","97.5%","Max")#
    return(out)}#
#
  comb <-combn(c(0:9,LETTERS[1:6]),2)#
  opacity <- c(paste0(comb[1,1:120], comb[2,1:120]), paste0("FF"))#
#
`unc` <- function(x) -1 * (x <= .25) + 1 * (x >= .75)#
#
`delete.unc` <-#
function(vs, uncL, uncU) {#
  #replaces uncontested vote values with "missing".#
 f1 <- function (a,b,c) ifelse (is.na(a),NA,#
                                 ifelse(a<b,NA, ifelse(a>c,NA,a)))#
  return(sapply (vs,f1,uncL,uncU)) }#
#
`replace.unc` <-#
function (vs,l,u,lr,ur, na.rm=T) { # na.rm replaces NAs with 0#
  na <- numeric()#
    if(na.rm==T) #
    {#
      na <- 0#
    } else NA#
  f1 <- function (a,b,c,d,e) if (!is.na(a)) {#
    if (a<b) a <- d else if (a>c) a <- e else a#
  } else NA#
  return(sapply (vs,f1,l,u,lr,ur))}#
`default.unc` <-#
function (vs, uncL = 0.25, uncU = 0.75, uncLR = 0.25, uncUR = 0.75) {#
  vs <- replace.unc(vs, uncL, uncU, uncLR, uncUR)#
  return(vs)}#
#
`mean.unc` <- # uncL and uncU to replace outside bounds, otherwise just NAs#
function(vs, uncL = 0.0001, uncU = 0.99999) {#
  vs <- delete.unc(vs, uncL=uncL, uncU=uncU)#
tmp <- vs[!is.na(vs)]#
reg <- summary(lm(tmp ~ 1))$coef[1] # mean#
reg_sig <- summary(lm(tmp ~ 1))$coef[2] # sigma#
  new.mean <- truncate(rnorm(length(vs[is.na(vs)]), reg, reg_sig))#
  vs[is.na(vs)] <- new.mean#
  return(vs)}#
`impute.weights` <- # for use when turnout in districts is abnormally high or low (w = # of standard deviations from median)#
function(t1, t2, w = 2) {#
  t <- t1+t2#
  uncL <- (median(t, na.rm=T) -  (w * sd(t, na.rm=T)))#
  uncU <- (median(t, na.rm=T) + (w * sd(t, na.rm=T)))#
  t1 <- delete.unc(t, uncL=uncL, uncU=uncU)#
tmp <- t1[!is.na(t1)]#
reg <- summary(lm(tmp ~ 1))$coef[1] # mean#
reg_sig <- summary(lm(tmp ~ 1))$coef[2] # sigma#
  new.reg <- r(rnorm(length(t1[is.na(t1)]), reg, reg_sig), d=0)#
  t1[is.na(t1)] <- new.reg#
  return(t1)}#
`truncate` <-#
function(r1) {#
  below <- r1<=0#
  above <- r1>=1#
  between <- !(below|above)#
  (below*0.0001)+(r1*between)+0.9999*above#
}#
sim.election <- function(votes= NULL, center=house.2016.votes, incumbency=NULL, yr=2018, sims=1000, sigma=sigma) {#
  if (is.null(sims)) sims <- 1000#
      equal.vote <- mean(votes) - mean(center)#
      sims.year <- new.list(sims)#
    for (k in 1:sims)#
      {#
    sims.year[[k]] <- #
        rnorm(length(votes), votes - equal.vote, #
          sigma)#
      }#
  return(sims.year)#
  }#
#
r <- function(r, d=2) round(r, digits=d)#
# =================================================================#
# -- GERRYMANDER MEASURES -- GERRYMANDER MEASURES -- GERRYMANDER ME#
# =================================================================#
# ••• DELINATION ••••••••••••••••••••••••••••••••••••••••••••••••••#
`declination` <- # Warrington, Gregory S. 2018. “Quantifying Gerrymandering Using the Vote Distribution.” Election Law Journal 17(1): 39–57. www.liebertpub.com (Accessed February 22, 2019).#
  function(votes) {#
    abo = votes[votes > 0.5]   # districts won by party A#
    bel = votes[votes <= 0.5]  # districts won by party B#
  # declination is undefined if one party wins all seats.#
    if (length(bel) == 0 | length(abo) == 0) {#
      return(NaN)#
    }#
  # angle for party B#
    theta = atan((1-(2*mean(bel))) / (length(bel) / length(votes)))#
  # angle for party A#
    gamma = atan((2*mean(abo)-1) / (length(abo) / length(votes)))#
  # normalize from radians to values betwen -1 and 1#
  # A little extra precision just in case :)#
    return(-1 * (2.0*(gamma-theta)/3.1415926535))}#
#
`declin2` <- # Simplified, not transformed from: Katz, Jonathan N. et al. 2018. Theoretical Foundations and Empirical Evaluations of Partisan Fairness in District-Based Democracies *. https://gking.harvard.edu/files/psym_2.pdf (Accessed March 16, 2019).#
  function(vs) {#
    abo = vs[vs > 0.5]   # districts won by party A#
    bel = vs[vs <= 0.5]  # districts won by party B#
    (-1 * (mean(abo) - 0.5) / (sum(find.winner(abo))/length(vs))) - ((0.5 - mean(bel)) / (1 - sum(find.winner(abo))/length(vs)))#
  }#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••• MEAN/MEDIAN••••••••••••••••••••••••••••••••••••••••••••••••••#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
`meanmedian` <- # Best, Robin E., Shawn J. Donahue, Jonathan Krasno, Daniel B. Magleby, et al. 2018. “Considering the Prospects for Establishing a Packing Gerrymandering Standard.” Election Law Journal: Rules, Politics, and Policy 17(1): 1–20. http://www.liebertpub.com/doi/10.1089/elj.2016.0392 (Accessed July 24, 2018).#
  function(votes) median(votes) - mean(votes)#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# •••• EFFICIENCY GAP••••••••••••••••••••••••••••••••••••••••••••••#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
`eff_gap` <- # Stephanopoulos, Nicholas, and Eric Mcghee. 2014. “Partisan Gerrymandering and the Efficiency Gap.” University of Chicago Law School 82. http://ssrn.com/abstract=2457468.. (Accessed September 10, 2018).#
  function(D, R) {#
    total <- sum(D)+sum(R)#
    dem_wasted <- sum(ifelse(D>R, D[D>R] - R[D>R], D[D<R]))#
    rep_wasted <- sum(ifelse(D<R, R[D<R] - D[D<R], R[D>R]))#
      return(-1 * (dem_wasted - rep_wasted) / sum(total))}#
#
eg_TP <- function(votes) #
  {#
    y <- cbind.data.frame(votes, 1-votes)#
      return(-1 * eff_gap(y[1], y[2]))#
  }#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# •••• GERRY DISPLAY ••••••••••••••••••••••••••••••••••••••••••••••#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
  gerry <- function(x, toggle=TRUE)#
    {#
    Seats = paste0(" [", seats.print(x), "]")#
    SeatPER = percent(seats(x))#
    Votes = percent(mean(default.unc(x)))#
    Bias = r(seatsvotes(x)$bias)#
    EfficiencyGap = -1 * r(eg_TP(x))#
    MeanMedian = r(meanmedian(x))#
    Declination = -1 * r(declination(x))#
    a <- rbind.data.frame(#
      Seats, SeatPER, Votes, Bias, EfficiencyGap, MeanMedian, Declination)#
    rownames(a) <- c("Seats","Seat %","Votes","Bias","Efficiency Gap","Mean/Median","Declination")#
    colnames(a) <- "Summary"#
#
    if (toggle!=TRUE) { # TO RETURN UNFORMATTED MEASUREMENTS#
    SeatsT = NA#
    SeatPERT = r(seats(x))#
    VotesT = r(mean(default.unc(x)))#
    BiasT = r(seatsvotes(x)$bias)#
    EfficiencyGapT = -1 * r(eg_TP(x))#
    MeanMedianT = r(meanmedian(x))#
    DeclinationT = -1 * r(declination(x))#
      return(rbind.data.frame(#
      SeatsT, SeatPERT, VotesT, BiasT, EfficiencyGapT, MeanMedianT, DeclinationT))}#
    return(a)#
    }#
nintyfive <- function(x, percent=FALSE) {#
  if (percent==TRUE){ return(paste0("(", percent(r(quantile(x[!is.na(x)], 0.025),d=1)), ", ", percent(r(quantile(x[!is.na(x)], 0.975),d=1)), ")")) }#
  return(paste0("(", r(quantile(x[!is.na(x)], 0.025)), ", ", r(quantile(x[!is.na(x)], 0.975)), ")"))#
  }#
#
gtab <- function(x) {#
  p <- (paste0(x, ".sims.5050"))#
  p.tmp <- get(p)#
  s.tmp <- maps.sims.seats.5050[[x]]#
  v.tmp <- maps.sims.votes.5050[[x]]#
  x.bias <- get(paste0(p, ".bias"))#
  x.eg <- get(paste0(p, ".eg"))#
  x.mm <- get(paste0(p, ".meanmedian"))#
  x.declin <- get(paste0(p, ".declination"))#
    return(c(#
      r(mean(x.bias)), #
        nintyfive(x.bias), #
      r(mean(x.eg)), #
        nintyfive(x.eg), #
      r(mean(x.mm)), #
        nintyfive(x.mm),#
      r(mean(x.declin)), #
        nintyfive(x.declin)#
      ))#
    }#
#
ptab <- function(x) {#
  p <- (paste0(x, ".sims.5050"))#
  p.tmp <- get(p)#
  s.tmp <- maps.sims.seats.5050[[x]]#
  v.tmp <- maps.sims.votes.5050[[x]]#
    return(c(#
      paste0(r(sum(s.tmp*18)/(1000*18)*18), "R-", r(18-sum(s.tmp*18)/(1000*18)*18), "D"),#
      paste0("(", r(quantile(s.tmp, 0.025),d=1)*18, "R-", 18-r(quantile(s.tmp, 0.025),d=1)*18, "D, ", r(quantile(s.tmp, 0.975),d=1)*18, "R-", 18-r(quantile(s.tmp, 0.975),d=1)*18, "D)"),#
      paste0(median(s.tmp)*18, "R-", 18-median(s.tmp)*18, "D"),#
      percent(sum(1 * do.call(rbind, lapply(p.tmp, function(x) mean(find.winner(x)))) > 0.5) / 1000),#
      percent(sum(1 * do.call(rbind, lapply(p.tmp, function(x) mean(find.winner(x)))) < 0.5) / 1000),#
      percent(sum(1 * do.call(rbind, lapply(p.tmp, function(x) mean(find.winner(x)))) == 0.5) / 1000)#
      ))#
} #
#
 # •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••   #
`circle.new` <- #
  function(xorig, yorig, radius, add, ...){#
    x <- seq(-radius, radius, length.out = 1000)#
  # Euclidian distance to the origin#
  y <- sapply(x, function(z) sqrt(radius^2 - z^2))#
  if(add == TRUE){#
    line(xorig + c(x, rev(x)), c(yorig + y, yorig + rev(-y)),#
          type = "l", add=T, ...)#
   } else {#
   plot(xorig + c(x, rev(x)), c(yorig + y, yorig + rev(-y)),#
        type = "l",  #
    xlab="", #
    ylab="", #
    xaxt="n", #
    yaxt="n", #
    bty="n", ...)#
   }#
}#
#
`circle` <- #
function (x, y, radius, nv = 100, border = NULL, col = NA, lty = 1, #
    lwd = 1) {#
    xylim <- par("usr")#
    plotdim <- par("pin")#
    ymult <- getYmult()#
    angle.inc <- 2 * pi/nv#
    angles <- seq(0, 2 * pi - angle.inc, by = angle.inc)#
    if (length(col) < length(radius)) #
        col <- rep(col, length.out = length(radius))#
    for (circle in 1:length(radius)) {#
        xv <- cos(angles) * radius[circle] + x#
        yv <- sin(angles) * radius[circle] * ymult + y#
        polygon(xv, yv, border = border, col = col[circle], lty = lty, #
            lwd = lwd)#
    }#
    invisible(list(x = xv, y = yv))#
}#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# COMPACTNESS MEASURES#
#
POLSBYPOPPER <- function (x) r(mean((4 * 3.1415926535 * x$area) / (x$perimeter^2)), d = 3)#
REOCK <- function (x) r(mean(x$area/(x$smallestcircle^2 * 3.1415926535)), d = 3)#
poly.math <- function (x) {#
    compactness <- NULL#
  if (class(x)=="character") x <- get(x)#
      shapeFile <- x#
      mapObject <- fortify(shapeFile)#
      mapObject$id <- as.character(as.numeric(mapObject$id) + 1)#
      mapObject <- data.frame(mapObject, shapeFile@data[mapObject$id, ])#
      mapObject$piece <- as.character(mapObject$piece)#
      uniqueCDs <- sort(unique(as.numeric(mapObject$id)))#
      for(id in uniqueCDs)#
        {#
          cdShape <- mapObject[mapObject$id == id, ]#
          cdPoly <- SpatialPolygons(list(Polygons(lapply(split(cdShape[, c("long", "lat")], cdShape$piece), Polygon), ID = "b")))#
          owinObject <- try(as(cdPoly, "owin"))#
          compactness[[id]] <-  data.frame(area=area.owin(owinObject), perimeter=perimeter(owinObject), smallestcircle=boundingradius(owinObject))#
        }#
        x <- do.call("rbind", compactness)#
        cat(#
          "\n REOCK:        ", REOCK(x), "\n",#
          "POLSBY-POPPER:", POLSBYPOPPER(x), "\n \n"#
          )#
        return(x)#
  }
###########################################################################################################
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ──╔╦═══╦═╗─╔╦═══╦════╦╗─╔╦═══╦═╗─╔╗#
# ──║║╔═╗║║╚╗║║╔═╗║╔╗╔╗║║─║║╔═╗║║╚╗║║#
# ──║║║─║║╔╗╚╝║║─║╠╝║║╚╣╚═╝║║─║║╔╗╚╝║#
# ╔╗║║║─║║║╚╗║║╚═╝║─║║─║╔═╗║╚═╝║║╚╗║║#
# ║╚╝║╚═╝║║─║║║╔═╗║─║║─║║─║║╔═╗║║─║║║#
# ╚══╩═══╩╝─╚═╩╝─╚╝─╚╝─╚╝─╚╩╝─╚╩╝─╚═╝#
#         ╔═══╦═══╦═══╦╗──╔╦═══╦═══╗#
#         ║╔═╗║╔══╣╔═╗║╚╗╔╝║╔═╗║╔═╗║#
#         ║║─╚╣╚══╣╚═╝╠╗║║╔╣║─║║╚══╗#
#         ║║─╔╣╔══╣╔╗╔╝║╚╝║║╚═╝╠══╗║#
#         ║╚═╝║╚══╣║║╚╗╚╗╔╝║╔═╗║╚═╝║#
#         ╚═══╩═══╩╝╚═╝─╚╝─╚╝─╚╩═══╝#
### Code to Replicate "Tools for Identifying Partisan Gerrymandering"#
# 🅙🅞🅝🅐🅣🅗🅐🅝 🅡. 🅒🅔🅡🅥🅐🅢, University of California Irvine#
# 🅑🅔🅡🅝🅐🅡🅓 🅖🅡🅞🅕🅜🅐🅝, University of California Irvine#
### Note: #
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
###########################################################################################################
    rm(list=ls(all=TRUE))   # Remove all objects just to be safe.#
    options(scipen=999)     # Turn off Scientific Notation#
    options(stringsAsFactors = FALSE)#
    doInstall <- F#
setwd("/Users/cervas/Google Drive/Papers/Tools for Identifying a Partisan Gerrymander/PA_LWV")  # Main directory#
source("R/license.R")    #
seed <- 66#
set.seed(seed)#
              # Change to FALSE if you don't want packages installed.#
  projection <- "+proj=lcc +lat_1=40.96666666666667 +lat_2=39.93333333333333 +lat_0=39.33333333333334 +lon_0=-77.75 +x_0=600000 +y_0=0 +ellps=GRS80 +datum=NAD83 +to_meter=0.3048006096012192 +no_defs"#
# https://spatialreference.org/ref/epsg/nad83-pennsylvania-south-ftus/#
  projection <- "+init=epsg:4269"#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
  plan_names <- #
    c(#
      "2011 Enacted",#
      "Joint Legislative",#
      "Gov. Wolf",#
      "2018 Court Remedial")#
  plans <- #
    c("enacted2011", #
        "joint", #
        "govwolf",#
        "court")#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# =================================================================#
# -- FUNCTIONS -- -- FUNCTIONS -- -- FUNCTIONS -- -- FUNCTIONS  -- #
# =================================================================#
    source("R/GERRYfunctions.R")#
    source("/Users/cervas/Google Drive/School/UCI/R Functions/seatsvotes.R")#
# =================================================================#
# -- DATA -- -- DATA -- -- DATA -- -- DATA  -- -- DATA  -- -- DATA #
# =================================================================#
    source("R/PA_Congressional_Data.R")#
    pa.redist.dta <- read.csv("./_data/pa_redist_shp.csv")#
    source("R/DataSetup.R") #
# ================================================================= ##
# -- TOOLS FOR IDENTIFYING PARTISAN  GERRYMANDERING -- ANALYSIS -- -##
# ================================================================= #        #
    source("R/Simulations.R")#
    source("R/GIS.R")#
    source("R/Tables.R")#
    source("R/Plots.R")
cat(#
  "\n#
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
    LOADING FUNCTIONS. . . . . . . . . . . . . . . . . . . . . . #
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n")#
`Table` <- function(x, path=NULL, caption="", label="", footnote="", landscape=FALSE, out=NULL)#
  {#
    x <- append(x,#
paste0(#
"\n% =====================================================================#
% ▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟#
% ---------------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n \\begin{center}\\textbf{INSERT TABLE \\ref{", label, "} ABOUT HERE} \\end{center}#
% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n#
\n% =====================================================================#
% ▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟#
% ---------------------------------------------------------------------",#
ifelse(landscape==T, "\n\\begin{landscape}", "")),#
 after = 1)#
#
    x <- append(x,#
paste0("\\end{tabular}#
\\tabnotes{", footnote, "}#
\\end{table}",#
ifelse(landscape==T, "\n\\end{landscape}", ""),#
"#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ T͎A͎B͎L͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ T͎A͎B͎L͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ T͎A͎B͎L͎E͎ ▄▀▄▀▄▀#
% ===================================================================== \n \n"),#
after = length(x))#
cat(paste(x, collapse = "\n"), "\n")#
cat(paste0())#
  }#
 `Figure` <- function(path=NULL, caption="", label="", footnote="")#
  {#
    x <- paste0("\n#
% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n \\begin{center} INSERT FIGURE \\ref{", label, "} ABOUT HERE \\end{center}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% ===================================================================== \n",#
#
"\n% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------#
% " , caption,#
"% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
% #
\\begin{figure}#
    \\begin{center}#
    \\caption{",caption, "}#
    \\label{", label, "}#
    \\includegraphics[width=1\\textwidth]{", path, "}#
    \\end{center}#
    \\tabnotes{", footnote, "}#
\\end{figure}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% =====================================================================\n \n"#
)#
  cat(paste(x, collapse = "\n"), "\n")#
  }#
#
`new.list` <-#
function(len) {#
  out <- list(NA)#
  if (len<1) stop ("Can't make a list of length ",len,".")#
  for (ii in 1:len) out[[ii]] <- NA#
  return(out)#
}#
#
`shift` <- # Seats at c vote#
function(x, w=NULL, c=0.5) {#
    if(is.null(w)) w <- rep(1,length(x))#
  tmp <- mean.w(x, w = w) - c#
    tmp.votes <- x - tmp#
    return(seats(tmp.votes))#
}#
`cube` <- function (x)  x^3/(1-3*x+3*x^2)#
#
seats.display <- function(x) {#
  tmp <- numeric()#
    for (i in 1:dim(x)[2]) {#
      rep <- seats(x[,i]) * length(x[,i])#
      dem <- length(x[,i]) - rep#
      tmp <- rbind(tmp, paste0(rep,"R-", dem, "D"))#
    }#
    return(tmp)#
  }#
#
`two_party` <- #
  function(D, R) {#
    replaceNA(as.numeric(D))/(replaceNA(as.numeric(D))+replaceNA(as.numeric(R)))#
    }#
#
`find.winner` <- #
  function(inp) 0*(inp<0.5)+1*(inp>0.5)#
#
`seats` <- #
  function(inp) mean(inp>.5)#
#
`make.weights` <-  #
  function(x, d = 5) {#
    r(x/sum(x,na.rm=T), d = d)}#
#
`f.num` <- function(x, d=2) format(round(x, d=d), nsmall=d)#
#
`percent` <- #
  function(x, d = 1) {#
    paste0(f.num(x * 100, d= d), "%")#
  }#
#
`replaceNA` <- #
  function (x, value=0) {#
   x[is.na(x)] <- value #
   return(x)}#
#
`mean.w` <- # WEIGHTED MEAN#
function (x, weight=NULL, na.rm = FALSE, ...) {#
    if (is.null(weight)) weight <- rep(1, length(x))#
      w <- as.double(weight)#
    if (na.rm) {#
        i <- !is.na(x)#
        w <- w[i]#
        x <- x[i]#
    }#
    sum((x * w)[w != 0])/sum(w)}#
#
inv <- function(x) {#
  (exp(x) / ( 1 + exp(x)))#
}#
#
sv.curve <- function(s,v) {#
  reg <- lm(log(sv(s)) ~ log(sv(v)))#
  vote <- seq(0.01,0.99, by=.01)#
  seatvotes <-  reg$coefficients[2]*log(vote/(1-vote)) + reg$coefficients[1]#
  return(inv(seatvotes))#
}#
#
sv <- function(x) (x / (1 - x))#
#
`seats.print` <- function(x) paste0(sum(find.winner(x)), "R-", length(x)-sum(find.winner(x)), "D")#
#
`agg.precinct` <- function(data, var, id) {#
        cbind.data.frame(#
          REP = aggregate(as.numeric(data[,paste0(var, "R")]), by=list(id=data[,id]), FUN=sum)[,2], #
          DEM = aggregate(as.numeric(data[,paste0(var, "D")]), by=list(id=data[,id]), FUN=sum)[,2]#
        )#
      }#
#
comp.raw <- function(data) {#
  (two_party(as.numeric(data[,"T16PRESR"]), as.numeric(data[,"T16PRESD"])) +#
  two_party(as.numeric(data[,"T16SENR"]), as.numeric(data[,"T16SEND"])) +#
  two_party(as.numeric(data[,"T16ATGR"]), as.numeric(data[,"T16ATGD"])) +#
  two_party(as.numeric(data[,"T16AUDR"]), as.numeric(data[,"T16AUDD"])) +#
  two_party(as.numeric(data[,"T16TREASR"]), as.numeric(data[,"T16TREASD"]))#
  ) / 5#
  }#
#
composite <- function(data, id) {#
  data <- data[order(data[,id]),]#
  cbind.data.frame(#
        CONG = two_party(aggregate(as.numeric(data[,"T16CONGR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16CONGD"]), by=list(id=data[,id]), FUN=sum)[,2]),#
        PRES = two_party(aggregate(as.numeric(data[,"T16PRESR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16PRESD"]), by=list(id=data[,id]), FUN=sum)[,2]), #
        USSEN = two_party(aggregate(as.numeric(data[,"T16SENR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16SEND"]), by=list(id=data[,id]), FUN=sum)[,2]) ,#
        ATTGEN = two_party(aggregate(as.numeric(data[,"T16ATGR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16ATGD"]), by=list(id=data[,id]), FUN=sum)[,2]) ,#
        AUDITOR = two_party(aggregate(as.numeric(data[,"T16AUDR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16AUDD"]), by=list(id=data[,id]), FUN=sum)[,2]) ,#
        TREASURER = two_party(aggregate(as.numeric(data[,"T16TREASR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16TREASD"]), by=list(id=data[,id]), FUN=sum)[,2]) ,#
        COMPOSITE = composite.sum(data, id)#
        )#
  }#
#
composite.sum <- function(data, id) {#
  two_party(#
            (#
              aggregate(as.numeric(data[,"T16PRESR"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16SENR"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16ATGR"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16AUDR"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16TREASR"]), by=list(id=data[,id]), FUN=sum)[,2]#
            ),#
            (#
              aggregate(as.numeric(data[,"T16PRESD"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16SEND"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16ATGD"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16AUDD"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16TREASD"]), by=list(id=data[,id]), FUN=sum)[,2]#
            )#
          )#
  }#
#
std <- function(x) {#
  (mean(x[!is.na(x)]) - x) / sd(x[!is.na(x)])#
  }#
#
ci <- function(x)#
  {#
    r <- summary(lm(x~1))#
      m <- coef(r)[1]#
      se <- coef(r)[2]#
      return(qt(0.975, df=length(x)-1) * se)#
  }#
#
`quick.summary` <- function (x) #
  {#
  `qsum` <- function (set) cbind(mean(set[!is.na(set)]),#
                            sd(set[!is.na(set)]),#
                            var(set[!is.na(set)]),#
                            min(set[!is.na(set)]),#
                            max(set[!is.na(set)]),#
                            sum(1*!is.na(set)),#
                            sum(1*is.na(set)))#
    out <- qsum(x)#
  colnames(out) <- c("Mean","SD","Variance","Min","Max","Valid","Missing")#
    return(out)#
  }#
#
`quick.sum` <- #
  function (x) {#
  `qsum` <- #
    function (set) cbind(#
                      mean(set[!is.na(set)]),#
                      mean(set[!is.na(set)]) - ci(set[!is.na(set)]),#
                      mean(set[!is.na(set)]) + ci(set[!is.na(set)]),#
                      sd(set[!is.na(set)]),#
                      min(set[!is.na(set)]),#
                      quantile(set[!is.na(set)], 0.025),#
                      quantile(set[!is.na(set)], 0.975),                            #
                      max(set[!is.na(set)])#
                      )#
#
    out <- qsum(x)#
  colnames(out) <- c("Mean","CI_lower","CI_upper","SD","Min","2.5%","97.5%","Max")#
    return(out)}#
#
  comb <-combn(c(0:9,LETTERS[1:6]),2)#
  opacity <- c(paste0(comb[1,1:120], comb[2,1:120]), paste0("FF"))#
#
`unc` <- function(x) -1 * (x <= .25) + 1 * (x >= .75)#
#
`delete.unc` <-#
function(vs, uncL, uncU) {#
  #replaces uncontested vote values with "missing".#
 f1 <- function (a,b,c) ifelse (is.na(a),NA,#
                                 ifelse(a<b,NA, ifelse(a>c,NA,a)))#
  return(sapply (vs,f1,uncL,uncU)) }#
#
`replace.unc` <-#
function (vs,l,u,lr,ur, na.rm=T) { # na.rm replaces NAs with 0#
  na <- numeric()#
    if(na.rm==T) #
    {#
      na <- 0#
    } else NA#
  f1 <- function (a,b,c,d,e) if (!is.na(a)) {#
    if (a<b) a <- d else if (a>c) a <- e else a#
  } else NA#
  return(sapply (vs,f1,l,u,lr,ur))}#
`default.unc` <-#
function (vs, uncL = 0.25, uncU = 0.75, uncLR = 0.25, uncUR = 0.75) {#
  vs <- replace.unc(vs, uncL, uncU, uncLR, uncUR)#
  return(vs)}#
#
`mean.unc` <- # uncL and uncU to replace outside bounds, otherwise just NAs#
function(vs, uncL = 0.0001, uncU = 0.99999) {#
  vs <- delete.unc(vs, uncL=uncL, uncU=uncU)#
tmp <- vs[!is.na(vs)]#
reg <- summary(lm(tmp ~ 1))$coef[1] # mean#
reg_sig <- summary(lm(tmp ~ 1))$coef[2] # sigma#
  new.mean <- truncate(rnorm(length(vs[is.na(vs)]), reg, reg_sig))#
  vs[is.na(vs)] <- new.mean#
  return(vs)}#
`impute.weights` <- # for use when turnout in districts is abnormally high or low (w = # of standard deviations from median)#
function(t1, t2, w = 2) {#
  t <- t1+t2#
  uncL <- (median(t, na.rm=T) -  (w * sd(t, na.rm=T)))#
  uncU <- (median(t, na.rm=T) + (w * sd(t, na.rm=T)))#
  t1 <- delete.unc(t, uncL=uncL, uncU=uncU)#
tmp <- t1[!is.na(t1)]#
reg <- summary(lm(tmp ~ 1))$coef[1] # mean#
reg_sig <- summary(lm(tmp ~ 1))$coef[2] # sigma#
  new.reg <- r(rnorm(length(t1[is.na(t1)]), reg, reg_sig), d=0)#
  t1[is.na(t1)] <- new.reg#
  return(t1)}#
`truncate` <-#
function(r1) {#
  below <- r1<=0#
  above <- r1>=1#
  between <- !(below|above)#
  (below*0.0001)+(r1*between)+0.9999*above#
}#
sim.election <- function(votes= NULL, center=house.2016.votes, incumbency=NULL, yr=2018, sims=1000, sigma=sigma) {#
  if (is.null(sims)) sims <- 1000#
      equal.vote <- mean(votes) - mean(center)#
      sims.year <- new.list(sims)#
    for (k in 1:sims)#
      {#
    sims.year[[k]] <- #
        rnorm(length(votes), votes - equal.vote, #
          sigma)#
      }#
  return(sims.year)#
  }#
#
r <- function(r, d=2) round(r, digits=d)#
# =================================================================#
# -- GERRYMANDER MEASURES -- GERRYMANDER MEASURES -- GERRYMANDER ME#
# =================================================================#
# ••• DELINATION ••••••••••••••••••••••••••••••••••••••••••••••••••#
`declination` <- # Warrington, Gregory S. 2018. “Quantifying Gerrymandering Using the Vote Distribution.” Election Law Journal 17(1): 39–57. www.liebertpub.com (Accessed February 22, 2019).#
  function(votes) {#
    abo = votes[votes > 0.5]   # districts won by party A#
    bel = votes[votes <= 0.5]  # districts won by party B#
  # declination is undefined if one party wins all seats.#
    if (length(bel) == 0 | length(abo) == 0) {#
      return(NaN)#
    }#
  # angle for party B#
    theta = atan((1-(2*mean(bel))) / (length(bel) / length(votes)))#
  # angle for party A#
    gamma = atan((2*mean(abo)-1) / (length(abo) / length(votes)))#
  # normalize from radians to values betwen -1 and 1#
  # A little extra precision just in case :)#
    return(-1 * (2.0*(gamma-theta)/3.1415926535))}#
#
`declin2` <- # Simplified, not transformed from: Katz, Jonathan N. et al. 2018. Theoretical Foundations and Empirical Evaluations of Partisan Fairness in District-Based Democracies *. https://gking.harvard.edu/files/psym_2.pdf (Accessed March 16, 2019).#
  function(vs) {#
    abo = vs[vs > 0.5]   # districts won by party A#
    bel = vs[vs <= 0.5]  # districts won by party B#
    (-1 * (mean(abo) - 0.5) / (sum(find.winner(abo))/length(vs))) - ((0.5 - mean(bel)) / (1 - sum(find.winner(abo))/length(vs)))#
  }#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••• MEAN/MEDIAN••••••••••••••••••••••••••••••••••••••••••••••••••#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
`meanmedian` <- # Best, Robin E., Shawn J. Donahue, Jonathan Krasno, Daniel B. Magleby, et al. 2018. “Considering the Prospects for Establishing a Packing Gerrymandering Standard.” Election Law Journal: Rules, Politics, and Policy 17(1): 1–20. http://www.liebertpub.com/doi/10.1089/elj.2016.0392 (Accessed July 24, 2018).#
  function(votes) median(votes) - mean(votes)#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# •••• EFFICIENCY GAP••••••••••••••••••••••••••••••••••••••••••••••#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
`eff_gap` <- # Stephanopoulos, Nicholas, and Eric Mcghee. 2014. “Partisan Gerrymandering and the Efficiency Gap.” University of Chicago Law School 82. http://ssrn.com/abstract=2457468.. (Accessed September 10, 2018).#
  function(D, R) {#
    total <- sum(D)+sum(R)#
    dem_wasted <- sum(ifelse(D>R, D[D>R] - R[D>R], D[D<R]))#
    rep_wasted <- sum(ifelse(D<R, R[D<R] - D[D<R], R[D>R]))#
      return(-1 * (dem_wasted - rep_wasted) / sum(total))}#
#
eg_TP <- function(votes) #
  {#
    y <- cbind.data.frame(votes, 1-votes)#
      return(-1 * eff_gap(y[1], y[2]))#
  }#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# •••• GERRY DISPLAY ••••••••••••••••••••••••••••••••••••••••••••••#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
  gerry <- function(x, toggle=TRUE)#
    {#
    Seats = paste0(" [", seats.print(x), "]")#
    SeatPER = percent(seats(x))#
    Votes = percent(mean(default.unc(x)))#
    Bias = r(seatsvotes(x)$bias)#
    EfficiencyGap = r(eg_TP(x))#
    MeanMedian = r(meanmedian(x))#
    Declination = r(declination(x))#
    a <- rbind.data.frame(#
      Seats, SeatPER, Votes, Bias, EfficiencyGap, MeanMedian, Declination)#
    rownames(a) <- c("Seats","Seat %","Votes","Bias","Efficiency Gap","Mean/Median","Declination")#
    colnames(a) <- "Summary"#
#
    if (toggle!=TRUE) { # TO RETURN UNFORMATTED MEASUREMENTS#
    SeatsT = NA#
    SeatPERT = r(seats(x))#
    VotesT = r(mean(default.unc(x)))#
    BiasT = r(seatsvotes(x)$bias)#
    EfficiencyGapT = r(eg_TP(x))#
    MeanMedianT = r(meanmedian(x))#
    DeclinationT = r(declination(x))#
      return(rbind.data.frame(#
      SeatsT, SeatPERT, VotesT, BiasT, EfficiencyGapT, MeanMedianT, DeclinationT))}#
    return(a)#
    }#
nintyfive <- function(x, percent=FALSE) {#
  if (percent==TRUE){ return(paste0("(", percent(r(quantile(x[!is.na(x)], 0.025),d=1)), ", ", percent(r(quantile(x[!is.na(x)], 0.975),d=1)), ")")) }#
  return(paste0("(", r(quantile(x[!is.na(x)], 0.025)), ", ", r(quantile(x[!is.na(x)], 0.975)), ")"))#
  }#
#
gtab <- function(x) {#
  p <- (paste0(x, ".sims.5050"))#
  p.tmp <- get(p)#
  s.tmp <- maps.sims.seats.5050[[x]]#
  v.tmp <- maps.sims.votes.5050[[x]]#
  x.bias <- get(paste0(p, ".bias"))#
  x.eg <- get(paste0(p, ".eg"))#
  x.mm <- get(paste0(p, ".meanmedian"))#
  x.declin <- get(paste0(p, ".declination"))#
    return(c(#
      r(mean(x.bias)), #
        nintyfive(x.bias), #
      r(mean(x.eg)), #
        nintyfive(x.eg), #
      r(mean(x.mm)), #
        nintyfive(x.mm),#
      r(mean(x.declin)), #
        nintyfive(x.declin)#
      ))#
    }#
#
ptab <- function(x) {#
  p <- (paste0(x, ".sims.5050"))#
  p.tmp <- get(p)#
  s.tmp <- maps.sims.seats.5050[[x]]#
  v.tmp <- maps.sims.votes.5050[[x]]#
    return(c(#
      paste0(r(sum(s.tmp*18)/(1000*18)*18), "R-", r(18-sum(s.tmp*18)/(1000*18)*18), "D"),#
      paste0("(", r(quantile(s.tmp, 0.025),d=1)*18, "R-", 18-r(quantile(s.tmp, 0.025),d=1)*18, "D, ", r(quantile(s.tmp, 0.975),d=1)*18, "R-", 18-r(quantile(s.tmp, 0.975),d=1)*18, "D)"),#
      paste0(median(s.tmp)*18, "R-", 18-median(s.tmp)*18, "D"),#
      percent(sum(1 * do.call(rbind, lapply(p.tmp, function(x) mean(find.winner(x)))) > 0.5) / 1000),#
      percent(sum(1 * do.call(rbind, lapply(p.tmp, function(x) mean(find.winner(x)))) < 0.5) / 1000),#
      percent(sum(1 * do.call(rbind, lapply(p.tmp, function(x) mean(find.winner(x)))) == 0.5) / 1000)#
      ))#
} #
#
 # •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••   #
`circle.new` <- #
  function(xorig, yorig, radius, add, ...){#
    x <- seq(-radius, radius, length.out = 1000)#
  # Euclidian distance to the origin#
  y <- sapply(x, function(z) sqrt(radius^2 - z^2))#
  if(add == TRUE){#
    line(xorig + c(x, rev(x)), c(yorig + y, yorig + rev(-y)),#
          type = "l", add=T, ...)#
   } else {#
   plot(xorig + c(x, rev(x)), c(yorig + y, yorig + rev(-y)),#
        type = "l",  #
    xlab="", #
    ylab="", #
    xaxt="n", #
    yaxt="n", #
    bty="n", ...)#
   }#
}#
#
`circle` <- #
function (x, y, radius, nv = 100, border = NULL, col = NA, lty = 1, #
    lwd = 1) {#
    xylim <- par("usr")#
    plotdim <- par("pin")#
    ymult <- getYmult()#
    angle.inc <- 2 * pi/nv#
    angles <- seq(0, 2 * pi - angle.inc, by = angle.inc)#
    if (length(col) < length(radius)) #
        col <- rep(col, length.out = length(radius))#
    for (circle in 1:length(radius)) {#
        xv <- cos(angles) * radius[circle] + x#
        yv <- sin(angles) * radius[circle] * ymult + y#
        polygon(xv, yv, border = border, col = col[circle], lty = lty, #
            lwd = lwd)#
    }#
    invisible(list(x = xv, y = yv))#
}#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# COMPACTNESS MEASURES#
#
POLSBYPOPPER <- function (x) r(mean((4 * 3.1415926535 * x$area) / (x$perimeter^2)), d = 3)#
REOCK <- function (x) r(mean(x$area/(x$smallestcircle^2 * 3.1415926535)), d = 3)#
poly.math <- function (x) {#
    compactness <- NULL#
  if (class(x)=="character") x <- get(x)#
      shapeFile <- x#
      mapObject <- fortify(shapeFile)#
      mapObject$id <- as.character(as.numeric(mapObject$id) + 1)#
      mapObject <- data.frame(mapObject, shapeFile@data[mapObject$id, ])#
      mapObject$piece <- as.character(mapObject$piece)#
      uniqueCDs <- sort(unique(as.numeric(mapObject$id)))#
      for(id in uniqueCDs)#
        {#
          cdShape <- mapObject[mapObject$id == id, ]#
          cdPoly <- SpatialPolygons(list(Polygons(lapply(split(cdShape[, c("long", "lat")], cdShape$piece), Polygon), ID = "b")))#
          owinObject <- try(as(cdPoly, "owin"))#
          compactness[[id]] <-  data.frame(area=area.owin(owinObject), perimeter=perimeter(owinObject), smallestcircle=boundingradius(owinObject))#
        }#
        x <- do.call("rbind", compactness)#
        cat(#
          "\n REOCK:        ", REOCK(x), "\n",#
          "POLSBY-POPPER:", POLSBYPOPPER(x), "\n \n"#
          )#
        return(x)#
  }
congsum.caption = "US House Election Summaries (PA 2012-2016)"
congsum.label = "tab:congsum"
congsum.footnote = "Uncontested races are imputed with 0.25 and 0.75 for the respective winners. All votes are calculated from the Republican perspective of the two-party vote. We've adjusted all gerrymandering measures such that negative numbers indicate bias in favor of the Democrats."
congsum.tmp <- cbind.data.frame(#
    # PA2004 = gerry(default.unc(house.2004.votes)),#
    # PA2006 = gerry(default.unc(house.2006.votes)),#
    # PA2008 = gerry(default.unc(house.2008.votes)),#
    # PA2010 = gerry(default.unc(house.2010.votes)),#
    PA2012 = gerry(default.unc(house.2012.votes)), #
    PA2014 = gerry(default.unc(house.2014.votes)), #
    PA2016 = gerry(default.unc(house.2016.votes)),#
    # PA2018 = gerry(default.unc(house.2018.votes)),#
    PA2012_2016_AVE = rowMeans(cbind(   #
    gerry(default.unc(house.2012.votes), toggle=F),#
    gerry(default.unc(house.2014.votes), toggle=F),#
    gerry(default.unc(house.2016.votes), toggle=F)))#
  )
congsum.tmp
colnames(congsum.tmp) <- c(seq(2012,2016,2),"AVE")
congsum.tmp.tex <- stargazer(congsum.tmp,#
    style = "apsr", #
    summary = FALSE,#
    header = FALSE,#
    column.sep.width = "-5pt",#
    multicolumn = TRUE,#
    label = congsum.label,#
    title = congsum.caption,#
    notes = congsum.footnote)
congsum.tmp.tex <- congsum.tmp.tex[c(-6, -16, -17, -18, -19)]
congsum.tmp.tex[8] <- "Seats &  [13R-5D] &  [13R-5D] &  [13R-5D] & [13R-5D] \\\\ "
Table(congsum.tmp.tex,#
    path = "Tables/_tab_congsum.tex",#
    caption = congsum.caption,#
    label = congsum.label,#
    footnote = congsum.footnote)
cat(#
  "\n#
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
    LOADING FUNCTIONS. . . . . . . . . . . . . . . . . . . . . . #
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n")#
`Table` <- function(x, path=NULL, caption="", label="", footnote="", landscape=FALSE, out=NULL)#
  {#
    x <- append(x,#
paste0(#
"\n% =====================================================================#
% ▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟#
% ---------------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n \\begin{center}\\textbf{INSERT TABLE \\ref{", label, "} ABOUT HERE} \\end{center}#
% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n#
\n% =====================================================================#
% ▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟#
% ---------------------------------------------------------------------",#
ifelse(landscape==T, "\n\\begin{landscape}", "")),#
 after = 1)#
#
    x <- append(x,#
paste0("\\end{tabular}#
\\tabnotes{", footnote, "}#
\\end{table}",#
ifelse(landscape==T, "\n\\end{landscape}", ""),#
"#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ T͎A͎B͎L͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ T͎A͎B͎L͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ T͎A͎B͎L͎E͎ ▄▀▄▀▄▀#
% ===================================================================== \n \n"),#
after = length(x))#
cat(paste(x, collapse = "\n"), "\n")#
cat(paste0())#
  }#
 `Figure` <- function(path=NULL, caption="", label="", footnote="")#
  {#
    x <- paste0("\n#
% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n \\begin{center} INSERT FIGURE \\ref{", label, "} ABOUT HERE \\end{center}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% ===================================================================== \n",#
#
"\n% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------#
% " , caption,#
"% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
% #
\\begin{figure}#
    \\begin{center}#
    \\caption{",caption, "}#
    \\label{", label, "}#
    \\includegraphics[width=1\\textwidth]{", path, "}#
    \\end{center}#
    \\tabnotes{", footnote, "}#
\\end{figure}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% =====================================================================\n \n"#
)#
  cat(paste(x, collapse = "\n"), "\n")#
  }#
#
`new.list` <-#
function(len) {#
  out <- list(NA)#
  if (len<1) stop ("Can't make a list of length ",len,".")#
  for (ii in 1:len) out[[ii]] <- NA#
  return(out)#
}#
#
`shift` <- # Seats at c vote#
function(x, w=NULL, c=0.5) {#
    if(is.null(w)) w <- rep(1,length(x))#
  tmp <- mean.w(x, w = w) - c#
    tmp.votes <- x - tmp#
    return(seats(tmp.votes))#
}#
`cube` <- function (x)  x^3/(1-3*x+3*x^2)#
#
seats.display <- function(x) {#
  tmp <- numeric()#
    for (i in 1:dim(x)[2]) {#
      rep <- seats(x[,i]) * length(x[,i])#
      dem <- length(x[,i]) - rep#
      tmp <- rbind(tmp, paste0(rep,"R-", dem, "D"))#
    }#
    return(tmp)#
  }#
#
`two_party` <- #
  function(D, R) {#
    replaceNA(as.numeric(D))/(replaceNA(as.numeric(D))+replaceNA(as.numeric(R)))#
    }#
#
`find.winner` <- #
  function(inp) 0*(inp<0.5)+1*(inp>0.5)#
#
`seats` <- #
  function(inp) mean(inp>.5)#
#
`make.weights` <-  #
  function(x, d = 5) {#
    r(x/sum(x,na.rm=T), d = d)}#
#
`f.num` <- function(x, d=2) format(round(x, d=d), nsmall=d)#
#
`percent` <- #
  function(x, d = 1) {#
    paste0(f.num(x * 100, d= d), "%")#
  }#
#
`replaceNA` <- #
  function (x, value=0) {#
   x[is.na(x)] <- value #
   return(x)}#
#
`mean.w` <- # WEIGHTED MEAN#
function (x, weight=NULL, na.rm = FALSE, ...) {#
    if (is.null(weight)) weight <- rep(1, length(x))#
      w <- as.double(weight)#
    if (na.rm) {#
        i <- !is.na(x)#
        w <- w[i]#
        x <- x[i]#
    }#
    sum((x * w)[w != 0])/sum(w)}#
#
inv <- function(x) {#
  (exp(x) / ( 1 + exp(x)))#
}#
#
sv.curve <- function(s,v) {#
  reg <- lm(log(sv(s)) ~ log(sv(v)))#
  vote <- seq(0.01,0.99, by=.01)#
  seatvotes <-  reg$coefficients[2]*log(vote/(1-vote)) + reg$coefficients[1]#
  return(inv(seatvotes))#
}#
#
sv <- function(x) (x / (1 - x))#
#
`seats.print` <- function(x) paste0(sum(find.winner(x)), "R-", length(x)-sum(find.winner(x)), "D")#
#
`agg.precinct` <- function(data, var, id) {#
        cbind.data.frame(#
          REP = aggregate(as.numeric(data[,paste0(var, "R")]), by=list(id=data[,id]), FUN=sum)[,2], #
          DEM = aggregate(as.numeric(data[,paste0(var, "D")]), by=list(id=data[,id]), FUN=sum)[,2]#
        )#
      }#
#
comp.raw <- function(data) {#
  (two_party(as.numeric(data[,"T16PRESR"]), as.numeric(data[,"T16PRESD"])) +#
  two_party(as.numeric(data[,"T16SENR"]), as.numeric(data[,"T16SEND"])) +#
  two_party(as.numeric(data[,"T16ATGR"]), as.numeric(data[,"T16ATGD"])) +#
  two_party(as.numeric(data[,"T16AUDR"]), as.numeric(data[,"T16AUDD"])) +#
  two_party(as.numeric(data[,"T16TREASR"]), as.numeric(data[,"T16TREASD"]))#
  ) / 5#
  }#
#
composite <- function(data, id) {#
  data <- data[order(data[,id]),]#
  cbind.data.frame(#
        CONG = two_party(aggregate(as.numeric(data[,"T16CONGR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16CONGD"]), by=list(id=data[,id]), FUN=sum)[,2]),#
        PRES = two_party(aggregate(as.numeric(data[,"T16PRESR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16PRESD"]), by=list(id=data[,id]), FUN=sum)[,2]), #
        USSEN = two_party(aggregate(as.numeric(data[,"T16SENR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16SEND"]), by=list(id=data[,id]), FUN=sum)[,2]) ,#
        ATTGEN = two_party(aggregate(as.numeric(data[,"T16ATGR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16ATGD"]), by=list(id=data[,id]), FUN=sum)[,2]) ,#
        AUDITOR = two_party(aggregate(as.numeric(data[,"T16AUDR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16AUDD"]), by=list(id=data[,id]), FUN=sum)[,2]) ,#
        TREASURER = two_party(aggregate(as.numeric(data[,"T16TREASR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16TREASD"]), by=list(id=data[,id]), FUN=sum)[,2]) ,#
        COMPOSITE = composite.sum(data, id)#
        )#
  }#
#
composite.sum <- function(data, id) {#
  two_party(#
            (#
              aggregate(as.numeric(data[,"T16PRESR"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16SENR"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16ATGR"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16AUDR"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16TREASR"]), by=list(id=data[,id]), FUN=sum)[,2]#
            ),#
            (#
              aggregate(as.numeric(data[,"T16PRESD"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16SEND"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16ATGD"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16AUDD"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16TREASD"]), by=list(id=data[,id]), FUN=sum)[,2]#
            )#
          )#
  }#
#
std <- function(x) {#
  (mean(x[!is.na(x)]) - x) / sd(x[!is.na(x)])#
  }#
#
ci <- function(x)#
  {#
    r <- summary(lm(x~1))#
      m <- coef(r)[1]#
      se <- coef(r)[2]#
      return(qt(0.975, df=length(x)-1) * se)#
  }#
#
`quick.summary` <- function (x) #
  {#
  `qsum` <- function (set) cbind(mean(set[!is.na(set)]),#
                            sd(set[!is.na(set)]),#
                            var(set[!is.na(set)]),#
                            min(set[!is.na(set)]),#
                            max(set[!is.na(set)]),#
                            sum(1*!is.na(set)),#
                            sum(1*is.na(set)))#
    out <- qsum(x)#
  colnames(out) <- c("Mean","SD","Variance","Min","Max","Valid","Missing")#
    return(out)#
  }#
#
`quick.sum` <- #
  function (x) {#
  `qsum` <- #
    function (set) cbind(#
                      mean(set[!is.na(set)]),#
                      mean(set[!is.na(set)]) - ci(set[!is.na(set)]),#
                      mean(set[!is.na(set)]) + ci(set[!is.na(set)]),#
                      sd(set[!is.na(set)]),#
                      min(set[!is.na(set)]),#
                      quantile(set[!is.na(set)], 0.025),#
                      quantile(set[!is.na(set)], 0.975),                            #
                      max(set[!is.na(set)])#
                      )#
#
    out <- qsum(x)#
  colnames(out) <- c("Mean","CI_lower","CI_upper","SD","Min","2.5%","97.5%","Max")#
    return(out)}#
#
  comb <-combn(c(0:9,LETTERS[1:6]),2)#
  opacity <- c(paste0(comb[1,1:120], comb[2,1:120]), paste0("FF"))#
#
`unc` <- function(x) -1 * (x <= .25) + 1 * (x >= .75)#
#
`delete.unc` <-#
function(vs, uncL, uncU) {#
  #replaces uncontested vote values with "missing".#
 f1 <- function (a,b,c) ifelse (is.na(a),NA,#
                                 ifelse(a<b,NA, ifelse(a>c,NA,a)))#
  return(sapply (vs,f1,uncL,uncU)) }#
#
`replace.unc` <-#
function (vs,l,u,lr,ur, na.rm=T) { # na.rm replaces NAs with 0#
  na <- numeric()#
    if(na.rm==T) #
    {#
      na <- 0#
    } else NA#
  f1 <- function (a,b,c,d,e) if (!is.na(a)) {#
    if (a<b) a <- d else if (a>c) a <- e else a#
  } else NA#
  return(sapply (vs,f1,l,u,lr,ur))}#
`default.unc` <-#
function (vs, uncL = 0.25, uncU = 0.75, uncLR = 0.25, uncUR = 0.75) {#
  vs <- replace.unc(vs, uncL, uncU, uncLR, uncUR)#
  return(vs)}#
#
`mean.unc` <- # uncL and uncU to replace outside bounds, otherwise just NAs#
function(vs, uncL = 0.0001, uncU = 0.99999) {#
  vs <- delete.unc(vs, uncL=uncL, uncU=uncU)#
tmp <- vs[!is.na(vs)]#
reg <- summary(lm(tmp ~ 1))$coef[1] # mean#
reg_sig <- summary(lm(tmp ~ 1))$coef[2] # sigma#
  new.mean <- truncate(rnorm(length(vs[is.na(vs)]), reg, reg_sig))#
  vs[is.na(vs)] <- new.mean#
  return(vs)}#
`impute.weights` <- # for use when turnout in districts is abnormally high or low (w = # of standard deviations from median)#
function(t1, t2, w = 2) {#
  t <- t1+t2#
  uncL <- (median(t, na.rm=T) -  (w * sd(t, na.rm=T)))#
  uncU <- (median(t, na.rm=T) + (w * sd(t, na.rm=T)))#
  t1 <- delete.unc(t, uncL=uncL, uncU=uncU)#
tmp <- t1[!is.na(t1)]#
reg <- summary(lm(tmp ~ 1))$coef[1] # mean#
reg_sig <- summary(lm(tmp ~ 1))$coef[2] # sigma#
  new.reg <- r(rnorm(length(t1[is.na(t1)]), reg, reg_sig), d=0)#
  t1[is.na(t1)] <- new.reg#
  return(t1)}#
`truncate` <-#
function(r1) {#
  below <- r1<=0#
  above <- r1>=1#
  between <- !(below|above)#
  (below*0.0001)+(r1*between)+0.9999*above#
}#
sim.election <- function(votes= NULL, center=house.2016.votes, incumbency=NULL, yr=2018, sims=1000, sigma=sigma) {#
  if (is.null(sims)) sims <- 1000#
      equal.vote <- mean(votes) - mean(center)#
      sims.year <- new.list(sims)#
    for (k in 1:sims)#
      {#
    sims.year[[k]] <- #
        rnorm(length(votes), votes - equal.vote, #
          sigma)#
      }#
  return(sims.year)#
  }#
#
r <- function(r, d=2) round(r, digits=d)#
# =================================================================#
# -- GERRYMANDER MEASURES -- GERRYMANDER MEASURES -- GERRYMANDER ME#
# =================================================================#
# ••• DELINATION ••••••••••••••••••••••••••••••••••••••••••••••••••#
`declination` <- # Warrington, Gregory S. 2018. “Quantifying Gerrymandering Using the Vote Distribution.” Election Law Journal 17(1): 39–57. www.liebertpub.com (Accessed February 22, 2019).#
  function(votes) {#
    abo = votes[votes > 0.5]   # districts won by party A#
    bel = votes[votes <= 0.5]  # districts won by party B#
  # declination is undefined if one party wins all seats.#
    if (length(bel) == 0 | length(abo) == 0) {#
      return(NaN)#
    }#
  # angle for party B#
    theta = atan((1-(2*mean(bel))) / (length(bel) / length(votes)))#
  # angle for party A#
    gamma = atan((2*mean(abo)-1) / (length(abo) / length(votes)))#
  # normalize from radians to values betwen -1 and 1#
  # A little extra precision just in case :)#
    return(-1 * (2.0*(gamma-theta)/3.1415926535))}#
#
`declin2` <- # Simplified, not transformed from: Katz, Jonathan N. et al. 2018. Theoretical Foundations and Empirical Evaluations of Partisan Fairness in District-Based Democracies *. https://gking.harvard.edu/files/psym_2.pdf (Accessed March 16, 2019).#
  function(vs) {#
    abo = vs[vs > 0.5]   # districts won by party A#
    bel = vs[vs <= 0.5]  # districts won by party B#
    (-1 * (mean(abo) - 0.5) / (sum(find.winner(abo))/length(vs))) - ((0.5 - mean(bel)) / (1 - sum(find.winner(abo))/length(vs)))#
  }#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••• MEAN/MEDIAN••••••••••••••••••••••••••••••••••••••••••••••••••#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
`meanmedian` <- # Best, Robin E., Shawn J. Donahue, Jonathan Krasno, Daniel B. Magleby, et al. 2018. “Considering the Prospects for Establishing a Packing Gerrymandering Standard.” Election Law Journal: Rules, Politics, and Policy 17(1): 1–20. http://www.liebertpub.com/doi/10.1089/elj.2016.0392 (Accessed July 24, 2018).#
  function(votes) median(votes) - mean(votes)#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# •••• EFFICIENCY GAP••••••••••••••••••••••••••••••••••••••••••••••#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
`eff_gap` <- # Stephanopoulos, Nicholas, and Eric Mcghee. 2014. “Partisan Gerrymandering and the Efficiency Gap.” University of Chicago Law School 82. http://ssrn.com/abstract=2457468.. (Accessed September 10, 2018).#
  function(D, R) {#
    total <- sum(D)+sum(R)#
    dem_wasted <- sum(ifelse(D>R, D[D>R] - R[D>R], D[D<R]))#
    rep_wasted <- sum(ifelse(D<R, R[D<R] - D[D<R], R[D>R]))#
      return(-1 * (dem_wasted - rep_wasted) / sum(total))}#
#
eg_TP <- function(votes) #
  {#
    y <- cbind.data.frame(votes, 1-votes)#
      return(eff_gap(y[1], y[2]))#
  }#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# •••• GERRY DISPLAY ••••••••••••••••••••••••••••••••••••••••••••••#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
  gerry <- function(x, toggle=TRUE)#
    {#
    Seats = paste0(" [", seats.print(x), "]")#
    SeatPER = percent(seats(x))#
    Votes = percent(mean(default.unc(x)))#
    Bias = r(seatsvotes(x)$bias)#
    EfficiencyGap = r(eg_TP(x))#
    MeanMedian = r(meanmedian(x))#
    Declination = r(declination(x))#
    a <- rbind.data.frame(#
      Seats, SeatPER, Votes, Bias, EfficiencyGap, MeanMedian, Declination)#
    rownames(a) <- c("Seats","Seat %","Votes","Bias","Efficiency Gap","Mean/Median","Declination")#
    colnames(a) <- "Summary"#
#
    if (toggle!=TRUE) { # TO RETURN UNFORMATTED MEASUREMENTS#
    SeatsT = NA#
    SeatPERT = r(seats(x))#
    VotesT = r(mean(default.unc(x)))#
    BiasT = r(seatsvotes(x)$bias)#
    EfficiencyGapT = r(eg_TP(x))#
    MeanMedianT = r(meanmedian(x))#
    DeclinationT = r(declination(x))#
      return(rbind.data.frame(#
      SeatsT, SeatPERT, VotesT, BiasT, EfficiencyGapT, MeanMedianT, DeclinationT))}#
    return(a)#
    }#
nintyfive <- function(x, percent=FALSE) {#
  if (percent==TRUE){ return(paste0("(", percent(r(quantile(x[!is.na(x)], 0.025),d=1)), ", ", percent(r(quantile(x[!is.na(x)], 0.975),d=1)), ")")) }#
  return(paste0("(", r(quantile(x[!is.na(x)], 0.025)), ", ", r(quantile(x[!is.na(x)], 0.975)), ")"))#
  }#
#
gtab <- function(x) {#
  p <- (paste0(x, ".sims.5050"))#
  p.tmp <- get(p)#
  s.tmp <- maps.sims.seats.5050[[x]]#
  v.tmp <- maps.sims.votes.5050[[x]]#
  x.bias <- get(paste0(p, ".bias"))#
  x.eg <- get(paste0(p, ".eg"))#
  x.mm <- get(paste0(p, ".meanmedian"))#
  x.declin <- get(paste0(p, ".declination"))#
    return(c(#
      r(mean(x.bias)), #
        nintyfive(x.bias), #
      r(mean(x.eg)), #
        nintyfive(x.eg), #
      r(mean(x.mm)), #
        nintyfive(x.mm),#
      r(mean(x.declin)), #
        nintyfive(x.declin)#
      ))#
    }#
#
ptab <- function(x) {#
  p <- (paste0(x, ".sims.5050"))#
  p.tmp <- get(p)#
  s.tmp <- maps.sims.seats.5050[[x]]#
  v.tmp <- maps.sims.votes.5050[[x]]#
    return(c(#
      paste0(r(sum(s.tmp*18)/(1000*18)*18), "R-", r(18-sum(s.tmp*18)/(1000*18)*18), "D"),#
      paste0("(", r(quantile(s.tmp, 0.025),d=1)*18, "R-", 18-r(quantile(s.tmp, 0.025),d=1)*18, "D, ", r(quantile(s.tmp, 0.975),d=1)*18, "R-", 18-r(quantile(s.tmp, 0.975),d=1)*18, "D)"),#
      paste0(median(s.tmp)*18, "R-", 18-median(s.tmp)*18, "D"),#
      percent(sum(1 * do.call(rbind, lapply(p.tmp, function(x) mean(find.winner(x)))) > 0.5) / 1000),#
      percent(sum(1 * do.call(rbind, lapply(p.tmp, function(x) mean(find.winner(x)))) < 0.5) / 1000),#
      percent(sum(1 * do.call(rbind, lapply(p.tmp, function(x) mean(find.winner(x)))) == 0.5) / 1000)#
      ))#
} #
#
 # •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••   #
`circle.new` <- #
  function(xorig, yorig, radius, add, ...){#
    x <- seq(-radius, radius, length.out = 1000)#
  # Euclidian distance to the origin#
  y <- sapply(x, function(z) sqrt(radius^2 - z^2))#
  if(add == TRUE){#
    line(xorig + c(x, rev(x)), c(yorig + y, yorig + rev(-y)),#
          type = "l", add=T, ...)#
   } else {#
   plot(xorig + c(x, rev(x)), c(yorig + y, yorig + rev(-y)),#
        type = "l",  #
    xlab="", #
    ylab="", #
    xaxt="n", #
    yaxt="n", #
    bty="n", ...)#
   }#
}#
#
`circle` <- #
function (x, y, radius, nv = 100, border = NULL, col = NA, lty = 1, #
    lwd = 1) {#
    xylim <- par("usr")#
    plotdim <- par("pin")#
    ymult <- getYmult()#
    angle.inc <- 2 * pi/nv#
    angles <- seq(0, 2 * pi - angle.inc, by = angle.inc)#
    if (length(col) < length(radius)) #
        col <- rep(col, length.out = length(radius))#
    for (circle in 1:length(radius)) {#
        xv <- cos(angles) * radius[circle] + x#
        yv <- sin(angles) * radius[circle] * ymult + y#
        polygon(xv, yv, border = border, col = col[circle], lty = lty, #
            lwd = lwd)#
    }#
    invisible(list(x = xv, y = yv))#
}#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# COMPACTNESS MEASURES#
#
POLSBYPOPPER <- function (x) r(mean((4 * 3.1415926535 * x$area) / (x$perimeter^2)), d = 3)#
REOCK <- function (x) r(mean(x$area/(x$smallestcircle^2 * 3.1415926535)), d = 3)#
poly.math <- function (x) {#
    compactness <- NULL#
  if (class(x)=="character") x <- get(x)#
      shapeFile <- x#
      mapObject <- fortify(shapeFile)#
      mapObject$id <- as.character(as.numeric(mapObject$id) + 1)#
      mapObject <- data.frame(mapObject, shapeFile@data[mapObject$id, ])#
      mapObject$piece <- as.character(mapObject$piece)#
      uniqueCDs <- sort(unique(as.numeric(mapObject$id)))#
      for(id in uniqueCDs)#
        {#
          cdShape <- mapObject[mapObject$id == id, ]#
          cdPoly <- SpatialPolygons(list(Polygons(lapply(split(cdShape[, c("long", "lat")], cdShape$piece), Polygon), ID = "b")))#
          owinObject <- try(as(cdPoly, "owin"))#
          compactness[[id]] <-  data.frame(area=area.owin(owinObject), perimeter=perimeter(owinObject), smallestcircle=boundingradius(owinObject))#
        }#
        x <- do.call("rbind", compactness)#
        cat(#
          "\n REOCK:        ", REOCK(x), "\n",#
          "POLSBY-POPPER:", POLSBYPOPPER(x), "\n \n"#
          )#
        return(x)#
  }
# ▀▀█▀▀ █▀▀█ █▀▀▄ █░░ █▀▀ █▀▀#
# ░░█░░ █▄▄█ █▀▀▄ █░░ █▀▀ ▀▀█#
# ░░▀░░ ▀░░▀ ▀▀▀░ ▀▀▀ ▀▀▀ ▀▀▀#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
cat(#
    "\n#
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
        CREATING TABLES . . . . . . . . . . . . . . . . . . . . .#
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n")#
sink("/dev/null")#
# races <- c("cong2016", "pres16", "ussen16", "atg16", "aud16", "trea16", "comp2016")#
statewide.contests.2016 <- c("Congress", "Presidential", "US Senate", "PA Attorneys General", "PA Auditor", "PA Treasurer", "Composite")#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# County Spliits#
county_splits <- c(41, 19, 19, 17)#
# COMPACTNESS#
geom_names <- paste0(plans, ".geom")#
#
reock.plans <- numeric()#
    for (i in 1:length(geom_names)) {#
        reock.plans <- rbind(reock.plans, REOCK(get(geom_names[i])))#
        }#
polsby.plans <- numeric()#
    for (i in 1:length(geom_names)) {#
        polsby.plans <- rbind(polsby.plans, POLSBYPOPPER(get(geom_names[i])))#
        }#
#
tab_plan_sum <- cbind.data.frame(#
    Plan = plan_names,#
    CountySplits = county_splits, #
    Reock = reock.plans, #
    PolsbyPopper = polsby.plans#
    # Pres2016 = c(seats.print(enacted.pres), seats.print(court.pres), seats.print(joint.pres), seats.print(govwolf.pres)),#
    # Comp2016 = c(seats.print(enacted.comp), seats.print(court.comp), seats.print(joint.comp), seats.print(govwolf.comp))#
    )#
tab_plan_sum#
plan_summary.caption = "County Splits and Compactness Scores of the Plans"#
plan_summary.label = "tab:summaries"#
plan_summary.footnote = "County splits include all the pieces in which a county is split, not just the total number of counties that have been split. (The latter number is the one most often reported in both court documents and in the media, but we regard the measure we report as both more precise and more informative.)"#
tab_plan_summary <- #
    stargazer(tab_plan_sum,#
        style = "apsr", #
        header = FALSE,#
        summary = FALSE,#
        model.numbers = FALSE,#
        initial.zero = TRUE,#
        digits = 3,#
        column.sep.width = "0pt",#
        rownames = FALSE,#
        multicolumn = TRUE,#
        label = plan_summary.label,#
        title = plan_summary.caption,#
        covariate.labels = ,#
        notes = plan_summary.footnote #
        )#
tab_plan_summary <- tab_plan_summary[c(-6, -7, -13, -14, -15, -16)]#
# tab_plan_summary <- append(tab_plan_summary, #
#   "  &   &  &  & \\textbf{Projected} & \\textbf{Projected}  \\\\", #
#   after = 5)#
# tab_plan_summary <- append(tab_plan_summary,#
#   "  &  \\textbf{County}  &  \\textbf{Polsby}   &   &  \\textbf{2016 using}  &  \\textbf{five state-wide} \\\\",#
#   after = 6)#
# tab_plan_summary <- append(tab_plan_summary,#
#   "  \\textbf{Plan}  &  \\textbf{Splits} &  \\textbf{Popper}  &  \\textbf{Reock}  &  \\textbf{Presidential Results}  &  \\textbf{elections in 2016} \\\\",#
#   after = 7)#
#
tab_plan_summary <- append(tab_plan_summary,#
    "  &  \\textbf{County}  &  \\textbf{Polsby}   &   \\\\",#
    after = 5)#
tab_plan_summary <- append(tab_plan_summary,#
    "  \\textbf{Plan}  &  \\textbf{Splits} &  \\textbf{Popper}  &  \\textbf{Reock}  \\\\",#
    after = 6)#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# =================================================================#
# Comparing Pennsylvania Congressional Results with State-wide Elections (2016) %#
# =================================================================#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# SUMMARY OF ELECTIONS#
congsum.caption = "US House Election Summaries (PA 2012-2016)"#
congsum.label = "tab:congsum"#
congsum.footnote = "Uncontested races are imputed with 0.25 and 0.75 for the respective winners. All votes are calculated from the Republican perspective of the two-party vote. We've adjusted all gerrymandering measures such that negative numbers indicate bias in favor of the Democrats."#
congsum.tmp <- cbind.data.frame(#
    # PA2004 = gerry(default.unc(house.2004.votes)),#
    # PA2006 = gerry(default.unc(house.2006.votes)),#
    # PA2008 = gerry(default.unc(house.2008.votes)),#
    # PA2010 = gerry(default.unc(house.2010.votes)),#
    PA2012 = gerry(default.unc(house.2012.votes)), #
    PA2014 = gerry(default.unc(house.2014.votes)), #
    PA2016 = gerry(default.unc(house.2016.votes)),#
    # PA2018 = gerry(default.unc(house.2018.votes)),#
    PA2012_2016_AVE = rowMeans(cbind(   #
    gerry(default.unc(house.2012.votes), toggle=F),#
    gerry(default.unc(house.2014.votes), toggle=F),#
    gerry(default.unc(house.2016.votes), toggle=F)))#
  )#
congsum.tmp #
colnames(congsum.tmp) <- c(seq(2012,2016,2),"AVE")#
congsum.tmp.tex <- stargazer(congsum.tmp,#
    style = "apsr", #
    summary = FALSE,#
    header = FALSE,#
    column.sep.width = "-5pt",#
    multicolumn = TRUE,#
    label = congsum.label,#
    title = congsum.caption,#
    notes = congsum.footnote)#
congsum.tmp.tex <- congsum.tmp.tex[c(-6, -16, -17, -18, -19)]#
congsum.tmp.tex[8] <- "Seats &  [13R-5D] &  [13R-5D] &  [13R-5D] & [13R-5D] \\\\ "#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
dist_summary <- #
    rbind(#
      cbind.data.frame(#
        District = seq(1,18,1),#
        sapply(composite(pa.redist.dta, "enacted"), percent)),#
        c(#
          "Statewide",#
          sapply(colMeans(composite(pa.redist.dta, "enacted")), percent)#
        )#
    )#
#
district_summary.caption = "2016 District-level Summaries for 2011 Enacted Plan"#
district_summary.label = "tab:districtvotes"#
district_summary.footnote = "Uncontested races and those with only negligible competition will be imputed with 0.25 and 0.75 for the respective winners. All votes are calculated from the Republican perspective of the two-party vote. Composite does NOT include the Congressional elections. The statewide average is the unweighted mean of districts."#
#
district_summary <- stargazer(dist_summary,#
    style = "apsr", #
    summary = FALSE,#
    header = FALSE,#
    column.sep.width = "-5pt",#
    multicolumn = TRUE,#
    rownames = FALSE,#
    label = district_summary.label,#
    title = district_summary.caption,#
    notes = "REPLACE WITH NOTES" )#
district_summary <- district_summary[c(-6, -28, -29, -30, -31)]#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
# =================================================================#
# Measures of Gerrymandering for the Eight Considered Plans#
# =================================================================#
#
tab_prop.gen <- #
    cbind.data.frame(#
        ptab("enacted"),#
        ptab("joint"),#
        ptab("govwolf"),#
        ptab("court")#
        )#
    colnames(tab_prop.gen) <- c(plan_names)#
    rownames(tab_prop.gen) <- c(#
        "Mean Seat Share",#
        "SDS", #
        "Median Seat Share",#
        "Probability Republican Majority",#
        "Probability Democratic Majority",#
        "Probability Tied Delegation")#
#
prop.caption = "Probabilistic Projections of Partisan Outcomes for Four Plans"#
prop.label = "tab:prob"#
prop.footnote = "Using a Composite of Five Statewide Elections (adjusted to a 50\\% Vote Share)"#
#
tab_prop.tex <- stargazer(tab_prop.gen,#
    style = "apsr", #
    summary=F,#
    column.sep.width = "-5pt", #
    float = T, #
    header = FALSE,#
    multicolumn = TRUE, #
    title= prop.caption, #
    label= prop.label,#
    notes = prop.footnote)#
tab_prop <- tab_prop.tex[c(-6, -15, -16, -17, -18)]#
#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
gerry.table.gen <- #
    cbind.data.frame(#
        gtab("enacted"),#
        gtab("joint"),#
        gtab("govwolf"),#
        gtab("court")#
        )#
#
    colnames(gerry.table.gen) <- c(plan_names)#
    rownames(gerry.table.gen) <- c(#
        "Partisan Bias", #
        "SD1",#
        "Efficiency Gap",#
        "SD2",#
        "Mean/Median",#
        "SD3",#
        "Declination",#
        "SD4")#
#
gerry.caption = "Measures of Gerrymandering for the Four Considered Plans"#
gerry.label = "tab:gerry"#
gerry.footnote = "Measures are averages of 1,000 simulations for each map using the 2016 composite. Brackets numbers are the 95\\% range."#
#
tab_gerry.tex <- stargazer(gerry.table.gen,#
    style = "apsr", #
    summary=F,#
    column.sep.width = "-5pt", #
    float = T, #
    header = FALSE,#
    multicolumn = TRUE, #
    title= gerry.caption, #
    label= gerry.label,#
    notes = gerry.footnote)#
tab_gerry <- tab_gerry.tex[c(-6, -17, -18, -19, -20)]#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
# =================================================================#
# Information about Twelve States with Constitutional Provisions similar to Pennsylvania#
# =================================================================#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# latex <- function(x) cat(paste(x, collapse="\n"), "\n")#
# states_compare.caption = "Information about Twelve States with Constitutional Provisions similar to Pennsylvania"#
# states_compare.label = "tab:states_compare"#
# states_compare.footnote = "Seats and votes are based on the 2016 five-election projection (to deal with the existence of non-contested congressional districts). Percentages are of the of district level results. This difference is why the percentages reported in columns 6 and 8 are not identical. Data from DailyKos, All about Redistricting, and Ballotpedia web sites.States with fewer than 9 districts do not have efficiency gap or median values reported because of the potential unreliability of those calculations given the small number of districts involved."#
#
# tab_states_compare <- #
#   paste("#
#       \\begin{table}#
#       \\caption{", states_compare.caption, "}#
#       \\label{", states_compare.label, "}#
#       \\begin{tabular}{#
#       >{\\centering\\arraybackslash}#
#       M{0.1\\linewidth}|#
#       M{.025\\linewidth}|#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.3\\linewidth}}#
#       \\textbf{State} & \\textbf{\\# CDs} & \\textbf{Unified Control (2011)} & \\textbf{Unified Control (2016)} & \\textbf{Seats (2016)} & \\textbf{Votes (2016)} & \\textbf{Mean District Vote Share (Dem)} & \\textbf{Median District Vote Share (Dem)} & \\textbf{Efficiency Gap} & \\textbf{Who does districting} \\\\#
#        \\hline#
#       Arizona & 9 & $\\surd$ (R) & $\\surd$ (R) & 44.4\\% & 48.1\\% & 50.4\\% & 49.4\\% & 0.08 & Independent commission \\\\#
#       Arkansas & 4 & $\\surd$ (D) & $\\surd$ (R) & 0\\% & 35.7\\% & 35.5\\% &  &  & state legislature \\\\#
#       Delaware & 1 & $\\surd$ (D) & $\\surd$ (D) & 100\\% & 55.9\\% & 56\\% &  &  & NA \\\\#
#       Illinois & 18 & $\\surd$ (D) &  & 61.1\\% & 59.0\\% & 59.6\\% & 59.8\\% & 0.08 & state legislature \\\\#
#       Indiana & 9 & $\\surd$ (R) & $\\surd$ (R) & 22.2\\% & 39.9\\% & 40.1\\% & 35.9\\% & 0.09 & state legislature \\\\#
#       Kentucky & 6 &  & $\\surd$ (R) & 16.7\\% & 34.3\\% & 33.8\\% &  &  & state legislature \\\\#
#       Oklahoma & 5 & $\\surd$ (R) & $\\surd$ (R) & 0\\% & 30.7\\% & 30.7\\% &  &  & state legislature \\\\#
#       Oregon & 5 &  & $\\surd$ (D) & 80\\% & 56.2\\% & 56\\% &  &  & state legislature \\\\#
#       South Dakota & 1 & $\\surd$ (R) & $\\surd$ (R) & 0\\% & 34.0\\% & 34\\% &  &  & NA \\\\#
#       Tennessee & 9 & $\\surd$ (R) & $\\surd$ (R) & 22.2\\% & 36.4\\% & 37.4\\% & 31.3\\% & 0.03 & state legislature \\\\#
#       Washington & 10 & $\\surd$ (D) & $\\surd$ (D) & 70\\% & 58.8\\% & 56\\% & 52.3\\% & -0.05 & 5-member independent commission \\\\#
#       Wyoming & 1 & $\\surd$ (R) & $\\surd$ (R) & 0\\% & 24.3\\% & 24.3\\% &  &  & NA ")#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
# TWO-PARTY VOTE SHARES, ACTUAL (CONGRESSIONAL)#
# tab_summary_stats <- stargazer(#
#   congress.PA.2008.2018,#
#   title="Republican Two-Party Vote/Seat Share, (PA Congressional Elections 2008-2018)",#
#   style = "apsr", #
#   header = FALSE,#
#   column.sep.width = "-5pt",#
#   multicolumn = TRUE,#
#   label = "tab:twoparty_actuals" )#
# tab_summary_stats <- tab_summary_stats[c(-6, -11)]#
#
#  Table(tab_summary_stats,#
#   caption="Two-Party Vote/Seat Share, (PA Congressional Elections 2008-2018)",#
#   label="ab:twoparty_actuals",#
#   footnote="Votes are the two-party unweighted average of PA Congressional Districts by year (uncontested elections imputed).")#
#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# AVERAGE VOTE BY DISTRICT#
means_races <- numeric()#
  base.form <- formula(. ~ 1)#
  cong.form <- formula(default.unc(enacted.elections$CONG) ~ + pahouse.2016$INC)#
for (k in colnames(enacted.elections))#
{#
  r.tmp <- composite(pa.redist.dta, "enacted")[,k]#
    reg_races <- summary(lm(update(base.form, as.formula(default.unc(r.tmp) ~ .))))#
    means_races[k] <- coef(reg_races)[1]#
}#
#
  cat(#
    "2016 Average Vote Share by State-level Contest \n"#
    )#
    print(cbind.data.frame(Race = statewide.contests.2016, Mean = percent(means_races)))#
    cat(paste("", collapse = "\n"), "\n")#
# # Regression of Race on Congressional Results#
    reg_cong_pres <- lm(update(cong.form, as.formula(. ~ . + default.unc(enacted.elections$PRES))))#
    reg_cong_ussen <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$USSEN))))#
    reg_cong_atg <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$ATTGEN))))#
    reg_cong_aud <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$AUDITOR))))#
    reg_cong_trea <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$TREASURER))))#
    reg_cong_comp <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$COMPOSITE))))#
    reg_cong_all <- lm(update(cong.form, #
      as.formula(. ~  . +  #
        default.unc(enacted.elections$PRES) + #
        default.unc(enacted.elections$USSEN) +#
        default.unc(enacted.elections$ATTGEN) +#
        default.unc(enacted.elections$AUDITOR) +#
        default.unc(enacted.elections$TREASURER))#
    ))#
#
congress_predict.caption = "Comparing Pennsylvania Congressional Results with State-wide Elections (2016)"#
congress_predict.label = "tab:tab_congress_predict"#
congress_predict.footnote = "$^{*}$p $<$ 0.05; $^{**}$p $<$ .01; $^{***}$p $<$ 0.001 \\\\ Uncontested (or non-competitive) elections replaced with 0.25 \\& 0.75 vote shares. Regressions are unweighted, ie, all districts are assumed to have identical turnout. This is the usual way political scientist measure aggregate congressional vote \\cite{GelmanKing1994_unifiedAJPS}. \\\\"#
#
tab_congress_predict <- stargazer(#
        reg_cong_pres, #
         reg_cong_ussen, #
         reg_cong_atg, #
         reg_cong_aud, #
         reg_cong_trea, #
         reg_cong_comp,#
         reg_cong_all,#
star.cutoffs = c(0.05,0.01, 0.001),#
style = "apsr", #
header = FALSE,#
model.numbers = FALSE,#
initial.zero = TRUE,#
digits = 2,#
column.sep.width = "0pt",#
multicolumn = TRUE,#
omit.stat = c("ll", "F", "ser"),#
dep.var.labels = "Actual Congressional Results (2016)",#
covariate.labels = c("Incumbency Advantage","Presidential", "US Senate", "PA Attorneys General", "PA Auditor", "PA Treasurer", "Composite"),#
label = congress_predict.label,#
title = congress_predict.caption,#
notes = congress_predict.footnote#
    )#
tab_congress_predict <- tab_congress_predict[c(-6, -26, -28, -29, -30, -31, -32)]#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
sink()#
Table(tab_plan_summary,#
    path = "Tables/_tab_summaries.tex",#
    caption = plan_summary.caption,#
    label = plan_summary.label,#
    footnote = plan_summary.footnote)#
#
Table(congsum.tmp.tex,#
    path = "Tables/_tab_congsum.tex",#
    caption = congsum.caption,#
    label = congsum.label,#
    footnote = congsum.footnote)#
#
Table(tab_gerry, #
    path = "Tables/_tab_gerry.tex", #
    caption = gerry.caption,#
    label = gerry.label, #
    footnote = gerry.footnote)#
#
Table(tab_prop,#
    path = "Tables/_tab_prob.tex",#
    caption = prop.caption,#
    label = prop.label, #
    footnote = prop.footnote,#
    landscape = TRUE)#
#
Table(district_summary,#
    caption = district_summary.caption,#
    label = district_summary.label,#
    footnote = district_summary.footnote#
    )#
#
Table(tab_congress_predict,#
    caption = congress_predict.caption,#
    label = congress_predict.label,#
    footnote = congress_predict.footnote)#
cat("#
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n#
    ")
gerry.table.gen <- #
    cbind.data.frame(#
        gtab("enacted"),#
        gtab("joint"),#
        gtab("govwolf"),#
        gtab("court")#
        )#
#
    colnames(gerry.table.gen) <- c(plan_names)#
    rownames(gerry.table.gen) <- c(#
        "Partisan Bias", #
        "SD1",#
        "Efficiency Gap",#
        "SD2",#
        "Mean/Median",#
        "SD3",#
        "Declination",#
        "SD4")#
#
gerry.caption = "Measures of Gerrymandering for the Four Considered Plans"#
gerry.label = "tab:gerry"#
gerry.footnote = "Measures are averages of 1,000 simulations for each map using the 2016 composite. Brackets numbers are the 95\\% range."#
#
tab_gerry.tex <- stargazer(gerry.table.gen,#
    style = "apsr", #
    summary=F,#
    column.sep.width = "-5pt", #
    float = T, #
    header = FALSE,#
    multicolumn = TRUE, #
    title= gerry.caption, #
    label= gerry.label,#
    notes = gerry.footnote)#
tab_gerry <- tab_gerry.tex[c(-6, -17, -18, -19, -20)]#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••
Table(tab_gerry, #
    path = "Tables/_tab_gerry.tex", #
    caption = gerry.caption,#
    label = gerry.label, #
    footnote = gerry.footnote)
`eff_gap` <- # Stephanopoulos, Nicholas, and Eric Mcghee. 2014. “Partisan Gerrymandering and the Efficiency Gap.” University of Chicago Law School 82. http://ssrn.com/abstract=2457468.. (Accessed September 10, 2018).#
  function(D, R) {#
    total <- sum(D)+sum(R)#
    dem_wasted <- sum(ifelse(D>R, D[D>R] - R[D>R], D[D<R]))#
    rep_wasted <- sum(ifelse(D<R, R[D<R] - D[D<R], R[D>R]))#
      return(-1 * (dem_wasted - rep_wasted) / sum(total))}#
#
eg_TP <- function(votes) #
  {#
    y <- cbind.data.frame(votes, 1-votes)#
      return(eff_gap(y[1], y[2]))#
  }
# ▀▀█▀▀ █▀▀█ █▀▀▄ █░░ █▀▀ █▀▀#
# ░░█░░ █▄▄█ █▀▀▄ █░░ █▀▀ ▀▀█#
# ░░▀░░ ▀░░▀ ▀▀▀░ ▀▀▀ ▀▀▀ ▀▀▀#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
cat(#
    "\n#
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
        CREATING TABLES . . . . . . . . . . . . . . . . . . . . .#
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n")#
sink("/dev/null")#
# races <- c("cong2016", "pres16", "ussen16", "atg16", "aud16", "trea16", "comp2016")#
statewide.contests.2016 <- c("Congress", "Presidential", "US Senate", "PA Attorneys General", "PA Auditor", "PA Treasurer", "Composite")#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# County Spliits#
county_splits <- c(41, 19, 19, 17)#
# COMPACTNESS#
geom_names <- paste0(plans, ".geom")#
#
reock.plans <- numeric()#
    for (i in 1:length(geom_names)) {#
        reock.plans <- rbind(reock.plans, REOCK(get(geom_names[i])))#
        }#
polsby.plans <- numeric()#
    for (i in 1:length(geom_names)) {#
        polsby.plans <- rbind(polsby.plans, POLSBYPOPPER(get(geom_names[i])))#
        }#
#
tab_plan_sum <- cbind.data.frame(#
    Plan = plan_names,#
    CountySplits = county_splits, #
    Reock = reock.plans, #
    PolsbyPopper = polsby.plans#
    # Pres2016 = c(seats.print(enacted.pres), seats.print(court.pres), seats.print(joint.pres), seats.print(govwolf.pres)),#
    # Comp2016 = c(seats.print(enacted.comp), seats.print(court.comp), seats.print(joint.comp), seats.print(govwolf.comp))#
    )#
tab_plan_sum#
plan_summary.caption = "County Splits and Compactness Scores of the Plans"#
plan_summary.label = "tab:summaries"#
plan_summary.footnote = "County splits include all the pieces in which a county is split, not just the total number of counties that have been split. (The latter number is the one most often reported in both court documents and in the media, but we regard the measure we report as both more precise and more informative.)"#
tab_plan_summary <- #
    stargazer(tab_plan_sum,#
        style = "apsr", #
        header = FALSE,#
        summary = FALSE,#
        model.numbers = FALSE,#
        initial.zero = TRUE,#
        digits = 3,#
        column.sep.width = "0pt",#
        rownames = FALSE,#
        multicolumn = TRUE,#
        label = plan_summary.label,#
        title = plan_summary.caption,#
        covariate.labels = ,#
        notes = plan_summary.footnote #
        )#
tab_plan_summary <- tab_plan_summary[c(-6, -7, -13, -14, -15, -16)]#
# tab_plan_summary <- append(tab_plan_summary, #
#   "  &   &  &  & \\textbf{Projected} & \\textbf{Projected}  \\\\", #
#   after = 5)#
# tab_plan_summary <- append(tab_plan_summary,#
#   "  &  \\textbf{County}  &  \\textbf{Polsby}   &   &  \\textbf{2016 using}  &  \\textbf{five state-wide} \\\\",#
#   after = 6)#
# tab_plan_summary <- append(tab_plan_summary,#
#   "  \\textbf{Plan}  &  \\textbf{Splits} &  \\textbf{Popper}  &  \\textbf{Reock}  &  \\textbf{Presidential Results}  &  \\textbf{elections in 2016} \\\\",#
#   after = 7)#
#
tab_plan_summary <- append(tab_plan_summary,#
    "  &  \\textbf{County}  &  \\textbf{Polsby}   &   \\\\",#
    after = 5)#
tab_plan_summary <- append(tab_plan_summary,#
    "  \\textbf{Plan}  &  \\textbf{Splits} &  \\textbf{Popper}  &  \\textbf{Reock}  \\\\",#
    after = 6)#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# =================================================================#
# Comparing Pennsylvania Congressional Results with State-wide Elections (2016) %#
# =================================================================#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# SUMMARY OF ELECTIONS#
congsum.caption = "US House Election Summaries (PA 2012-2016)"#
congsum.label = "tab:congsum"#
congsum.footnote = "Uncontested races are imputed with 0.25 and 0.75 for the respective winners. All votes are calculated from the Republican perspective of the two-party vote. We've adjusted all gerrymandering measures such that negative numbers indicate bias in favor of the Democrats."#
congsum.tmp <- cbind.data.frame(#
    # PA2004 = gerry(default.unc(house.2004.votes)),#
    # PA2006 = gerry(default.unc(house.2006.votes)),#
    # PA2008 = gerry(default.unc(house.2008.votes)),#
    # PA2010 = gerry(default.unc(house.2010.votes)),#
    PA2012 = gerry(default.unc(house.2012.votes)), #
    PA2014 = gerry(default.unc(house.2014.votes)), #
    PA2016 = gerry(default.unc(house.2016.votes)),#
    # PA2018 = gerry(default.unc(house.2018.votes)),#
    PA2012_2016_AVE = rowMeans(cbind(   #
    gerry(default.unc(house.2012.votes), toggle=F),#
    gerry(default.unc(house.2014.votes), toggle=F),#
    gerry(default.unc(house.2016.votes), toggle=F)))#
  )#
congsum.tmp #
colnames(congsum.tmp) <- c(seq(2012,2016,2),"AVE")#
congsum.tmp.tex <- stargazer(congsum.tmp,#
    style = "apsr", #
    summary = FALSE,#
    header = FALSE,#
    column.sep.width = "-5pt",#
    multicolumn = TRUE,#
    label = congsum.label,#
    title = congsum.caption,#
    notes = congsum.footnote)#
congsum.tmp.tex <- congsum.tmp.tex[c(-6, -16, -17, -18, -19)]#
congsum.tmp.tex[8] <- "Seats &  [13R-5D] &  [13R-5D] &  [13R-5D] & [13R-5D] \\\\ "#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
dist_summary <- #
    rbind(#
      cbind.data.frame(#
        District = seq(1,18,1),#
        sapply(composite(pa.redist.dta, "enacted"), percent)),#
        c(#
          "Statewide",#
          sapply(colMeans(composite(pa.redist.dta, "enacted")), percent)#
        )#
    )#
#
district_summary.caption = "2016 District-level Summaries for 2011 Enacted Plan"#
district_summary.label = "tab:districtvotes"#
district_summary.footnote = "Uncontested races and those with only negligible competition will be imputed with 0.25 and 0.75 for the respective winners. All votes are calculated from the Republican perspective of the two-party vote. Composite does NOT include the Congressional elections. The statewide average is the unweighted mean of districts."#
#
district_summary <- stargazer(dist_summary,#
    style = "apsr", #
    summary = FALSE,#
    header = FALSE,#
    column.sep.width = "-5pt",#
    multicolumn = TRUE,#
    rownames = FALSE,#
    label = district_summary.label,#
    title = district_summary.caption,#
    notes = "REPLACE WITH NOTES" )#
district_summary <- district_summary[c(-6, -28, -29, -30, -31)]#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
# =================================================================#
# Measures of Gerrymandering for the Eight Considered Plans#
# =================================================================#
#
tab_prop.gen <- #
    cbind.data.frame(#
        ptab("enacted"),#
        ptab("joint"),#
        ptab("govwolf"),#
        ptab("court")#
        )#
    colnames(tab_prop.gen) <- c(plan_names)#
    rownames(tab_prop.gen) <- c(#
        "Mean Seat Share",#
        "SDS", #
        "Median Seat Share",#
        "Probability Republican Majority",#
        "Probability Democratic Majority",#
        "Probability Tied Delegation")#
#
prop.caption = "Probabilistic Projections of Partisan Outcomes for Four Plans"#
prop.label = "tab:prob"#
prop.footnote = "Using a Composite of Five Statewide Elections (adjusted to a 50\\% Vote Share)"#
#
tab_prop.tex <- stargazer(tab_prop.gen,#
    style = "apsr", #
    summary=F,#
    column.sep.width = "-5pt", #
    float = T, #
    header = FALSE,#
    multicolumn = TRUE, #
    title= prop.caption, #
    label= prop.label,#
    notes = prop.footnote)#
tab_prop <- tab_prop.tex[c(-6, -15, -16, -17, -18)]#
#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
gerry.table.gen <- #
    cbind.data.frame(#
        gtab("enacted"),#
        gtab("joint"),#
        gtab("govwolf"),#
        gtab("court")#
        )#
#
    colnames(gerry.table.gen) <- c(plan_names)#
    rownames(gerry.table.gen) <- c(#
        "Partisan Bias", #
        "SD1",#
        "Efficiency Gap",#
        "SD2",#
        "Mean/Median",#
        "SD3",#
        "Declination",#
        "SD4")#
#
gerry.caption = "Measures of Gerrymandering for the Four Considered Plans"#
gerry.label = "tab:gerry"#
gerry.footnote = "Measures are averages of 1,000 simulations for each map using the 2016 composite. Brackets numbers are the 95\\% range."#
#
tab_gerry.tex <- stargazer(gerry.table.gen,#
    style = "apsr", #
    summary=F,#
    column.sep.width = "-5pt", #
    float = T, #
    header = FALSE,#
    multicolumn = TRUE, #
    title= gerry.caption, #
    label= gerry.label,#
    notes = gerry.footnote)#
tab_gerry <- tab_gerry.tex[c(-6, -17, -18, -19, -20)]#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
# =================================================================#
# Information about Twelve States with Constitutional Provisions similar to Pennsylvania#
# =================================================================#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# latex <- function(x) cat(paste(x, collapse="\n"), "\n")#
# states_compare.caption = "Information about Twelve States with Constitutional Provisions similar to Pennsylvania"#
# states_compare.label = "tab:states_compare"#
# states_compare.footnote = "Seats and votes are based on the 2016 five-election projection (to deal with the existence of non-contested congressional districts). Percentages are of the of district level results. This difference is why the percentages reported in columns 6 and 8 are not identical. Data from DailyKos, All about Redistricting, and Ballotpedia web sites.States with fewer than 9 districts do not have efficiency gap or median values reported because of the potential unreliability of those calculations given the small number of districts involved."#
#
# tab_states_compare <- #
#   paste("#
#       \\begin{table}#
#       \\caption{", states_compare.caption, "}#
#       \\label{", states_compare.label, "}#
#       \\begin{tabular}{#
#       >{\\centering\\arraybackslash}#
#       M{0.1\\linewidth}|#
#       M{.025\\linewidth}|#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.3\\linewidth}}#
#       \\textbf{State} & \\textbf{\\# CDs} & \\textbf{Unified Control (2011)} & \\textbf{Unified Control (2016)} & \\textbf{Seats (2016)} & \\textbf{Votes (2016)} & \\textbf{Mean District Vote Share (Dem)} & \\textbf{Median District Vote Share (Dem)} & \\textbf{Efficiency Gap} & \\textbf{Who does districting} \\\\#
#        \\hline#
#       Arizona & 9 & $\\surd$ (R) & $\\surd$ (R) & 44.4\\% & 48.1\\% & 50.4\\% & 49.4\\% & 0.08 & Independent commission \\\\#
#       Arkansas & 4 & $\\surd$ (D) & $\\surd$ (R) & 0\\% & 35.7\\% & 35.5\\% &  &  & state legislature \\\\#
#       Delaware & 1 & $\\surd$ (D) & $\\surd$ (D) & 100\\% & 55.9\\% & 56\\% &  &  & NA \\\\#
#       Illinois & 18 & $\\surd$ (D) &  & 61.1\\% & 59.0\\% & 59.6\\% & 59.8\\% & 0.08 & state legislature \\\\#
#       Indiana & 9 & $\\surd$ (R) & $\\surd$ (R) & 22.2\\% & 39.9\\% & 40.1\\% & 35.9\\% & 0.09 & state legislature \\\\#
#       Kentucky & 6 &  & $\\surd$ (R) & 16.7\\% & 34.3\\% & 33.8\\% &  &  & state legislature \\\\#
#       Oklahoma & 5 & $\\surd$ (R) & $\\surd$ (R) & 0\\% & 30.7\\% & 30.7\\% &  &  & state legislature \\\\#
#       Oregon & 5 &  & $\\surd$ (D) & 80\\% & 56.2\\% & 56\\% &  &  & state legislature \\\\#
#       South Dakota & 1 & $\\surd$ (R) & $\\surd$ (R) & 0\\% & 34.0\\% & 34\\% &  &  & NA \\\\#
#       Tennessee & 9 & $\\surd$ (R) & $\\surd$ (R) & 22.2\\% & 36.4\\% & 37.4\\% & 31.3\\% & 0.03 & state legislature \\\\#
#       Washington & 10 & $\\surd$ (D) & $\\surd$ (D) & 70\\% & 58.8\\% & 56\\% & 52.3\\% & -0.05 & 5-member independent commission \\\\#
#       Wyoming & 1 & $\\surd$ (R) & $\\surd$ (R) & 0\\% & 24.3\\% & 24.3\\% &  &  & NA ")#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
# TWO-PARTY VOTE SHARES, ACTUAL (CONGRESSIONAL)#
# tab_summary_stats <- stargazer(#
#   congress.PA.2008.2018,#
#   title="Republican Two-Party Vote/Seat Share, (PA Congressional Elections 2008-2018)",#
#   style = "apsr", #
#   header = FALSE,#
#   column.sep.width = "-5pt",#
#   multicolumn = TRUE,#
#   label = "tab:twoparty_actuals" )#
# tab_summary_stats <- tab_summary_stats[c(-6, -11)]#
#
#  Table(tab_summary_stats,#
#   caption="Two-Party Vote/Seat Share, (PA Congressional Elections 2008-2018)",#
#   label="ab:twoparty_actuals",#
#   footnote="Votes are the two-party unweighted average of PA Congressional Districts by year (uncontested elections imputed).")#
#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# AVERAGE VOTE BY DISTRICT#
means_races <- numeric()#
  base.form <- formula(. ~ 1)#
  cong.form <- formula(default.unc(enacted.elections$CONG) ~ + pahouse.2016$INC)#
for (k in colnames(enacted.elections))#
{#
  r.tmp <- composite(pa.redist.dta, "enacted")[,k]#
    reg_races <- summary(lm(update(base.form, as.formula(default.unc(r.tmp) ~ .))))#
    means_races[k] <- coef(reg_races)[1]#
}#
#
  cat(#
    "2016 Average Vote Share by State-level Contest \n"#
    )#
    print(cbind.data.frame(Race = statewide.contests.2016, Mean = percent(means_races)))#
    cat(paste("", collapse = "\n"), "\n")#
# # Regression of Race on Congressional Results#
    reg_cong_pres <- lm(update(cong.form, as.formula(. ~ . + default.unc(enacted.elections$PRES))))#
    reg_cong_ussen <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$USSEN))))#
    reg_cong_atg <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$ATTGEN))))#
    reg_cong_aud <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$AUDITOR))))#
    reg_cong_trea <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$TREASURER))))#
    reg_cong_comp <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$COMPOSITE))))#
    reg_cong_all <- lm(update(cong.form, #
      as.formula(. ~  . +  #
        default.unc(enacted.elections$PRES) + #
        default.unc(enacted.elections$USSEN) +#
        default.unc(enacted.elections$ATTGEN) +#
        default.unc(enacted.elections$AUDITOR) +#
        default.unc(enacted.elections$TREASURER))#
    ))#
#
congress_predict.caption = "Comparing Pennsylvania Congressional Results with State-wide Elections (2016)"#
congress_predict.label = "tab:tab_congress_predict"#
congress_predict.footnote = "$^{*}$p $<$ 0.05; $^{**}$p $<$ .01; $^{***}$p $<$ 0.001 \\\\ Uncontested (or non-competitive) elections replaced with 0.25 \\& 0.75 vote shares. Regressions are unweighted, ie, all districts are assumed to have identical turnout. This is the usual way political scientist measure aggregate congressional vote \\cite{GelmanKing1994_unifiedAJPS}. \\\\"#
#
tab_congress_predict <- stargazer(#
        reg_cong_pres, #
         reg_cong_ussen, #
         reg_cong_atg, #
         reg_cong_aud, #
         reg_cong_trea, #
         reg_cong_comp,#
         reg_cong_all,#
star.cutoffs = c(0.05,0.01, 0.001),#
style = "apsr", #
header = FALSE,#
model.numbers = FALSE,#
initial.zero = TRUE,#
digits = 2,#
column.sep.width = "0pt",#
multicolumn = TRUE,#
omit.stat = c("ll", "F", "ser"),#
dep.var.labels = "Actual Congressional Results (2016)",#
covariate.labels = c("Incumbency Advantage","Presidential", "US Senate", "PA Attorneys General", "PA Auditor", "PA Treasurer", "Composite"),#
label = congress_predict.label,#
title = congress_predict.caption,#
notes = congress_predict.footnote#
    )#
tab_congress_predict <- tab_congress_predict[c(-6, -26, -28, -29, -30, -31, -32)]#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
sink()#
Table(tab_plan_summary,#
    path = "Tables/_tab_summaries.tex",#
    caption = plan_summary.caption,#
    label = plan_summary.label,#
    footnote = plan_summary.footnote)#
#
Table(congsum.tmp.tex,#
    path = "Tables/_tab_congsum.tex",#
    caption = congsum.caption,#
    label = congsum.label,#
    footnote = congsum.footnote)#
#
Table(tab_gerry, #
    path = "Tables/_tab_gerry.tex", #
    caption = gerry.caption,#
    label = gerry.label, #
    footnote = gerry.footnote)#
#
Table(tab_prop,#
    path = "Tables/_tab_prob.tex",#
    caption = prop.caption,#
    label = prop.label, #
    footnote = prop.footnote,#
    landscape = TRUE)#
#
Table(district_summary,#
    caption = district_summary.caption,#
    label = district_summary.label,#
    footnote = district_summary.footnote#
    )#
#
Table(tab_congress_predict,#
    caption = congress_predict.caption,#
    label = congress_predict.label,#
    footnote = congress_predict.footnote)#
cat("#
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n#
    ")
`eff_gap` <- # Stephanopoulos, Nicholas, and Eric Mcghee. 2014. “Partisan Gerrymandering and the Efficiency Gap.” University of Chicago Law School 82. http://ssrn.com/abstract=2457468.. (Accessed September 10, 2018).
function(D, R) {#
    total <- sum(D)+sum(R)#
    dem_wasted <- sum(ifelse(D>R, D[D>R] - R[D>R], D[D<R]))#
    rep_wasted <- sum(ifelse(D<R, R[D<R] - D[D<R], R[D>R]))#
      return((dem_wasted - rep_wasted) / sum(total))}
eg_TP <- function(votes)
{#
    y <- cbind.data.frame(votes, 1-votes)#
      return(eff_gap(y[1], y[2]))#
  }
# ▀▀█▀▀ █▀▀█ █▀▀▄ █░░ █▀▀ █▀▀#
# ░░█░░ █▄▄█ █▀▀▄ █░░ █▀▀ ▀▀█#
# ░░▀░░ ▀░░▀ ▀▀▀░ ▀▀▀ ▀▀▀ ▀▀▀#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
cat(#
    "\n#
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
        CREATING TABLES . . . . . . . . . . . . . . . . . . . . .#
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n")#
sink("/dev/null")#
# races <- c("cong2016", "pres16", "ussen16", "atg16", "aud16", "trea16", "comp2016")#
statewide.contests.2016 <- c("Congress", "Presidential", "US Senate", "PA Attorneys General", "PA Auditor", "PA Treasurer", "Composite")#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# County Spliits#
county_splits <- c(41, 19, 19, 17)#
# COMPACTNESS#
geom_names <- paste0(plans, ".geom")#
#
reock.plans <- numeric()#
    for (i in 1:length(geom_names)) {#
        reock.plans <- rbind(reock.plans, REOCK(get(geom_names[i])))#
        }#
polsby.plans <- numeric()#
    for (i in 1:length(geom_names)) {#
        polsby.plans <- rbind(polsby.plans, POLSBYPOPPER(get(geom_names[i])))#
        }#
#
tab_plan_sum <- cbind.data.frame(#
    Plan = plan_names,#
    CountySplits = county_splits, #
    Reock = reock.plans, #
    PolsbyPopper = polsby.plans#
    # Pres2016 = c(seats.print(enacted.pres), seats.print(court.pres), seats.print(joint.pres), seats.print(govwolf.pres)),#
    # Comp2016 = c(seats.print(enacted.comp), seats.print(court.comp), seats.print(joint.comp), seats.print(govwolf.comp))#
    )#
tab_plan_sum#
plan_summary.caption = "County Splits and Compactness Scores of the Plans"#
plan_summary.label = "tab:summaries"#
plan_summary.footnote = "County splits include all the pieces in which a county is split, not just the total number of counties that have been split. (The latter number is the one most often reported in both court documents and in the media, but we regard the measure we report as both more precise and more informative.)"#
tab_plan_summary <- #
    stargazer(tab_plan_sum,#
        style = "apsr", #
        header = FALSE,#
        summary = FALSE,#
        model.numbers = FALSE,#
        initial.zero = TRUE,#
        digits = 3,#
        column.sep.width = "0pt",#
        rownames = FALSE,#
        multicolumn = TRUE,#
        label = plan_summary.label,#
        title = plan_summary.caption,#
        covariate.labels = ,#
        notes = plan_summary.footnote #
        )#
tab_plan_summary <- tab_plan_summary[c(-6, -7, -13, -14, -15, -16)]#
# tab_plan_summary <- append(tab_plan_summary, #
#   "  &   &  &  & \\textbf{Projected} & \\textbf{Projected}  \\\\", #
#   after = 5)#
# tab_plan_summary <- append(tab_plan_summary,#
#   "  &  \\textbf{County}  &  \\textbf{Polsby}   &   &  \\textbf{2016 using}  &  \\textbf{five state-wide} \\\\",#
#   after = 6)#
# tab_plan_summary <- append(tab_plan_summary,#
#   "  \\textbf{Plan}  &  \\textbf{Splits} &  \\textbf{Popper}  &  \\textbf{Reock}  &  \\textbf{Presidential Results}  &  \\textbf{elections in 2016} \\\\",#
#   after = 7)#
#
tab_plan_summary <- append(tab_plan_summary,#
    "  &  \\textbf{County}  &  \\textbf{Polsby}   &   \\\\",#
    after = 5)#
tab_plan_summary <- append(tab_plan_summary,#
    "  \\textbf{Plan}  &  \\textbf{Splits} &  \\textbf{Popper}  &  \\textbf{Reock}  \\\\",#
    after = 6)#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# =================================================================#
# Comparing Pennsylvania Congressional Results with State-wide Elections (2016) %#
# =================================================================#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# SUMMARY OF ELECTIONS#
congsum.caption = "US House Election Summaries (PA 2012-2016)"#
congsum.label = "tab:congsum"#
congsum.footnote = "Uncontested races are imputed with 0.25 and 0.75 for the respective winners. All votes are calculated from the Republican perspective of the two-party vote. We've adjusted all gerrymandering measures such that negative numbers indicate bias in favor of the Democrats."#
congsum.tmp <- cbind.data.frame(#
    # PA2004 = gerry(default.unc(house.2004.votes)),#
    # PA2006 = gerry(default.unc(house.2006.votes)),#
    # PA2008 = gerry(default.unc(house.2008.votes)),#
    # PA2010 = gerry(default.unc(house.2010.votes)),#
    PA2012 = gerry(default.unc(house.2012.votes)), #
    PA2014 = gerry(default.unc(house.2014.votes)), #
    PA2016 = gerry(default.unc(house.2016.votes)),#
    # PA2018 = gerry(default.unc(house.2018.votes)),#
    PA2012_2016_AVE = rowMeans(cbind(   #
    gerry(default.unc(house.2012.votes), toggle=F),#
    gerry(default.unc(house.2014.votes), toggle=F),#
    gerry(default.unc(house.2016.votes), toggle=F)))#
  )#
congsum.tmp #
colnames(congsum.tmp) <- c(seq(2012,2016,2),"AVE")#
congsum.tmp.tex <- stargazer(congsum.tmp,#
    style = "apsr", #
    summary = FALSE,#
    header = FALSE,#
    column.sep.width = "-5pt",#
    multicolumn = TRUE,#
    label = congsum.label,#
    title = congsum.caption,#
    notes = congsum.footnote)#
congsum.tmp.tex <- congsum.tmp.tex[c(-6, -16, -17, -18, -19)]#
congsum.tmp.tex[8] <- "Seats &  [13R-5D] &  [13R-5D] &  [13R-5D] & [13R-5D] \\\\ "#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
dist_summary <- #
    rbind(#
      cbind.data.frame(#
        District = seq(1,18,1),#
        sapply(composite(pa.redist.dta, "enacted"), percent)),#
        c(#
          "Statewide",#
          sapply(colMeans(composite(pa.redist.dta, "enacted")), percent)#
        )#
    )#
#
district_summary.caption = "2016 District-level Summaries for 2011 Enacted Plan"#
district_summary.label = "tab:districtvotes"#
district_summary.footnote = "Uncontested races and those with only negligible competition will be imputed with 0.25 and 0.75 for the respective winners. All votes are calculated from the Republican perspective of the two-party vote. Composite does NOT include the Congressional elections. The statewide average is the unweighted mean of districts."#
#
district_summary <- stargazer(dist_summary,#
    style = "apsr", #
    summary = FALSE,#
    header = FALSE,#
    column.sep.width = "-5pt",#
    multicolumn = TRUE,#
    rownames = FALSE,#
    label = district_summary.label,#
    title = district_summary.caption,#
    notes = "REPLACE WITH NOTES" )#
district_summary <- district_summary[c(-6, -28, -29, -30, -31)]#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
# =================================================================#
# Measures of Gerrymandering for the Eight Considered Plans#
# =================================================================#
#
tab_prop.gen <- #
    cbind.data.frame(#
        ptab("enacted"),#
        ptab("joint"),#
        ptab("govwolf"),#
        ptab("court")#
        )#
    colnames(tab_prop.gen) <- c(plan_names)#
    rownames(tab_prop.gen) <- c(#
        "Mean Seat Share",#
        "SDS", #
        "Median Seat Share",#
        "Probability Republican Majority",#
        "Probability Democratic Majority",#
        "Probability Tied Delegation")#
#
prop.caption = "Probabilistic Projections of Partisan Outcomes for Four Plans"#
prop.label = "tab:prob"#
prop.footnote = "Using a Composite of Five Statewide Elections (adjusted to a 50\\% Vote Share)"#
#
tab_prop.tex <- stargazer(tab_prop.gen,#
    style = "apsr", #
    summary=F,#
    column.sep.width = "-5pt", #
    float = T, #
    header = FALSE,#
    multicolumn = TRUE, #
    title= prop.caption, #
    label= prop.label,#
    notes = prop.footnote)#
tab_prop <- tab_prop.tex[c(-6, -15, -16, -17, -18)]#
#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
gerry.table.gen <- #
    cbind.data.frame(#
        gtab("enacted"),#
        gtab("joint"),#
        gtab("govwolf"),#
        gtab("court")#
        )#
#
    colnames(gerry.table.gen) <- c(plan_names)#
    rownames(gerry.table.gen) <- c(#
        "Partisan Bias", #
        "SD1",#
        "Efficiency Gap",#
        "SD2",#
        "Mean/Median",#
        "SD3",#
        "Declination",#
        "SD4")#
#
gerry.caption = "Measures of Gerrymandering for the Four Considered Plans"#
gerry.label = "tab:gerry"#
gerry.footnote = "Measures are averages of 1,000 simulations for each map using the 2016 composite. Brackets numbers are the 95\\% range."#
#
tab_gerry.tex <- stargazer(gerry.table.gen,#
    style = "apsr", #
    summary=F,#
    column.sep.width = "-5pt", #
    float = T, #
    header = FALSE,#
    multicolumn = TRUE, #
    title= gerry.caption, #
    label= gerry.label,#
    notes = gerry.footnote)#
tab_gerry <- tab_gerry.tex[c(-6, -17, -18, -19, -20)]#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
# =================================================================#
# Information about Twelve States with Constitutional Provisions similar to Pennsylvania#
# =================================================================#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# latex <- function(x) cat(paste(x, collapse="\n"), "\n")#
# states_compare.caption = "Information about Twelve States with Constitutional Provisions similar to Pennsylvania"#
# states_compare.label = "tab:states_compare"#
# states_compare.footnote = "Seats and votes are based on the 2016 five-election projection (to deal with the existence of non-contested congressional districts). Percentages are of the of district level results. This difference is why the percentages reported in columns 6 and 8 are not identical. Data from DailyKos, All about Redistricting, and Ballotpedia web sites.States with fewer than 9 districts do not have efficiency gap or median values reported because of the potential unreliability of those calculations given the small number of districts involved."#
#
# tab_states_compare <- #
#   paste("#
#       \\begin{table}#
#       \\caption{", states_compare.caption, "}#
#       \\label{", states_compare.label, "}#
#       \\begin{tabular}{#
#       >{\\centering\\arraybackslash}#
#       M{0.1\\linewidth}|#
#       M{.025\\linewidth}|#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.3\\linewidth}}#
#       \\textbf{State} & \\textbf{\\# CDs} & \\textbf{Unified Control (2011)} & \\textbf{Unified Control (2016)} & \\textbf{Seats (2016)} & \\textbf{Votes (2016)} & \\textbf{Mean District Vote Share (Dem)} & \\textbf{Median District Vote Share (Dem)} & \\textbf{Efficiency Gap} & \\textbf{Who does districting} \\\\#
#        \\hline#
#       Arizona & 9 & $\\surd$ (R) & $\\surd$ (R) & 44.4\\% & 48.1\\% & 50.4\\% & 49.4\\% & 0.08 & Independent commission \\\\#
#       Arkansas & 4 & $\\surd$ (D) & $\\surd$ (R) & 0\\% & 35.7\\% & 35.5\\% &  &  & state legislature \\\\#
#       Delaware & 1 & $\\surd$ (D) & $\\surd$ (D) & 100\\% & 55.9\\% & 56\\% &  &  & NA \\\\#
#       Illinois & 18 & $\\surd$ (D) &  & 61.1\\% & 59.0\\% & 59.6\\% & 59.8\\% & 0.08 & state legislature \\\\#
#       Indiana & 9 & $\\surd$ (R) & $\\surd$ (R) & 22.2\\% & 39.9\\% & 40.1\\% & 35.9\\% & 0.09 & state legislature \\\\#
#       Kentucky & 6 &  & $\\surd$ (R) & 16.7\\% & 34.3\\% & 33.8\\% &  &  & state legislature \\\\#
#       Oklahoma & 5 & $\\surd$ (R) & $\\surd$ (R) & 0\\% & 30.7\\% & 30.7\\% &  &  & state legislature \\\\#
#       Oregon & 5 &  & $\\surd$ (D) & 80\\% & 56.2\\% & 56\\% &  &  & state legislature \\\\#
#       South Dakota & 1 & $\\surd$ (R) & $\\surd$ (R) & 0\\% & 34.0\\% & 34\\% &  &  & NA \\\\#
#       Tennessee & 9 & $\\surd$ (R) & $\\surd$ (R) & 22.2\\% & 36.4\\% & 37.4\\% & 31.3\\% & 0.03 & state legislature \\\\#
#       Washington & 10 & $\\surd$ (D) & $\\surd$ (D) & 70\\% & 58.8\\% & 56\\% & 52.3\\% & -0.05 & 5-member independent commission \\\\#
#       Wyoming & 1 & $\\surd$ (R) & $\\surd$ (R) & 0\\% & 24.3\\% & 24.3\\% &  &  & NA ")#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
# TWO-PARTY VOTE SHARES, ACTUAL (CONGRESSIONAL)#
# tab_summary_stats <- stargazer(#
#   congress.PA.2008.2018,#
#   title="Republican Two-Party Vote/Seat Share, (PA Congressional Elections 2008-2018)",#
#   style = "apsr", #
#   header = FALSE,#
#   column.sep.width = "-5pt",#
#   multicolumn = TRUE,#
#   label = "tab:twoparty_actuals" )#
# tab_summary_stats <- tab_summary_stats[c(-6, -11)]#
#
#  Table(tab_summary_stats,#
#   caption="Two-Party Vote/Seat Share, (PA Congressional Elections 2008-2018)",#
#   label="ab:twoparty_actuals",#
#   footnote="Votes are the two-party unweighted average of PA Congressional Districts by year (uncontested elections imputed).")#
#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# AVERAGE VOTE BY DISTRICT#
means_races <- numeric()#
  base.form <- formula(. ~ 1)#
  cong.form <- formula(default.unc(enacted.elections$CONG) ~ + pahouse.2016$INC)#
for (k in colnames(enacted.elections))#
{#
  r.tmp <- composite(pa.redist.dta, "enacted")[,k]#
    reg_races <- summary(lm(update(base.form, as.formula(default.unc(r.tmp) ~ .))))#
    means_races[k] <- coef(reg_races)[1]#
}#
#
  cat(#
    "2016 Average Vote Share by State-level Contest \n"#
    )#
    print(cbind.data.frame(Race = statewide.contests.2016, Mean = percent(means_races)))#
    cat(paste("", collapse = "\n"), "\n")#
# # Regression of Race on Congressional Results#
    reg_cong_pres <- lm(update(cong.form, as.formula(. ~ . + default.unc(enacted.elections$PRES))))#
    reg_cong_ussen <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$USSEN))))#
    reg_cong_atg <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$ATTGEN))))#
    reg_cong_aud <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$AUDITOR))))#
    reg_cong_trea <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$TREASURER))))#
    reg_cong_comp <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$COMPOSITE))))#
    reg_cong_all <- lm(update(cong.form, #
      as.formula(. ~  . +  #
        default.unc(enacted.elections$PRES) + #
        default.unc(enacted.elections$USSEN) +#
        default.unc(enacted.elections$ATTGEN) +#
        default.unc(enacted.elections$AUDITOR) +#
        default.unc(enacted.elections$TREASURER))#
    ))#
#
congress_predict.caption = "Comparing Pennsylvania Congressional Results with State-wide Elections (2016)"#
congress_predict.label = "tab:tab_congress_predict"#
congress_predict.footnote = "$^{*}$p $<$ 0.05; $^{**}$p $<$ .01; $^{***}$p $<$ 0.001 \\\\ Uncontested (or non-competitive) elections replaced with 0.25 \\& 0.75 vote shares. Regressions are unweighted, ie, all districts are assumed to have identical turnout. This is the usual way political scientist measure aggregate congressional vote \\cite{GelmanKing1994_unifiedAJPS}. \\\\"#
#
tab_congress_predict <- stargazer(#
        reg_cong_pres, #
         reg_cong_ussen, #
         reg_cong_atg, #
         reg_cong_aud, #
         reg_cong_trea, #
         reg_cong_comp,#
         reg_cong_all,#
star.cutoffs = c(0.05,0.01, 0.001),#
style = "apsr", #
header = FALSE,#
model.numbers = FALSE,#
initial.zero = TRUE,#
digits = 2,#
column.sep.width = "0pt",#
multicolumn = TRUE,#
omit.stat = c("ll", "F", "ser"),#
dep.var.labels = "Actual Congressional Results (2016)",#
covariate.labels = c("Incumbency Advantage","Presidential", "US Senate", "PA Attorneys General", "PA Auditor", "PA Treasurer", "Composite"),#
label = congress_predict.label,#
title = congress_predict.caption,#
notes = congress_predict.footnote#
    )#
tab_congress_predict <- tab_congress_predict[c(-6, -26, -28, -29, -30, -31, -32)]#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
sink()#
Table(tab_plan_summary,#
    path = "Tables/_tab_summaries.tex",#
    caption = plan_summary.caption,#
    label = plan_summary.label,#
    footnote = plan_summary.footnote)#
#
Table(congsum.tmp.tex,#
    path = "Tables/_tab_congsum.tex",#
    caption = congsum.caption,#
    label = congsum.label,#
    footnote = congsum.footnote)#
#
Table(tab_gerry, #
    path = "Tables/_tab_gerry.tex", #
    caption = gerry.caption,#
    label = gerry.label, #
    footnote = gerry.footnote)#
#
Table(tab_prop,#
    path = "Tables/_tab_prob.tex",#
    caption = prop.caption,#
    label = prop.label, #
    footnote = prop.footnote,#
    landscape = TRUE)#
#
Table(district_summary,#
    caption = district_summary.caption,#
    label = district_summary.label,#
    footnote = district_summary.footnote#
    )#
#
Table(tab_congress_predict,#
    caption = congress_predict.caption,#
    label = congress_predict.label,#
    footnote = congress_predict.footnote)#
cat("#
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n#
    ")
eg_TP <- function(votes)
{#
    y <- cbind.data.frame(votes, 1-votes)#
      return(-1 * eff_gap(y[1], y[2]))#
  }
# ▀▀█▀▀ █▀▀█ █▀▀▄ █░░ █▀▀ █▀▀#
# ░░█░░ █▄▄█ █▀▀▄ █░░ █▀▀ ▀▀█#
# ░░▀░░ ▀░░▀ ▀▀▀░ ▀▀▀ ▀▀▀ ▀▀▀#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
cat(#
    "\n#
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
        CREATING TABLES . . . . . . . . . . . . . . . . . . . . .#
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n")#
sink("/dev/null")#
# races <- c("cong2016", "pres16", "ussen16", "atg16", "aud16", "trea16", "comp2016")#
statewide.contests.2016 <- c("Congress", "Presidential", "US Senate", "PA Attorneys General", "PA Auditor", "PA Treasurer", "Composite")#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# County Spliits#
county_splits <- c(41, 19, 19, 17)#
# COMPACTNESS#
geom_names <- paste0(plans, ".geom")#
#
reock.plans <- numeric()#
    for (i in 1:length(geom_names)) {#
        reock.plans <- rbind(reock.plans, REOCK(get(geom_names[i])))#
        }#
polsby.plans <- numeric()#
    for (i in 1:length(geom_names)) {#
        polsby.plans <- rbind(polsby.plans, POLSBYPOPPER(get(geom_names[i])))#
        }#
#
tab_plan_sum <- cbind.data.frame(#
    Plan = plan_names,#
    CountySplits = county_splits, #
    Reock = reock.plans, #
    PolsbyPopper = polsby.plans#
    # Pres2016 = c(seats.print(enacted.pres), seats.print(court.pres), seats.print(joint.pres), seats.print(govwolf.pres)),#
    # Comp2016 = c(seats.print(enacted.comp), seats.print(court.comp), seats.print(joint.comp), seats.print(govwolf.comp))#
    )#
tab_plan_sum#
plan_summary.caption = "County Splits and Compactness Scores of the Plans"#
plan_summary.label = "tab:summaries"#
plan_summary.footnote = "County splits include all the pieces in which a county is split, not just the total number of counties that have been split. (The latter number is the one most often reported in both court documents and in the media, but we regard the measure we report as both more precise and more informative.)"#
tab_plan_summary <- #
    stargazer(tab_plan_sum,#
        style = "apsr", #
        header = FALSE,#
        summary = FALSE,#
        model.numbers = FALSE,#
        initial.zero = TRUE,#
        digits = 3,#
        column.sep.width = "0pt",#
        rownames = FALSE,#
        multicolumn = TRUE,#
        label = plan_summary.label,#
        title = plan_summary.caption,#
        covariate.labels = ,#
        notes = plan_summary.footnote #
        )#
tab_plan_summary <- tab_plan_summary[c(-6, -7, -13, -14, -15, -16)]#
# tab_plan_summary <- append(tab_plan_summary, #
#   "  &   &  &  & \\textbf{Projected} & \\textbf{Projected}  \\\\", #
#   after = 5)#
# tab_plan_summary <- append(tab_plan_summary,#
#   "  &  \\textbf{County}  &  \\textbf{Polsby}   &   &  \\textbf{2016 using}  &  \\textbf{five state-wide} \\\\",#
#   after = 6)#
# tab_plan_summary <- append(tab_plan_summary,#
#   "  \\textbf{Plan}  &  \\textbf{Splits} &  \\textbf{Popper}  &  \\textbf{Reock}  &  \\textbf{Presidential Results}  &  \\textbf{elections in 2016} \\\\",#
#   after = 7)#
#
tab_plan_summary <- append(tab_plan_summary,#
    "  &  \\textbf{County}  &  \\textbf{Polsby}   &   \\\\",#
    after = 5)#
tab_plan_summary <- append(tab_plan_summary,#
    "  \\textbf{Plan}  &  \\textbf{Splits} &  \\textbf{Popper}  &  \\textbf{Reock}  \\\\",#
    after = 6)#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# =================================================================#
# Comparing Pennsylvania Congressional Results with State-wide Elections (2016) %#
# =================================================================#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# SUMMARY OF ELECTIONS#
congsum.caption = "US House Election Summaries (PA 2012-2016)"#
congsum.label = "tab:congsum"#
congsum.footnote = "Uncontested races are imputed with 0.25 and 0.75 for the respective winners. All votes are calculated from the Republican perspective of the two-party vote. We've adjusted all gerrymandering measures such that negative numbers indicate bias in favor of the Democrats."#
congsum.tmp <- cbind.data.frame(#
    # PA2004 = gerry(default.unc(house.2004.votes)),#
    # PA2006 = gerry(default.unc(house.2006.votes)),#
    # PA2008 = gerry(default.unc(house.2008.votes)),#
    # PA2010 = gerry(default.unc(house.2010.votes)),#
    PA2012 = gerry(default.unc(house.2012.votes)), #
    PA2014 = gerry(default.unc(house.2014.votes)), #
    PA2016 = gerry(default.unc(house.2016.votes)),#
    # PA2018 = gerry(default.unc(house.2018.votes)),#
    PA2012_2016_AVE = rowMeans(cbind(   #
    gerry(default.unc(house.2012.votes), toggle=F),#
    gerry(default.unc(house.2014.votes), toggle=F),#
    gerry(default.unc(house.2016.votes), toggle=F)))#
  )#
congsum.tmp #
colnames(congsum.tmp) <- c(seq(2012,2016,2),"AVE")#
congsum.tmp.tex <- stargazer(congsum.tmp,#
    style = "apsr", #
    summary = FALSE,#
    header = FALSE,#
    column.sep.width = "-5pt",#
    multicolumn = TRUE,#
    label = congsum.label,#
    title = congsum.caption,#
    notes = congsum.footnote)#
congsum.tmp.tex <- congsum.tmp.tex[c(-6, -16, -17, -18, -19)]#
congsum.tmp.tex[8] <- "Seats &  [13R-5D] &  [13R-5D] &  [13R-5D] & [13R-5D] \\\\ "#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
dist_summary <- #
    rbind(#
      cbind.data.frame(#
        District = seq(1,18,1),#
        sapply(composite(pa.redist.dta, "enacted"), percent)),#
        c(#
          "Statewide",#
          sapply(colMeans(composite(pa.redist.dta, "enacted")), percent)#
        )#
    )#
#
district_summary.caption = "2016 District-level Summaries for 2011 Enacted Plan"#
district_summary.label = "tab:districtvotes"#
district_summary.footnote = "Uncontested races and those with only negligible competition will be imputed with 0.25 and 0.75 for the respective winners. All votes are calculated from the Republican perspective of the two-party vote. Composite does NOT include the Congressional elections. The statewide average is the unweighted mean of districts."#
#
district_summary <- stargazer(dist_summary,#
    style = "apsr", #
    summary = FALSE,#
    header = FALSE,#
    column.sep.width = "-5pt",#
    multicolumn = TRUE,#
    rownames = FALSE,#
    label = district_summary.label,#
    title = district_summary.caption,#
    notes = "REPLACE WITH NOTES" )#
district_summary <- district_summary[c(-6, -28, -29, -30, -31)]#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
# =================================================================#
# Measures of Gerrymandering for the Eight Considered Plans#
# =================================================================#
#
tab_prop.gen <- #
    cbind.data.frame(#
        ptab("enacted"),#
        ptab("joint"),#
        ptab("govwolf"),#
        ptab("court")#
        )#
    colnames(tab_prop.gen) <- c(plan_names)#
    rownames(tab_prop.gen) <- c(#
        "Mean Seat Share",#
        "SDS", #
        "Median Seat Share",#
        "Probability Republican Majority",#
        "Probability Democratic Majority",#
        "Probability Tied Delegation")#
#
prop.caption = "Probabilistic Projections of Partisan Outcomes for Four Plans"#
prop.label = "tab:prob"#
prop.footnote = "Using a Composite of Five Statewide Elections (adjusted to a 50\\% Vote Share)"#
#
tab_prop.tex <- stargazer(tab_prop.gen,#
    style = "apsr", #
    summary=F,#
    column.sep.width = "-5pt", #
    float = T, #
    header = FALSE,#
    multicolumn = TRUE, #
    title= prop.caption, #
    label= prop.label,#
    notes = prop.footnote)#
tab_prop <- tab_prop.tex[c(-6, -15, -16, -17, -18)]#
#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
gerry.table.gen <- #
    cbind.data.frame(#
        gtab("enacted"),#
        gtab("joint"),#
        gtab("govwolf"),#
        gtab("court")#
        )#
#
    colnames(gerry.table.gen) <- c(plan_names)#
    rownames(gerry.table.gen) <- c(#
        "Partisan Bias", #
        "SD1",#
        "Efficiency Gap",#
        "SD2",#
        "Mean/Median",#
        "SD3",#
        "Declination",#
        "SD4")#
#
gerry.caption = "Measures of Gerrymandering for the Four Considered Plans"#
gerry.label = "tab:gerry"#
gerry.footnote = "Measures are averages of 1,000 simulations for each map using the 2016 composite. Brackets numbers are the 95\\% range."#
#
tab_gerry.tex <- stargazer(gerry.table.gen,#
    style = "apsr", #
    summary=F,#
    column.sep.width = "-5pt", #
    float = T, #
    header = FALSE,#
    multicolumn = TRUE, #
    title= gerry.caption, #
    label= gerry.label,#
    notes = gerry.footnote)#
tab_gerry <- tab_gerry.tex[c(-6, -17, -18, -19, -20)]#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
# =================================================================#
# Information about Twelve States with Constitutional Provisions similar to Pennsylvania#
# =================================================================#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# latex <- function(x) cat(paste(x, collapse="\n"), "\n")#
# states_compare.caption = "Information about Twelve States with Constitutional Provisions similar to Pennsylvania"#
# states_compare.label = "tab:states_compare"#
# states_compare.footnote = "Seats and votes are based on the 2016 five-election projection (to deal with the existence of non-contested congressional districts). Percentages are of the of district level results. This difference is why the percentages reported in columns 6 and 8 are not identical. Data from DailyKos, All about Redistricting, and Ballotpedia web sites.States with fewer than 9 districts do not have efficiency gap or median values reported because of the potential unreliability of those calculations given the small number of districts involved."#
#
# tab_states_compare <- #
#   paste("#
#       \\begin{table}#
#       \\caption{", states_compare.caption, "}#
#       \\label{", states_compare.label, "}#
#       \\begin{tabular}{#
#       >{\\centering\\arraybackslash}#
#       M{0.1\\linewidth}|#
#       M{.025\\linewidth}|#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.3\\linewidth}}#
#       \\textbf{State} & \\textbf{\\# CDs} & \\textbf{Unified Control (2011)} & \\textbf{Unified Control (2016)} & \\textbf{Seats (2016)} & \\textbf{Votes (2016)} & \\textbf{Mean District Vote Share (Dem)} & \\textbf{Median District Vote Share (Dem)} & \\textbf{Efficiency Gap} & \\textbf{Who does districting} \\\\#
#        \\hline#
#       Arizona & 9 & $\\surd$ (R) & $\\surd$ (R) & 44.4\\% & 48.1\\% & 50.4\\% & 49.4\\% & 0.08 & Independent commission \\\\#
#       Arkansas & 4 & $\\surd$ (D) & $\\surd$ (R) & 0\\% & 35.7\\% & 35.5\\% &  &  & state legislature \\\\#
#       Delaware & 1 & $\\surd$ (D) & $\\surd$ (D) & 100\\% & 55.9\\% & 56\\% &  &  & NA \\\\#
#       Illinois & 18 & $\\surd$ (D) &  & 61.1\\% & 59.0\\% & 59.6\\% & 59.8\\% & 0.08 & state legislature \\\\#
#       Indiana & 9 & $\\surd$ (R) & $\\surd$ (R) & 22.2\\% & 39.9\\% & 40.1\\% & 35.9\\% & 0.09 & state legislature \\\\#
#       Kentucky & 6 &  & $\\surd$ (R) & 16.7\\% & 34.3\\% & 33.8\\% &  &  & state legislature \\\\#
#       Oklahoma & 5 & $\\surd$ (R) & $\\surd$ (R) & 0\\% & 30.7\\% & 30.7\\% &  &  & state legislature \\\\#
#       Oregon & 5 &  & $\\surd$ (D) & 80\\% & 56.2\\% & 56\\% &  &  & state legislature \\\\#
#       South Dakota & 1 & $\\surd$ (R) & $\\surd$ (R) & 0\\% & 34.0\\% & 34\\% &  &  & NA \\\\#
#       Tennessee & 9 & $\\surd$ (R) & $\\surd$ (R) & 22.2\\% & 36.4\\% & 37.4\\% & 31.3\\% & 0.03 & state legislature \\\\#
#       Washington & 10 & $\\surd$ (D) & $\\surd$ (D) & 70\\% & 58.8\\% & 56\\% & 52.3\\% & -0.05 & 5-member independent commission \\\\#
#       Wyoming & 1 & $\\surd$ (R) & $\\surd$ (R) & 0\\% & 24.3\\% & 24.3\\% &  &  & NA ")#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
# TWO-PARTY VOTE SHARES, ACTUAL (CONGRESSIONAL)#
# tab_summary_stats <- stargazer(#
#   congress.PA.2008.2018,#
#   title="Republican Two-Party Vote/Seat Share, (PA Congressional Elections 2008-2018)",#
#   style = "apsr", #
#   header = FALSE,#
#   column.sep.width = "-5pt",#
#   multicolumn = TRUE,#
#   label = "tab:twoparty_actuals" )#
# tab_summary_stats <- tab_summary_stats[c(-6, -11)]#
#
#  Table(tab_summary_stats,#
#   caption="Two-Party Vote/Seat Share, (PA Congressional Elections 2008-2018)",#
#   label="ab:twoparty_actuals",#
#   footnote="Votes are the two-party unweighted average of PA Congressional Districts by year (uncontested elections imputed).")#
#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# AVERAGE VOTE BY DISTRICT#
means_races <- numeric()#
  base.form <- formula(. ~ 1)#
  cong.form <- formula(default.unc(enacted.elections$CONG) ~ + pahouse.2016$INC)#
for (k in colnames(enacted.elections))#
{#
  r.tmp <- composite(pa.redist.dta, "enacted")[,k]#
    reg_races <- summary(lm(update(base.form, as.formula(default.unc(r.tmp) ~ .))))#
    means_races[k] <- coef(reg_races)[1]#
}#
#
  cat(#
    "2016 Average Vote Share by State-level Contest \n"#
    )#
    print(cbind.data.frame(Race = statewide.contests.2016, Mean = percent(means_races)))#
    cat(paste("", collapse = "\n"), "\n")#
# # Regression of Race on Congressional Results#
    reg_cong_pres <- lm(update(cong.form, as.formula(. ~ . + default.unc(enacted.elections$PRES))))#
    reg_cong_ussen <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$USSEN))))#
    reg_cong_atg <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$ATTGEN))))#
    reg_cong_aud <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$AUDITOR))))#
    reg_cong_trea <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$TREASURER))))#
    reg_cong_comp <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$COMPOSITE))))#
    reg_cong_all <- lm(update(cong.form, #
      as.formula(. ~  . +  #
        default.unc(enacted.elections$PRES) + #
        default.unc(enacted.elections$USSEN) +#
        default.unc(enacted.elections$ATTGEN) +#
        default.unc(enacted.elections$AUDITOR) +#
        default.unc(enacted.elections$TREASURER))#
    ))#
#
congress_predict.caption = "Comparing Pennsylvania Congressional Results with State-wide Elections (2016)"#
congress_predict.label = "tab:tab_congress_predict"#
congress_predict.footnote = "$^{*}$p $<$ 0.05; $^{**}$p $<$ .01; $^{***}$p $<$ 0.001 \\\\ Uncontested (or non-competitive) elections replaced with 0.25 \\& 0.75 vote shares. Regressions are unweighted, ie, all districts are assumed to have identical turnout. This is the usual way political scientist measure aggregate congressional vote \\cite{GelmanKing1994_unifiedAJPS}. \\\\"#
#
tab_congress_predict <- stargazer(#
        reg_cong_pres, #
         reg_cong_ussen, #
         reg_cong_atg, #
         reg_cong_aud, #
         reg_cong_trea, #
         reg_cong_comp,#
         reg_cong_all,#
star.cutoffs = c(0.05,0.01, 0.001),#
style = "apsr", #
header = FALSE,#
model.numbers = FALSE,#
initial.zero = TRUE,#
digits = 2,#
column.sep.width = "0pt",#
multicolumn = TRUE,#
omit.stat = c("ll", "F", "ser"),#
dep.var.labels = "Actual Congressional Results (2016)",#
covariate.labels = c("Incumbency Advantage","Presidential", "US Senate", "PA Attorneys General", "PA Auditor", "PA Treasurer", "Composite"),#
label = congress_predict.label,#
title = congress_predict.caption,#
notes = congress_predict.footnote#
    )#
tab_congress_predict <- tab_congress_predict[c(-6, -26, -28, -29, -30, -31, -32)]#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
sink()#
Table(tab_plan_summary,#
    path = "Tables/_tab_summaries.tex",#
    caption = plan_summary.caption,#
    label = plan_summary.label,#
    footnote = plan_summary.footnote)#
#
Table(congsum.tmp.tex,#
    path = "Tables/_tab_congsum.tex",#
    caption = congsum.caption,#
    label = congsum.label,#
    footnote = congsum.footnote)#
#
Table(tab_gerry, #
    path = "Tables/_tab_gerry.tex", #
    caption = gerry.caption,#
    label = gerry.label, #
    footnote = gerry.footnote)#
#
Table(tab_prop,#
    path = "Tables/_tab_prob.tex",#
    caption = prop.caption,#
    label = prop.label, #
    footnote = prop.footnote,#
    landscape = TRUE)#
#
Table(district_summary,#
    caption = district_summary.caption,#
    label = district_summary.label,#
    footnote = district_summary.footnote#
    )#
#
Table(tab_congress_predict,#
    caption = congress_predict.caption,#
    label = congress_predict.label,#
    footnote = congress_predict.footnote)#
cat("#
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n#
    ")
cat(#
  "\n#
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
    LOADING FUNCTIONS. . . . . . . . . . . . . . . . . . . . . . #
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n")#
`Table` <- function(x, path=NULL, caption="", label="", footnote="", landscape=FALSE, out=NULL)#
  {#
    x <- append(x,#
paste0(#
"\n% =====================================================================#
% ▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟#
% ---------------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n \\begin{center}\\textbf{INSERT TABLE \\ref{", label, "} ABOUT HERE} \\end{center}#
% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n#
\n% =====================================================================#
% ▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ T̟A̟B̟L̟E̟#
% ---------------------------------------------------------------------",#
ifelse(landscape==T, "\n\\begin{landscape}", "")),#
 after = 1)#
#
    x <- append(x,#
paste0("\\end{tabular}#
\\tabnotes{", footnote, "}#
\\end{table}",#
ifelse(landscape==T, "\n\\end{landscape}", ""),#
"#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ T͎A͎B͎L͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ T͎A͎B͎L͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ T͎A͎B͎L͎E͎ ▄▀▄▀▄▀#
% ===================================================================== \n \n"),#
after = length(x))#
cat(paste(x, collapse = "\n"), "\n")#
cat(paste0())#
  }#
 `Figure` <- function(path=NULL, caption="", label="", footnote="")#
  {#
    x <- paste0("\n#
% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------\n",#
ifelse(is.null(path),#
paste0("\\begin{center} \\textbf{", caption, "} \\end{center}"),#
paste0("\\input{", path, "}")),#
#
"\n \\begin{center} INSERT FIGURE \\ref{", label, "} ABOUT HERE \\end{center}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% ===================================================================== \n",#
#
"\n% =====================================================================#
% ▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟G̟U̟R̟E̟ ▄▀▄▀▄▀▀▄▀▄▀▄ F̟I̟#
% ---------------------------------------------------------------------#
% " , caption,#
"% •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
% #
\\begin{figure}#
    \\begin{center}#
    \\caption{",caption, "}#
    \\label{", label, "}#
    \\includegraphics[width=1\\textwidth]{", path, "}#
    \\end{center}#
    \\tabnotes{", footnote, "}#
\\end{figure}#
% ---------------------------------------------------------------------#
% ▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄▀▄▀▀▄▀▄▀▄ E͎N͎D͎ F͎I͎G͎U͎R͎E͎ ▄▀▄#
% =====================================================================\n \n"#
)#
  cat(paste(x, collapse = "\n"), "\n")#
  }#
#
`new.list` <-#
function(len) {#
  out <- list(NA)#
  if (len<1) stop ("Can't make a list of length ",len,".")#
  for (ii in 1:len) out[[ii]] <- NA#
  return(out)#
}#
#
`shift` <- # Seats at c vote#
function(x, w=NULL, c=0.5) {#
    if(is.null(w)) w <- rep(1,length(x))#
  tmp <- mean.w(x, w = w) - c#
    tmp.votes <- x - tmp#
    return(seats(tmp.votes))#
}#
`cube` <- function (x)  x^3/(1-3*x+3*x^2)#
#
seats.display <- function(x) {#
  tmp <- numeric()#
    for (i in 1:dim(x)[2]) {#
      rep <- seats(x[,i]) * length(x[,i])#
      dem <- length(x[,i]) - rep#
      tmp <- rbind(tmp, paste0(rep,"R-", dem, "D"))#
    }#
    return(tmp)#
  }#
#
`two_party` <- #
  function(D, R) {#
    replaceNA(as.numeric(D))/(replaceNA(as.numeric(D))+replaceNA(as.numeric(R)))#
    }#
#
`find.winner` <- #
  function(inp) 0*(inp<0.5)+1*(inp>0.5)#
#
`seats` <- #
  function(inp) mean(inp>.5)#
#
`make.weights` <-  #
  function(x, d = 5) {#
    r(x/sum(x,na.rm=T), d = d)}#
#
`f.num` <- function(x, d=2) format(round(x, d=d), nsmall=d)#
#
`percent` <- #
  function(x, d = 1) {#
    paste0(f.num(x * 100, d= d), "%")#
  }#
#
`replaceNA` <- #
  function (x, value=0) {#
   x[is.na(x)] <- value #
   return(x)}#
#
`mean.w` <- # WEIGHTED MEAN#
function (x, weight=NULL, na.rm = FALSE, ...) {#
    if (is.null(weight)) weight <- rep(1, length(x))#
      w <- as.double(weight)#
    if (na.rm) {#
        i <- !is.na(x)#
        w <- w[i]#
        x <- x[i]#
    }#
    sum((x * w)[w != 0])/sum(w)}#
#
inv <- function(x) {#
  (exp(x) / ( 1 + exp(x)))#
}#
#
sv.curve <- function(s,v) {#
  reg <- lm(log(sv(s)) ~ log(sv(v)))#
  vote <- seq(0.01,0.99, by=.01)#
  seatvotes <-  reg$coefficients[2]*log(vote/(1-vote)) + reg$coefficients[1]#
  return(inv(seatvotes))#
}#
#
sv <- function(x) (x / (1 - x))#
#
`seats.print` <- function(x) paste0(sum(find.winner(x)), "R-", length(x)-sum(find.winner(x)), "D")#
#
`agg.precinct` <- function(data, var, id) {#
        cbind.data.frame(#
          REP = aggregate(as.numeric(data[,paste0(var, "R")]), by=list(id=data[,id]), FUN=sum)[,2], #
          DEM = aggregate(as.numeric(data[,paste0(var, "D")]), by=list(id=data[,id]), FUN=sum)[,2]#
        )#
      }#
#
comp.raw <- function(data) {#
  (two_party(as.numeric(data[,"T16PRESR"]), as.numeric(data[,"T16PRESD"])) +#
  two_party(as.numeric(data[,"T16SENR"]), as.numeric(data[,"T16SEND"])) +#
  two_party(as.numeric(data[,"T16ATGR"]), as.numeric(data[,"T16ATGD"])) +#
  two_party(as.numeric(data[,"T16AUDR"]), as.numeric(data[,"T16AUDD"])) +#
  two_party(as.numeric(data[,"T16TREASR"]), as.numeric(data[,"T16TREASD"]))#
  ) / 5#
  }#
#
composite <- function(data, id) {#
  data <- data[order(data[,id]),]#
  cbind.data.frame(#
        CONG = two_party(aggregate(as.numeric(data[,"T16CONGR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16CONGD"]), by=list(id=data[,id]), FUN=sum)[,2]),#
        PRES = two_party(aggregate(as.numeric(data[,"T16PRESR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16PRESD"]), by=list(id=data[,id]), FUN=sum)[,2]), #
        USSEN = two_party(aggregate(as.numeric(data[,"T16SENR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16SEND"]), by=list(id=data[,id]), FUN=sum)[,2]) ,#
        ATTGEN = two_party(aggregate(as.numeric(data[,"T16ATGR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16ATGD"]), by=list(id=data[,id]), FUN=sum)[,2]) ,#
        AUDITOR = two_party(aggregate(as.numeric(data[,"T16AUDR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16AUDD"]), by=list(id=data[,id]), FUN=sum)[,2]) ,#
        TREASURER = two_party(aggregate(as.numeric(data[,"T16TREASR"]), by=list(id=data[,id]), FUN=sum)[,2], aggregate(as.numeric(data[,"T16TREASD"]), by=list(id=data[,id]), FUN=sum)[,2]) ,#
        COMPOSITE = composite.sum(data, id)#
        )#
  }#
#
composite.sum <- function(data, id) {#
  two_party(#
            (#
              aggregate(as.numeric(data[,"T16PRESR"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16SENR"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16ATGR"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16AUDR"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16TREASR"]), by=list(id=data[,id]), FUN=sum)[,2]#
            ),#
            (#
              aggregate(as.numeric(data[,"T16PRESD"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16SEND"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16ATGD"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16AUDD"]), by=list(id=data[,id]), FUN=sum)[,2] + #
              aggregate(as.numeric(data[,"T16TREASD"]), by=list(id=data[,id]), FUN=sum)[,2]#
            )#
          )#
  }#
#
std <- function(x) {#
  (mean(x[!is.na(x)]) - x) / sd(x[!is.na(x)])#
  }#
#
ci <- function(x)#
  {#
    r <- summary(lm(x~1))#
      m <- coef(r)[1]#
      se <- coef(r)[2]#
      return(qt(0.975, df=length(x)-1) * se)#
  }#
#
`quick.summary` <- function (x) #
  {#
  `qsum` <- function (set) cbind(mean(set[!is.na(set)]),#
                            sd(set[!is.na(set)]),#
                            var(set[!is.na(set)]),#
                            min(set[!is.na(set)]),#
                            max(set[!is.na(set)]),#
                            sum(1*!is.na(set)),#
                            sum(1*is.na(set)))#
    out <- qsum(x)#
  colnames(out) <- c("Mean","SD","Variance","Min","Max","Valid","Missing")#
    return(out)#
  }#
#
`quick.sum` <- #
  function (x) {#
  `qsum` <- #
    function (set) cbind(#
                      mean(set[!is.na(set)]),#
                      mean(set[!is.na(set)]) - ci(set[!is.na(set)]),#
                      mean(set[!is.na(set)]) + ci(set[!is.na(set)]),#
                      sd(set[!is.na(set)]),#
                      min(set[!is.na(set)]),#
                      quantile(set[!is.na(set)], 0.025),#
                      quantile(set[!is.na(set)], 0.975),                            #
                      max(set[!is.na(set)])#
                      )#
#
    out <- qsum(x)#
  colnames(out) <- c("Mean","CI_lower","CI_upper","SD","Min","2.5%","97.5%","Max")#
    return(out)}#
#
  comb <-combn(c(0:9,LETTERS[1:6]),2)#
  opacity <- c(paste0(comb[1,1:120], comb[2,1:120]), paste0("FF"))#
#
`unc` <- function(x) -1 * (x <= .25) + 1 * (x >= .75)#
#
`delete.unc` <-#
function(vs, uncL, uncU) {#
  #replaces uncontested vote values with "missing".#
 f1 <- function (a,b,c) ifelse (is.na(a),NA,#
                                 ifelse(a<b,NA, ifelse(a>c,NA,a)))#
  return(sapply (vs,f1,uncL,uncU)) }#
#
`replace.unc` <-#
function (vs,l,u,lr,ur, na.rm=T) { # na.rm replaces NAs with 0#
  na <- numeric()#
    if(na.rm==T) #
    {#
      na <- 0#
    } else NA#
  f1 <- function (a,b,c,d,e) if (!is.na(a)) {#
    if (a<b) a <- d else if (a>c) a <- e else a#
  } else NA#
  return(sapply (vs,f1,l,u,lr,ur))}#
`default.unc` <-#
function (vs, uncL = 0.25, uncU = 0.75, uncLR = 0.25, uncUR = 0.75) {#
  vs <- replace.unc(vs, uncL, uncU, uncLR, uncUR)#
  return(vs)}#
#
`mean.unc` <- # uncL and uncU to replace outside bounds, otherwise just NAs#
function(vs, uncL = 0.0001, uncU = 0.99999) {#
  vs <- delete.unc(vs, uncL=uncL, uncU=uncU)#
tmp <- vs[!is.na(vs)]#
reg <- summary(lm(tmp ~ 1))$coef[1] # mean#
reg_sig <- summary(lm(tmp ~ 1))$coef[2] # sigma#
  new.mean <- truncate(rnorm(length(vs[is.na(vs)]), reg, reg_sig))#
  vs[is.na(vs)] <- new.mean#
  return(vs)}#
`impute.weights` <- # for use when turnout in districts is abnormally high or low (w = # of standard deviations from median)#
function(t1, t2, w = 2) {#
  t <- t1+t2#
  uncL <- (median(t, na.rm=T) -  (w * sd(t, na.rm=T)))#
  uncU <- (median(t, na.rm=T) + (w * sd(t, na.rm=T)))#
  t1 <- delete.unc(t, uncL=uncL, uncU=uncU)#
tmp <- t1[!is.na(t1)]#
reg <- summary(lm(tmp ~ 1))$coef[1] # mean#
reg_sig <- summary(lm(tmp ~ 1))$coef[2] # sigma#
  new.reg <- r(rnorm(length(t1[is.na(t1)]), reg, reg_sig), d=0)#
  t1[is.na(t1)] <- new.reg#
  return(t1)}#
`truncate` <-#
function(r1) {#
  below <- r1<=0#
  above <- r1>=1#
  between <- !(below|above)#
  (below*0.0001)+(r1*between)+0.9999*above#
}#
sim.election <- function(votes= NULL, center=house.2016.votes, incumbency=NULL, yr=2018, sims=1000, sigma=sigma) {#
  if (is.null(sims)) sims <- 1000#
      equal.vote <- mean(votes) - mean(center)#
      sims.year <- new.list(sims)#
    for (k in 1:sims)#
      {#
    sims.year[[k]] <- #
        rnorm(length(votes), votes - equal.vote, #
          sigma)#
      }#
  return(sims.year)#
  }#
#
r <- function(r, d=2) round(r, digits=d)#
# =================================================================#
# -- GERRYMANDER MEASURES -- GERRYMANDER MEASURES -- GERRYMANDER ME#
# =================================================================#
# ••• DELINATION ••••••••••••••••••••••••••••••••••••••••••••••••••#
`declination` <- # Warrington, Gregory S. 2018. “Quantifying Gerrymandering Using the Vote Distribution.” Election Law Journal 17(1): 39–57. www.liebertpub.com (Accessed February 22, 2019).#
  function(votes) {#
    abo = votes[votes > 0.5]   # districts won by party A#
    bel = votes[votes <= 0.5]  # districts won by party B#
  # declination is undefined if one party wins all seats.#
    if (length(bel) == 0 | length(abo) == 0) {#
      return(NaN)#
    }#
  # angle for party B#
    theta = atan((1-(2*mean(bel))) / (length(bel) / length(votes)))#
  # angle for party A#
    gamma = atan((2*mean(abo)-1) / (length(abo) / length(votes)))#
  # normalize from radians to values betwen -1 and 1#
  # A little extra precision just in case :)#
    return(-1 * (2.0*(gamma-theta)/3.1415926535))}#
#
`declin2` <- # Simplified, not transformed from: Katz, Jonathan N. et al. 2018. Theoretical Foundations and Empirical Evaluations of Partisan Fairness in District-Based Democracies *. https://gking.harvard.edu/files/psym_2.pdf (Accessed March 16, 2019).#
  function(vs) {#
    abo = vs[vs > 0.5]   # districts won by party A#
    bel = vs[vs <= 0.5]  # districts won by party B#
    (-1 * (mean(abo) - 0.5) / (sum(find.winner(abo))/length(vs))) - ((0.5 - mean(bel)) / (1 - sum(find.winner(abo))/length(vs)))#
  }#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••• MEAN/MEDIAN••••••••••••••••••••••••••••••••••••••••••••••••••#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
`meanmedian` <- # Best, Robin E., Shawn J. Donahue, Jonathan Krasno, Daniel B. Magleby, et al. 2018. “Considering the Prospects for Establishing a Packing Gerrymandering Standard.” Election Law Journal: Rules, Politics, and Policy 17(1): 1–20. http://www.liebertpub.com/doi/10.1089/elj.2016.0392 (Accessed July 24, 2018).#
  function(votes) median(votes) - mean(votes)#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# •••• EFFICIENCY GAP••••••••••••••••••••••••••••••••••••••••••••••#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
`eff_gap` <- # Stephanopoulos, Nicholas, and Eric Mcghee. 2014. “Partisan Gerrymandering and the Efficiency Gap.” University of Chicago Law School 82. http://ssrn.com/abstract=2457468.. (Accessed September 10, 2018).#
  function(D, R) {#
    total <- sum(D)+sum(R)#
    dem_wasted <- sum(ifelse(D>R, D[D>R] - R[D>R], D[D<R]))#
    rep_wasted <- sum(ifelse(D<R, R[D<R] - D[D<R], R[D>R]))#
      return((dem_wasted - rep_wasted) / sum(total))}#
#
eg_TP <- function(votes) #
  {#
    y <- cbind.data.frame(votes, 1-votes)#
      return(-1 * eff_gap(y[1], y[2]))#
  }#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# •••• GERRY DISPLAY ••••••••••••••••••••••••••••••••••••••••••••••#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
  gerry <- function(x, toggle=TRUE)#
    {#
    Seats = paste0(" [", seats.print(x), "]")#
    SeatPER = percent(seats(x))#
    Votes = percent(mean(default.unc(x)))#
    Bias = r(seatsvotes(x)$bias)#
    EfficiencyGap = r(eg_TP(x))#
    MeanMedian = r(meanmedian(x))#
    Declination = r(declination(x))#
    a <- rbind.data.frame(#
      Seats, SeatPER, Votes, Bias, EfficiencyGap, MeanMedian, Declination)#
    rownames(a) <- c("Seats","Seat %","Votes","Bias","Efficiency Gap","Mean/Median","Declination")#
    colnames(a) <- "Summary"#
#
    if (toggle!=TRUE) { # TO RETURN UNFORMATTED MEASUREMENTS#
    SeatsT = NA#
    SeatPERT = r(seats(x))#
    VotesT = r(mean(default.unc(x)))#
    BiasT = r(seatsvotes(x)$bias)#
    EfficiencyGapT = r(eg_TP(x))#
    MeanMedianT = r(meanmedian(x))#
    DeclinationT = r(declination(x))#
      return(rbind.data.frame(#
      SeatsT, SeatPERT, VotesT, BiasT, EfficiencyGapT, MeanMedianT, DeclinationT))}#
    return(a)#
    }#
nintyfive <- function(x, percent=FALSE) {#
  if (percent==TRUE){ return(paste0("(", percent(r(quantile(x[!is.na(x)], 0.025),d=1)), ", ", percent(r(quantile(x[!is.na(x)], 0.975),d=1)), ")")) }#
  return(paste0("(", r(quantile(x[!is.na(x)], 0.025)), ", ", r(quantile(x[!is.na(x)], 0.975)), ")"))#
  }#
#
gtab <- function(x) {#
  p <- (paste0(x, ".sims.5050"))#
  p.tmp <- get(p)#
  s.tmp <- maps.sims.seats.5050[[x]]#
  v.tmp <- maps.sims.votes.5050[[x]]#
  x.bias <- get(paste0(p, ".bias"))#
  x.eg <- get(paste0(p, ".eg"))#
  x.mm <- get(paste0(p, ".meanmedian"))#
  x.declin <- get(paste0(p, ".declination"))#
    return(c(#
      r(mean(x.bias)), #
        nintyfive(x.bias), #
      r(mean(x.eg)), #
        nintyfive(x.eg), #
      r(mean(x.mm)), #
        nintyfive(x.mm),#
      r(mean(x.declin)), #
        nintyfive(x.declin)#
      ))#
    }#
#
ptab <- function(x) {#
  p <- (paste0(x, ".sims.5050"))#
  p.tmp <- get(p)#
  s.tmp <- maps.sims.seats.5050[[x]]#
  v.tmp <- maps.sims.votes.5050[[x]]#
    return(c(#
      paste0(r(sum(s.tmp*18)/(1000*18)*18), "R-", r(18-sum(s.tmp*18)/(1000*18)*18), "D"),#
      paste0("(", r(quantile(s.tmp, 0.025),d=1)*18, "R-", 18-r(quantile(s.tmp, 0.025),d=1)*18, "D, ", r(quantile(s.tmp, 0.975),d=1)*18, "R-", 18-r(quantile(s.tmp, 0.975),d=1)*18, "D)"),#
      paste0(median(s.tmp)*18, "R-", 18-median(s.tmp)*18, "D"),#
      percent(sum(1 * do.call(rbind, lapply(p.tmp, function(x) mean(find.winner(x)))) > 0.5) / 1000),#
      percent(sum(1 * do.call(rbind, lapply(p.tmp, function(x) mean(find.winner(x)))) < 0.5) / 1000),#
      percent(sum(1 * do.call(rbind, lapply(p.tmp, function(x) mean(find.winner(x)))) == 0.5) / 1000)#
      ))#
} #
#
 # •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••   #
`circle.new` <- #
  function(xorig, yorig, radius, add, ...){#
    x <- seq(-radius, radius, length.out = 1000)#
  # Euclidian distance to the origin#
  y <- sapply(x, function(z) sqrt(radius^2 - z^2))#
  if(add == TRUE){#
    line(xorig + c(x, rev(x)), c(yorig + y, yorig + rev(-y)),#
          type = "l", add=T, ...)#
   } else {#
   plot(xorig + c(x, rev(x)), c(yorig + y, yorig + rev(-y)),#
        type = "l",  #
    xlab="", #
    ylab="", #
    xaxt="n", #
    yaxt="n", #
    bty="n", ...)#
   }#
}#
#
`circle` <- #
function (x, y, radius, nv = 100, border = NULL, col = NA, lty = 1, #
    lwd = 1) {#
    xylim <- par("usr")#
    plotdim <- par("pin")#
    ymult <- getYmult()#
    angle.inc <- 2 * pi/nv#
    angles <- seq(0, 2 * pi - angle.inc, by = angle.inc)#
    if (length(col) < length(radius)) #
        col <- rep(col, length.out = length(radius))#
    for (circle in 1:length(radius)) {#
        xv <- cos(angles) * radius[circle] + x#
        yv <- sin(angles) * radius[circle] * ymult + y#
        polygon(xv, yv, border = border, col = col[circle], lty = lty, #
            lwd = lwd)#
    }#
    invisible(list(x = xv, y = yv))#
}#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# COMPACTNESS MEASURES#
#
POLSBYPOPPER <- function (x) r(mean((4 * 3.1415926535 * x$area) / (x$perimeter^2)), d = 3)#
REOCK <- function (x) r(mean(x$area/(x$smallestcircle^2 * 3.1415926535)), d = 3)#
poly.math <- function (x) {#
    compactness <- NULL#
  if (class(x)=="character") x <- get(x)#
      shapeFile <- x#
      mapObject <- fortify(shapeFile)#
      mapObject$id <- as.character(as.numeric(mapObject$id) + 1)#
      mapObject <- data.frame(mapObject, shapeFile@data[mapObject$id, ])#
      mapObject$piece <- as.character(mapObject$piece)#
      uniqueCDs <- sort(unique(as.numeric(mapObject$id)))#
      for(id in uniqueCDs)#
        {#
          cdShape <- mapObject[mapObject$id == id, ]#
          cdPoly <- SpatialPolygons(list(Polygons(lapply(split(cdShape[, c("long", "lat")], cdShape$piece), Polygon), ID = "b")))#
          owinObject <- try(as(cdPoly, "owin"))#
          compactness[[id]] <-  data.frame(area=area.owin(owinObject), perimeter=perimeter(owinObject), smallestcircle=boundingradius(owinObject))#
        }#
        x <- do.call("rbind", compactness)#
        cat(#
          "\n REOCK:        ", REOCK(x), "\n",#
          "POLSBY-POPPER:", POLSBYPOPPER(x), "\n \n"#
          )#
        return(x)#
  }
# ▀▀█▀▀ █▀▀█ █▀▀▄ █░░ █▀▀ █▀▀#
# ░░█░░ █▄▄█ █▀▀▄ █░░ █▀▀ ▀▀█#
# ░░▀░░ ▀░░▀ ▀▀▀░ ▀▀▀ ▀▀▀ ▀▀▀#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
cat(#
    "\n#
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
        CREATING TABLES . . . . . . . . . . . . . . . . . . . . .#
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••\n")#
sink("/dev/null")#
# races <- c("cong2016", "pres16", "ussen16", "atg16", "aud16", "trea16", "comp2016")#
statewide.contests.2016 <- c("Congress", "Presidential", "US Senate", "PA Attorneys General", "PA Auditor", "PA Treasurer", "Composite")#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# County Spliits#
county_splits <- c(41, 19, 19, 17)#
# COMPACTNESS#
geom_names <- paste0(plans, ".geom")#
#
reock.plans <- numeric()#
    for (i in 1:length(geom_names)) {#
        reock.plans <- rbind(reock.plans, REOCK(get(geom_names[i])))#
        }#
polsby.plans <- numeric()#
    for (i in 1:length(geom_names)) {#
        polsby.plans <- rbind(polsby.plans, POLSBYPOPPER(get(geom_names[i])))#
        }#
#
tab_plan_sum <- cbind.data.frame(#
    Plan = plan_names,#
    CountySplits = county_splits, #
    Reock = reock.plans, #
    PolsbyPopper = polsby.plans#
    # Pres2016 = c(seats.print(enacted.pres), seats.print(court.pres), seats.print(joint.pres), seats.print(govwolf.pres)),#
    # Comp2016 = c(seats.print(enacted.comp), seats.print(court.comp), seats.print(joint.comp), seats.print(govwolf.comp))#
    )#
tab_plan_sum#
plan_summary.caption = "County Splits and Compactness Scores of the Plans"#
plan_summary.label = "tab:summaries"#
plan_summary.footnote = "County splits include all the pieces in which a county is split, not just the total number of counties that have been split. (The latter number is the one most often reported in both court documents and in the media, but we regard the measure we report as both more precise and more informative.)"#
tab_plan_summary <- #
    stargazer(tab_plan_sum,#
        style = "apsr", #
        header = FALSE,#
        summary = FALSE,#
        model.numbers = FALSE,#
        initial.zero = TRUE,#
        digits = 3,#
        column.sep.width = "0pt",#
        rownames = FALSE,#
        multicolumn = TRUE,#
        label = plan_summary.label,#
        title = plan_summary.caption,#
        covariate.labels = ,#
        notes = plan_summary.footnote #
        )#
tab_plan_summary <- tab_plan_summary[c(-6, -7, -13, -14, -15, -16)]#
# tab_plan_summary <- append(tab_plan_summary, #
#   "  &   &  &  & \\textbf{Projected} & \\textbf{Projected}  \\\\", #
#   after = 5)#
# tab_plan_summary <- append(tab_plan_summary,#
#   "  &  \\textbf{County}  &  \\textbf{Polsby}   &   &  \\textbf{2016 using}  &  \\textbf{five state-wide} \\\\",#
#   after = 6)#
# tab_plan_summary <- append(tab_plan_summary,#
#   "  \\textbf{Plan}  &  \\textbf{Splits} &  \\textbf{Popper}  &  \\textbf{Reock}  &  \\textbf{Presidential Results}  &  \\textbf{elections in 2016} \\\\",#
#   after = 7)#
#
tab_plan_summary <- append(tab_plan_summary,#
    "  &  \\textbf{County}  &  \\textbf{Polsby}   &   \\\\",#
    after = 5)#
tab_plan_summary <- append(tab_plan_summary,#
    "  \\textbf{Plan}  &  \\textbf{Splits} &  \\textbf{Popper}  &  \\textbf{Reock}  \\\\",#
    after = 6)#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# =================================================================#
# Comparing Pennsylvania Congressional Results with State-wide Elections (2016) %#
# =================================================================#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# SUMMARY OF ELECTIONS#
congsum.caption = "US House Election Summaries (PA 2012-2016)"#
congsum.label = "tab:congsum"#
congsum.footnote = "Uncontested races are imputed with 0.25 and 0.75 for the respective winners. All votes are calculated from the Republican perspective of the two-party vote. We've adjusted all gerrymandering measures such that negative numbers indicate bias in favor of the Democrats."#
congsum.tmp <- cbind.data.frame(#
    # PA2004 = gerry(default.unc(house.2004.votes)),#
    # PA2006 = gerry(default.unc(house.2006.votes)),#
    # PA2008 = gerry(default.unc(house.2008.votes)),#
    # PA2010 = gerry(default.unc(house.2010.votes)),#
    PA2012 = gerry(default.unc(house.2012.votes)), #
    PA2014 = gerry(default.unc(house.2014.votes)), #
    PA2016 = gerry(default.unc(house.2016.votes)),#
    # PA2018 = gerry(default.unc(house.2018.votes)),#
    PA2012_2016_AVE = rowMeans(cbind(   #
    gerry(default.unc(house.2012.votes), toggle=F),#
    gerry(default.unc(house.2014.votes), toggle=F),#
    gerry(default.unc(house.2016.votes), toggle=F)))#
  )#
congsum.tmp #
colnames(congsum.tmp) <- c(seq(2012,2016,2),"AVE")#
congsum.tmp.tex <- stargazer(congsum.tmp,#
    style = "apsr", #
    summary = FALSE,#
    header = FALSE,#
    column.sep.width = "-5pt",#
    multicolumn = TRUE,#
    label = congsum.label,#
    title = congsum.caption,#
    notes = congsum.footnote)#
congsum.tmp.tex <- congsum.tmp.tex[c(-6, -16, -17, -18, -19)]#
congsum.tmp.tex[8] <- "Seats &  [13R-5D] &  [13R-5D] &  [13R-5D] & [13R-5D] \\\\ "#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
dist_summary <- #
    rbind(#
      cbind.data.frame(#
        District = seq(1,18,1),#
        sapply(composite(pa.redist.dta, "enacted"), percent)),#
        c(#
          "Statewide",#
          sapply(colMeans(composite(pa.redist.dta, "enacted")), percent)#
        )#
    )#
#
district_summary.caption = "2016 District-level Summaries for 2011 Enacted Plan"#
district_summary.label = "tab:districtvotes"#
district_summary.footnote = "Uncontested races and those with only negligible competition will be imputed with 0.25 and 0.75 for the respective winners. All votes are calculated from the Republican perspective of the two-party vote. Composite does NOT include the Congressional elections. The statewide average is the unweighted mean of districts."#
#
district_summary <- stargazer(dist_summary,#
    style = "apsr", #
    summary = FALSE,#
    header = FALSE,#
    column.sep.width = "-5pt",#
    multicolumn = TRUE,#
    rownames = FALSE,#
    label = district_summary.label,#
    title = district_summary.caption,#
    notes = "REPLACE WITH NOTES" )#
district_summary <- district_summary[c(-6, -28, -29, -30, -31)]#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
# =================================================================#
# Measures of Gerrymandering for the Eight Considered Plans#
# =================================================================#
#
tab_prop.gen <- #
    cbind.data.frame(#
        ptab("enacted"),#
        ptab("joint"),#
        ptab("govwolf"),#
        ptab("court")#
        )#
    colnames(tab_prop.gen) <- c(plan_names)#
    rownames(tab_prop.gen) <- c(#
        "Mean Seat Share",#
        "SDS", #
        "Median Seat Share",#
        "Probability Republican Majority",#
        "Probability Democratic Majority",#
        "Probability Tied Delegation")#
#
prop.caption = "Probabilistic Projections of Partisan Outcomes for Four Plans"#
prop.label = "tab:prob"#
prop.footnote = "Using a Composite of Five Statewide Elections (adjusted to a 50\\% Vote Share)"#
#
tab_prop.tex <- stargazer(tab_prop.gen,#
    style = "apsr", #
    summary=F,#
    column.sep.width = "-5pt", #
    float = T, #
    header = FALSE,#
    multicolumn = TRUE, #
    title= prop.caption, #
    label= prop.label,#
    notes = prop.footnote)#
tab_prop <- tab_prop.tex[c(-6, -15, -16, -17, -18)]#
#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
gerry.table.gen <- #
    cbind.data.frame(#
        gtab("enacted"),#
        gtab("joint"),#
        gtab("govwolf"),#
        gtab("court")#
        )#
#
    colnames(gerry.table.gen) <- c(plan_names)#
    rownames(gerry.table.gen) <- c(#
        "Partisan Bias", #
        "SD1",#
        "Efficiency Gap",#
        "SD2",#
        "Mean/Median",#
        "SD3",#
        "Declination",#
        "SD4")#
#
gerry.caption = "Measures of Gerrymandering for the Four Considered Plans"#
gerry.label = "tab:gerry"#
gerry.footnote = "Measures are averages of 1,000 simulations for each map using the 2016 composite. Brackets numbers are the 95\\% range."#
#
tab_gerry.tex <- stargazer(gerry.table.gen,#
    style = "apsr", #
    summary=F,#
    column.sep.width = "-5pt", #
    float = T, #
    header = FALSE,#
    multicolumn = TRUE, #
    title= gerry.caption, #
    label= gerry.label,#
    notes = gerry.footnote)#
tab_gerry <- tab_gerry.tex[c(-6, -17, -18, -19, -20)]#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
# =================================================================#
# Information about Twelve States with Constitutional Provisions similar to Pennsylvania#
# =================================================================#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# latex <- function(x) cat(paste(x, collapse="\n"), "\n")#
# states_compare.caption = "Information about Twelve States with Constitutional Provisions similar to Pennsylvania"#
# states_compare.label = "tab:states_compare"#
# states_compare.footnote = "Seats and votes are based on the 2016 five-election projection (to deal with the existence of non-contested congressional districts). Percentages are of the of district level results. This difference is why the percentages reported in columns 6 and 8 are not identical. Data from DailyKos, All about Redistricting, and Ballotpedia web sites.States with fewer than 9 districts do not have efficiency gap or median values reported because of the potential unreliability of those calculations given the small number of districts involved."#
#
# tab_states_compare <- #
#   paste("#
#       \\begin{table}#
#       \\caption{", states_compare.caption, "}#
#       \\label{", states_compare.label, "}#
#       \\begin{tabular}{#
#       >{\\centering\\arraybackslash}#
#       M{0.1\\linewidth}|#
#       M{.025\\linewidth}|#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.075\\linewidth}#
#       M{.3\\linewidth}}#
#       \\textbf{State} & \\textbf{\\# CDs} & \\textbf{Unified Control (2011)} & \\textbf{Unified Control (2016)} & \\textbf{Seats (2016)} & \\textbf{Votes (2016)} & \\textbf{Mean District Vote Share (Dem)} & \\textbf{Median District Vote Share (Dem)} & \\textbf{Efficiency Gap} & \\textbf{Who does districting} \\\\#
#        \\hline#
#       Arizona & 9 & $\\surd$ (R) & $\\surd$ (R) & 44.4\\% & 48.1\\% & 50.4\\% & 49.4\\% & 0.08 & Independent commission \\\\#
#       Arkansas & 4 & $\\surd$ (D) & $\\surd$ (R) & 0\\% & 35.7\\% & 35.5\\% &  &  & state legislature \\\\#
#       Delaware & 1 & $\\surd$ (D) & $\\surd$ (D) & 100\\% & 55.9\\% & 56\\% &  &  & NA \\\\#
#       Illinois & 18 & $\\surd$ (D) &  & 61.1\\% & 59.0\\% & 59.6\\% & 59.8\\% & 0.08 & state legislature \\\\#
#       Indiana & 9 & $\\surd$ (R) & $\\surd$ (R) & 22.2\\% & 39.9\\% & 40.1\\% & 35.9\\% & 0.09 & state legislature \\\\#
#       Kentucky & 6 &  & $\\surd$ (R) & 16.7\\% & 34.3\\% & 33.8\\% &  &  & state legislature \\\\#
#       Oklahoma & 5 & $\\surd$ (R) & $\\surd$ (R) & 0\\% & 30.7\\% & 30.7\\% &  &  & state legislature \\\\#
#       Oregon & 5 &  & $\\surd$ (D) & 80\\% & 56.2\\% & 56\\% &  &  & state legislature \\\\#
#       South Dakota & 1 & $\\surd$ (R) & $\\surd$ (R) & 0\\% & 34.0\\% & 34\\% &  &  & NA \\\\#
#       Tennessee & 9 & $\\surd$ (R) & $\\surd$ (R) & 22.2\\% & 36.4\\% & 37.4\\% & 31.3\\% & 0.03 & state legislature \\\\#
#       Washington & 10 & $\\surd$ (D) & $\\surd$ (D) & 70\\% & 58.8\\% & 56\\% & 52.3\\% & -0.05 & 5-member independent commission \\\\#
#       Wyoming & 1 & $\\surd$ (R) & $\\surd$ (R) & 0\\% & 24.3\\% & 24.3\\% &  &  & NA ")#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
# TWO-PARTY VOTE SHARES, ACTUAL (CONGRESSIONAL)#
# tab_summary_stats <- stargazer(#
#   congress.PA.2008.2018,#
#   title="Republican Two-Party Vote/Seat Share, (PA Congressional Elections 2008-2018)",#
#   style = "apsr", #
#   header = FALSE,#
#   column.sep.width = "-5pt",#
#   multicolumn = TRUE,#
#   label = "tab:twoparty_actuals" )#
# tab_summary_stats <- tab_summary_stats[c(-6, -11)]#
#
#  Table(tab_summary_stats,#
#   caption="Two-Party Vote/Seat Share, (PA Congressional Elections 2008-2018)",#
#   label="ab:twoparty_actuals",#
#   footnote="Votes are the two-party unweighted average of PA Congressional Districts by year (uncontested elections imputed).")#
#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# AVERAGE VOTE BY DISTRICT#
means_races <- numeric()#
  base.form <- formula(. ~ 1)#
  cong.form <- formula(default.unc(enacted.elections$CONG) ~ + pahouse.2016$INC)#
for (k in colnames(enacted.elections))#
{#
  r.tmp <- composite(pa.redist.dta, "enacted")[,k]#
    reg_races <- summary(lm(update(base.form, as.formula(default.unc(r.tmp) ~ .))))#
    means_races[k] <- coef(reg_races)[1]#
}#
#
  cat(#
    "2016 Average Vote Share by State-level Contest \n"#
    )#
    print(cbind.data.frame(Race = statewide.contests.2016, Mean = percent(means_races)))#
    cat(paste("", collapse = "\n"), "\n")#
# # Regression of Race on Congressional Results#
    reg_cong_pres <- lm(update(cong.form, as.formula(. ~ . + default.unc(enacted.elections$PRES))))#
    reg_cong_ussen <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$USSEN))))#
    reg_cong_atg <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$ATTGEN))))#
    reg_cong_aud <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$AUDITOR))))#
    reg_cong_trea <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$TREASURER))))#
    reg_cong_comp <- lm(update(cong.form, as.formula(. ~ . +  default.unc(enacted.elections$COMPOSITE))))#
    reg_cong_all <- lm(update(cong.form, #
      as.formula(. ~  . +  #
        default.unc(enacted.elections$PRES) + #
        default.unc(enacted.elections$USSEN) +#
        default.unc(enacted.elections$ATTGEN) +#
        default.unc(enacted.elections$AUDITOR) +#
        default.unc(enacted.elections$TREASURER))#
    ))#
#
congress_predict.caption = "Comparing Pennsylvania Congressional Results with State-wide Elections (2016)"#
congress_predict.label = "tab:tab_congress_predict"#
congress_predict.footnote = "$^{*}$p $<$ 0.05; $^{**}$p $<$ .01; $^{***}$p $<$ 0.001 \\\\ Uncontested (or non-competitive) elections replaced with 0.25 \\& 0.75 vote shares. Regressions are unweighted, ie, all districts are assumed to have identical turnout. This is the usual way political scientist measure aggregate congressional vote \\cite{GelmanKing1994_unifiedAJPS}. \\\\"#
#
tab_congress_predict <- stargazer(#
        reg_cong_pres, #
         reg_cong_ussen, #
         reg_cong_atg, #
         reg_cong_aud, #
         reg_cong_trea, #
         reg_cong_comp,#
         reg_cong_all,#
star.cutoffs = c(0.05,0.01, 0.001),#
style = "apsr", #
header = FALSE,#
model.numbers = FALSE,#
initial.zero = TRUE,#
digits = 2,#
column.sep.width = "0pt",#
multicolumn = TRUE,#
omit.stat = c("ll", "F", "ser"),#
dep.var.labels = "Actual Congressional Results (2016)",#
covariate.labels = c("Incumbency Advantage","Presidential", "US Senate", "PA Attorneys General", "PA Auditor", "PA Treasurer", "Composite"),#
label = congress_predict.label,#
title = congress_predict.caption,#
notes = congress_predict.footnote#
    )#
tab_congress_predict <- tab_congress_predict[c(-6, -26, -28, -29, -30, -31, -32)]#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
#
sink()#
Table(tab_plan_summary,#
    path = "Tables/_tab_summaries.tex",#
    caption = plan_summary.caption,#
    label = plan_summary.label,#
    footnote = plan_summary.footnote)#
#
Table(congsum.tmp.tex,#
    path = "Tables/_tab_congsum.tex",#
    caption = congsum.caption,#
    label = congsum.label,#
    footnote = congsum.footnote)#
#
Table(tab_gerry, #
    path = "Tables/_tab_gerry.tex", #
    caption = gerry.caption,#
    label = gerry.label, #
    footnote = gerry.footnote)#
#
Table(tab_prop,#
    path = "Tables/_tab_prob.tex",#
    caption = prop.caption,#
    label = prop.label, #
    footnote = prop.footnote,#
    landscape = TRUE)#
#
Table(district_summary,#
    caption = district_summary.caption,#
    label = district_summary.label,#
    footnote = district_summary.footnote#
    )#
#
Table(tab_congress_predict,#
    caption = congress_predict.caption,#
    label = congress_predict.label,#
    footnote = congress_predict.footnote)#
cat("#
•••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n#
    ")
congsum.tmp.tex
tab_prop.gen <- #
    cbind.data.frame(#
        ptab("enacted"),#
        ptab("joint"),#
        ptab("govwolf"),#
        ptab("court")#
        )
colnames(tab_prop.gen) <- c(plan_names)
rownames(tab_prop.gen) <- c(#
        "Mean Seat Share",#
        "SDS", #
        "Median Seat Share",#
        "Probability Republican Majority",#
        "Probability Democratic Majority",#
        "Probability Tied Delegation")
tab_prop.gen
gerry.table.gen <- #
    cbind.data.frame(#
        gtab("enacted"),#
        gtab("joint"),#
        gtab("govwolf"),#
        gtab("court")#
        )
colnames(gerry.table.gen) <- c(plan_names)
rownames(gerry.table.gen) <- c(#
        "Partisan Bias", #
        "SD1",#
        "Efficiency Gap",#
        "SD2",#
        "Mean/Median",#
        "SD3",#
        "Declination",#
        "SD4")
gerry.table.gen
maps.sims.seats.5050
enacted.sims.5050
p <- enacted.sims.5050
s.tmp <- maps.sims.seats.5050[["enacted"]]
v.tmp <- maps.sims.votes.5050[["enacted"]]
###########################################################################################################
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ──╔╦═══╦═╗─╔╦═══╦════╦╗─╔╦═══╦═╗─╔╗#
# ──║║╔═╗║║╚╗║║╔═╗║╔╗╔╗║║─║║╔═╗║║╚╗║║#
# ──║║║─║║╔╗╚╝║║─║╠╝║║╚╣╚═╝║║─║║╔╗╚╝║#
# ╔╗║║║─║║║╚╗║║╚═╝║─║║─║╔═╗║╚═╝║║╚╗║║#
# ║╚╝║╚═╝║║─║║║╔═╗║─║║─║║─║║╔═╗║║─║║║#
# ╚══╩═══╩╝─╚═╩╝─╚╝─╚╝─╚╝─╚╩╝─╚╩╝─╚═╝#
#         ╔═══╦═══╦═══╦╗──╔╦═══╦═══╗#
#         ║╔═╗║╔══╣╔═╗║╚╗╔╝║╔═╗║╔═╗║#
#         ║║─╚╣╚══╣╚═╝╠╗║║╔╣║─║║╚══╗#
#         ║║─╔╣╔══╣╔╗╔╝║╚╝║║╚═╝╠══╗║#
#         ║╚═╝║╚══╣║║╚╗╚╗╔╝║╔═╗║╚═╝║#
#         ╚═══╩═══╩╝╚═╝─╚╝─╚╝─╚╩═══╝#
### Code to Replicate "Tools for Identifying Partisan Gerrymandering"#
# 🅙🅞🅝🅐🅣🅗🅐🅝 🅡. 🅒🅔🅡🅥🅐🅢, University of California Irvine#
# 🅑🅔🅡🅝🅐🅡🅓 🅖🅡🅞🅕🅜🅐🅝, University of California Irvine#
### Note: #
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
###########################################################################################################
    rm(list=ls(all=TRUE))   # Remove all objects just to be safe.#
    options(scipen=999)     # Turn off Scientific Notation#
    options(stringsAsFactors = FALSE)#
    doInstall <- F#
setwd("/Users/cervas/Google Drive/Papers/Tools for Identifying a Partisan Gerrymander/PA_LWV")  # Main directory#
source("R/license.R")    #
seed <- 66#
set.seed(seed)#
              # Change to FALSE if you don't want packages installed.#
  projection <- "+proj=lcc +lat_1=40.96666666666667 +lat_2=39.93333333333333 +lat_0=39.33333333333334 +lon_0=-77.75 +x_0=600000 +y_0=0 +ellps=GRS80 +datum=NAD83 +to_meter=0.3048006096012192 +no_defs"#
# https://spatialreference.org/ref/epsg/nad83-pennsylvania-south-ftus/#
  projection <- "+init=epsg:4269"#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
  plan_names <- #
    c(#
      "2011 Enacted",#
      "Joint Legislative",#
      "Gov. Wolf",#
      "2018 Court Remedial")#
  plans <- #
    c("enacted2011", #
        "joint", #
        "govwolf",#
        "court")#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# =================================================================#
# -- FUNCTIONS -- -- FUNCTIONS -- -- FUNCTIONS -- -- FUNCTIONS  -- #
# =================================================================#
    source("R/GERRYfunctions.R")#
    source("/Users/cervas/Google Drive/School/UCI/R Functions/seatsvotes.R")#
# =================================================================#
# -- DATA -- -- DATA -- -- DATA -- -- DATA  -- -- DATA  -- -- DATA #
# =================================================================#
    source("R/PA_Congressional_Data.R")#
    pa.redist.dta <- read.csv("./_data/pa_redist_shp.csv")#
    source("R/DataSetup.R") #
# ================================================================= ##
# -- TOOLS FOR IDENTIFYING PARTISAN  GERRYMANDERING -- ANALYSIS -- -##
# ================================================================= #        #
    source("R/Simulations.R")#
    source("R/GIS.R")#
    source("R/Tables.R")#
    source("R/Plots.R")
prop.caption = "Probabilistic Projections of Partisan Outcomes for Four Plans at 50\\% Vote-Share"
prop.label = "tab:prob"
prop.footnote = "Using a Composite of Five Statewide Elections (adjusted to a 50\\% Vote Share) but not correcting for incumbency."
tab_prop.tex <- stargazer(tab_prop.gen,#
    style = "apsr", #
    summary=F,#
    column.sep.width = "-5pt", #
    float = T, #
    header = FALSE,#
    multicolumn = TRUE, #
    title= prop.caption, #
    label= prop.label,#
    notes = prop.footnote)
tab_prop <- tab_prop.tex[c(-6, -15, -16, -17, -18)]
Table(tab_prop,#
    path = "Tables/_tab_prob.tex",#
    caption = prop.caption,#
    label = prop.label, #
    footnote = prop.footnote,#
    landscape = TRUE)
tab_prop.gen <- #
    cbind.data.frame(#
        ptab("enacted"),#
        ptab("joint"),#
        ptab("govwolf"),#
        ptab("court")#
        )#
    colnames(tab_prop.gen) <- c(plan_names)#
    rownames(tab_prop.gen) <- c(#
        "Mean Seat Share",#
        "SDS", #
        "Median Seat Share",#
        "Probability Republican Majority",#
        "Probability Democratic Majority",#
        "Probability Tied Delegation")#
#
prop.caption = "Probabilistic Projections of Partisan Outcomes for Four Plans at 50\\% Vote-Share"#
prop.label = "tab:prob"#
prop.footnote = "Using a Composite of Five Statewide Elections (adjusted to a 50\\% Vote Share) but not correcting for incumbency. We report the mean seat-share from 1,000 simulations, along with a 95\\% range of the simulated outcomes."#
#
tab_prop.tex <- stargazer(tab_prop.gen,#
    style = "apsr", #
    summary=F,#
    column.sep.width = "-5pt", #
    float = T, #
    header = FALSE,#
    multicolumn = TRUE, #
    title= prop.caption, #
    label= prop.label,#
    notes = prop.footnote)#
tab_prop <- tab_prop.tex[c(-6, -15, -16, -17, -18)]
Table(tab_prop,#
    path = "Tables/_tab_prob.tex",#
    caption = prop.caption,#
    label = prop.label, #
    footnote = prop.footnote,#
    landscape = TRUE)
###########################################################################################################
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ──╔╦═══╦═╗─╔╦═══╦════╦╗─╔╦═══╦═╗─╔╗#
# ──║║╔═╗║║╚╗║║╔═╗║╔╗╔╗║║─║║╔═╗║║╚╗║║#
# ──║║║─║║╔╗╚╝║║─║╠╝║║╚╣╚═╝║║─║║╔╗╚╝║#
# ╔╗║║║─║║║╚╗║║╚═╝║─║║─║╔═╗║╚═╝║║╚╗║║#
# ║╚╝║╚═╝║║─║║║╔═╗║─║║─║║─║║╔═╗║║─║║║#
# ╚══╩═══╩╝─╚═╩╝─╚╝─╚╝─╚╝─╚╩╝─╚╩╝─╚═╝#
#         ╔═══╦═══╦═══╦╗──╔╦═══╦═══╗#
#         ║╔═╗║╔══╣╔═╗║╚╗╔╝║╔═╗║╔═╗║#
#         ║║─╚╣╚══╣╚═╝╠╗║║╔╣║─║║╚══╗#
#         ║║─╔╣╔══╣╔╗╔╝║╚╝║║╚═╝╠══╗║#
#         ║╚═╝║╚══╣║║╚╗╚╗╔╝║╔═╗║╚═╝║#
#         ╚═══╩═══╩╝╚═╝─╚╝─╚╝─╚╩═══╝#
### Code to Replicate "Tools for Identifying Partisan Gerrymandering"#
# 🅙🅞🅝🅐🅣🅗🅐🅝 🅡. 🅒🅔🅡🅥🅐🅢, University of California Irvine#
# 🅑🅔🅡🅝🅐🅡🅓 🅖🅡🅞🅕🅜🅐🅝, University of California Irvine#
### Note: #
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
###########################################################################################################
    rm(list=ls(all=TRUE))   # Remove all objects just to be safe.#
    options(scipen=999)     # Turn off Scientific Notation#
    options(stringsAsFactors = FALSE)#
    doInstall <- F#
setwd("/Users/cervas/Google Drive/Papers/Tools for Identifying a Partisan Gerrymander/PA_LWV")  # Main directory#
source("R/license.R")    #
seed <- 66#
set.seed(seed)#
              # Change to FALSE if you don't want packages installed.#
  projection <- "+proj=lcc +lat_1=40.96666666666667 +lat_2=39.93333333333333 +lat_0=39.33333333333334 +lon_0=-77.75 +x_0=600000 +y_0=0 +ellps=GRS80 +datum=NAD83 +to_meter=0.3048006096012192 +no_defs"#
# https://spatialreference.org/ref/epsg/nad83-pennsylvania-south-ftus/#
  projection <- "+init=epsg:4269"#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
  plan_names <- #
    c(#
      "2011 Enacted",#
      "Joint Legislative",#
      "Gov. Wolf",#
      "2018 Court Remedial")#
  plans <- #
    c("enacted2011", #
        "joint", #
        "govwolf",#
        "court")#
# •••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# =================================================================#
# -- FUNCTIONS -- -- FUNCTIONS -- -- FUNCTIONS -- -- FUNCTIONS  -- #
# =================================================================#
    source("R/GERRYfunctions.R")#
    source("/Users/cervas/Google Drive/School/UCI/R Functions/seatsvotes.R")#
# =================================================================#
# -- DATA -- -- DATA -- -- DATA -- -- DATA  -- -- DATA  -- -- DATA #
# =================================================================#
    source("R/PA_Congressional_Data.R")#
    pa.redist.dta <- read.csv("./_data/pa_redist_shp.csv")#
    source("R/DataSetup.R") #
# ================================================================= ##
# -- TOOLS FOR IDENTIFYING PARTISAN  GERRYMANDERING -- ANALYSIS -- -##
# ================================================================= #        #
    source("R/Simulations.R")#
    source("R/GIS.R")#
    source("R/Tables.R")#
    source("R/Plots.R")
library(foreign)#
# library(visreg)#
library(stargazer)#
greycol <- rgb(red = 190, green = 190, blue = 190, alpha = 170, maxColorValue = 255)#
#
source("/Users/cervas/Google Drive/School/UCI/R Functions/weighted.confint.R")#
cmps <- read.dta("/Users/cervas/Google Drive/Data/CMPS/2016/CMPSclean.dta", convert.factors=FALSE)
#For Analyses that only include citizen respondents#
cmps.citizen <- cmps[cmps$citizen==1,]#
#
#Create subsets for the Racial Groups#
cmps.white <- cmps.citizen[cmps.citizen$ethnic_quota == "White",]#
cmps.hispanic <- cmps.citizen[cmps.citizen$ethnic_quota=="Hispanic",]#
cmps.black <- cmps.citizen[cmps.citizen$ethnic_quota=="Black",]#
cmps.asian <- cmps.citizen[cmps.citizen$ethnic_quota=="Asian",]#
base.form <- formula(. ~ age + age70 + female + faminc + educ + pidS + leader)#
    pdf("/Users/jcervas/Desktop/NormVotingLogitPredicitonsJune1.pdf", width=14, height=10)#
    par(mfrow=c(3,4), oma= c(3,1.5,0,0), mar=c(2,2,3,1), mgp= c(2,1,0))#
datasource <- list(cmps.white, cmps.black, cmps.hispanic, cmps.asian)#
variable <- c("normvote", "normdonating", "normprotest", "normsocialmedia", "normcontact", "normproblemsolving")#
DV <- c("vote", "donating", "protest", "socialmedia", "contact", "problemsolving")#
DVt <- c("Voting", "Donating", "Protesting", "Social Media Usage", "Contacting Officials", "Problem Solving w/ Community")#
race <- c("White", "Black", "Hispanic", "Asian")#
ivlist <- c("constant", toString(variable[t]), "age" , "age70" , "female" ,"educ" , "pidS", "faminc",  "leader")
dev.off()
par(mfrow=c(3,4), oma= c(3,1.5,0,0), mar=c(2,2,3,1), mgp= c(2,1,0))
datasource <- list(cmps.white, cmps.black, cmps.hispanic, cmps.asian)
variable <- c("normvote", "normdonating", "normprotest", "normsocialmedia", "normcontact", "normproblemsolving")
DV <- c("vote", "donating", "protest", "socialmedia", "contact", "problemsolving")
DVt <- c("Voting", "Donating", "Protesting", "Social Media Usage", "Contacting Officials", "Problem Solving w/ Community")
race <- c("White", "Black", "Hispanic", "Asian")
ivlist <- c("constant", toString(variable[t]), "age" , "age70" , "female" ,"educ" , "pidS", "faminc",  "leader")
PredictedProbabilities <- list()#
WeightedMeans <- list()#
probs <- matrix(NA, nrow=length(race), ncol=4)#
w.means <- matrix(NA, nrow=length(race), ncol=4)#
rownames(probs) <- race#
colnames(probs) <- c(0,1,2,3)#
rownames(w.means) <- race#
colnames(w.means) <- c(0,1,2,3)#
for (t in 1:length(DV)){#
for (j in 1:length(datasource)){#
  f1 <- glm(update(base.form, paste0(DV[t], "~ ", variable[t], "+ .")), weight=weight, data=datasource[[j]], family="binomial", na.action=na.omit)#
intervals <- seq(min(datasource[[j]][,variable[t]], na.rm=TRUE) , max(datasource[[j]][,variable[t]], na.rm=TRUE) , 0.01)#
intmeans <- seq(min(datasource[[j]][,variable[t]], na.rm=TRUE), max(datasource[[j]][,variable[t]], na.rm=TRUE), 0.01)#
#
inputs <- list()#
carole <- matrix(NA, nrow=length(intervals), ncol = 3)#
colnames(carole) <- c("low", "point", "high")#
rownames(carole) <- intervals#
for (i in 1:length(intervals)) {#
    int <- intervals[i]#
inputs[[i]] <- datasource[[j]]#
inputs[[i]][, variable[t]] <- int#
    a <- predict(f1, newdata=inputs[[i]], se.fit = TRUE, type = "link")#
    carole[i,"high"] <- weighted.mean(plogis(a$fit+a$se.fit*1.96), datasource[[j]][, "weight"], na.rm=TRUE)#
    carole[i,"low"]<- weighted.mean(plogis(a$fit-a$se.fit*1.96), datasource[[j]][, "weight"], na.rm=TRUE)#
    carole[i,"point"] <- weighted.mean(plogis(a$fit), datasource[[j]][, "weight"], na.rm=TRUE)#
#
if (int %in% c(0,1,2,3)) { #
    probs[j, toString(int)] <- carole[i,"point"]#
    w.means[j,toString(int)] <- weighted.mean(datasource[[j]][,DV[t]][datasource[[j]][,variable[t]]== int], datasource[[j]][, "weight"][datasource[[j]][,variable[t]]== int], na.rm=TRUE)#
    }#
if (int==3){ #
    PredictedProbabilities[[t]] <- probs#
    WeightedMeans[[t]] <-  w.means#
    }#
### At Means #
meansinputs <- as.data.frame(cbind(constant=1, v = intmeans, age=weighted.mean(datasource[[j]][,"age"], datasource[[j]][,"weight"],na.rm=TRUE), age70=weighted.mean(datasource[[j]][,"age70"], datasource[[j]][,"weight"],na.rm=TRUE), female=weighted.mean(datasource[[j]][,"female"],datasource[[j]][,"weight"],na.rm=TRUE), educ=weighted.mean(datasource[[j]][,"educ"],datasource[[j]][,"weight"],na.rm=TRUE), pidS=weighted.mean(datasource[[j]][,"pidS"],datasource[[j]][,"weight"],na.rm=TRUE), faminc=weighted.mean(datasource[[j]][,"faminc"],datasource[[j]][,"weight"],na.rm=TRUE), leader=weighted.mean(datasource[[j]][,"leader"],datasource[[j]][,"weight"],na.rm=TRUE)))#
colnames(meansinputs)[colnames(meansinputs)=="v"] <- variable[t]#
### At Means ^^^
if (int == max(intervals) ){ #
    plot(intervals,carole[,"point"], type="n", lwd=2, lty=1, ylim=c(0,1), yaxt="n", xaxt="n", bty="n", ylab="", xlab="", main=paste0(race[j], " Respondents"))#
#
abline(h=seq(0,1,.2), lty=2, col="gray80", cex=0.85)#
if (j==1){ mtext(side=2, line=2, paste0("P(",DVt[t], ")"), cex=0.65) }#
    lines(intervals,carole[,"point"])#
    polygon(x= c(intervals, rev(intervals)),  y= c(carole[,"high"], rev(carole[,"low"])), col=greycol, border=NA)#
    # lines(intervals, carole[,"low"], lty=3, col="gray70")#
    # lines(intervals, carole[,"high"], lty=3, col="gray70")#
    lines(intmeans, plogis(predict(f1, newdata=meansinputs, type="link")), lwd=2, col="gray20")#
    legend("topleft", legend=c(#
    paste0("constant =", round(coef(f1)[1],digits=2), " (", round(coef(summary(f1))[1,2], digits=2), ")"), #
    paste0(toString(variable[t])," =", round(coef(f1)[2],digits=2), " (", round(coef(summary(f1))[2,2], digits=2), ")"), #
    paste0("Age =", round(coef(f1)[3],digits=2), " (", round(coef(summary(f1))[3,2], digits=2), ")") , #
    paste0("Age > 70 =", round(coef(f1)[4], digits=2), " (",  round(coef(summary(f1))[4,2], digits=2), ")"), #
    paste0("Female =", round(coef(f1)[5],digits=2), " (",  round(coef(summary(f1))[5,2], digits=2), ")") ,#
    paste0("Education Level =", round(coef(f1)[6],digits=2), " (",  round(coef(summary(f1))[6,2], digits=2), ")") ,#
    paste0("PIDs =", round(coef(f1)[7],digits=2), " (",  round(coef(summary(f1))[7,2], digits=2), ")"), #
    paste0("Income =", round(coef(f1)[8],digits=2), " (",  round(coef(summary(f1))[8,2], digits=2), ")"),  #
    paste0("Represented by Leader =", round(coef(f1)[9],digits=2), " (",  round(coef(summary(f1))[9,2], digits=2), ")")),#
    cex=.85, box.col = "white", xjust = .5, yjust = 1, bg = "white")#
    axis(side=2, las=1, cex.axis=0.65)#
    axis(side=1, at=c(0,3), labels=c("Lowest Norms", "Highest Norms"), cex.axis=0.65)#
     }#
}
}#
}#
dev.off()#
names(PredictedProbabilities) <- DVt#
names(WeightedMeans) <- DVt
library(foreign)#
library(visreg)#
library(stargazer)#
greycol <- rgb(red = 190, green = 190, blue = 190, alpha = 170, maxColorValue = 255)#
#
source("/Users/cervas/Google Drive/School/UCI/R Functions/weighted.confint.R")#
cmps <- read.dta("/Users/cervas/Desktop/CMPSgraphs/CMPSclean.dta", convert.factors=FALSE)
cmps <- read.dta("/Users/cervas/Google Drive/School/UCI/Side Projects/CMPSgraphs/CMPSclean.dta", convert.factors=FALSE)
#For Analyses that only include citizen respondents#
cmps.citizen <- cmps[cmps$citizen==1,]#
#
#Create subsets for the Racial Groups#
cmps.white <- cmps.citizen[cmps.citizen$ethnic_quota=="White",]#
cmps.hispanic <- cmps.citizen[cmps.citizen$ethnic_quota=="Hispanic",]#
cmps.black <- cmps.citizen[cmps.citizen$ethnic_quota=="Black",]#
cmps.asian <- cmps.citizen[cmps.citizen$ethnic_quota=="Asian",]#
#
base.form <- formula(. ~ age + age70 + female + faminc + educ + pidS + leader)#
#
# as.vector(by(datasource[[j]], datasource[[j]][,variable[t]], function(z) weighted.mean(z$vote, z$weight)))
par(mfrow=c(3,4), oma= c(3,1.5,0,0), mar=c(2,2,3,1), mgp= c(2,1,0))#
datasource <- list(cmps.white, cmps.black, cmps.hispanic, cmps.asian)#
variable <- c("normvote", "normdonating", "normprotest", "normsocialmedia", "normcontact", "normproblemsolving")#
DV <- c("vote", "donating", "protest", "socialmedia", "contact", "problemsolving")#
DVt <- c("Voting", "Donating", "Protesting", "Social Media Usage", "Contacting Officials", "Problem Solving w/ Community")#
race <- c("White", "Black", "Hispanic", "Asian")#
ivlist <- c("constant", toString(variable[t]), "age" , "age70" , "female" ,"educ" , "pidS", "faminc",  "leader")#
#
PredictedProbabilities <- list()#
WeightedMeans <- list()#
probs <- matrix(NA, nrow=length(race), ncol=4)#
w.means <- matrix(NA, nrow=length(race), ncol=4)#
rownames(probs) <- race#
colnames(probs) <- c(0,1,2,3)#
rownames(w.means) <- race#
colnames(w.means) <- c(0,1,2,3)#
for (t in 1:length(DV)){#
for (j in 1:length(datasource)){#
  f1 <- glm(update(base.form, paste0(DV[t], "~ ", variable[t], "+ .")), weight=weight, data=datasource[[j]], family="binomial", na.action=na.omit)#
intervals <- seq(min(datasource[[j]][,variable[t]], na.rm=TRUE) , max(datasource[[j]][,variable[t]], na.rm=TRUE) , .01)#
intmeans <- seq(min(datasource[[j]][,variable[t]], na.rm=TRUE), max(datasource[[j]][,variable[t]], na.rm=TRUE), .01)#
#
inputs <- list()#
carole <- matrix(NA, nrow=length(intervals), ncol=3)#
colnames(carole) <- c("low", "point", "high")#
rownames(carole) <- intervals#
for (i in 1:length(intervals)) {#
    int <- intervals[i]#
inputs[[i]] <- datasource[[j]]#
inputs[[i]][, variable[t]] <- int#
    a <- predict(f1, newdata=inputs[[i]], se.fit=TRUE, type="link")#
    carole[i,"high"] <- weighted.mean(plogis(a$fit+a$se.fit*1.96), datasource[[j]][, "weight"], na.rm=TRUE)#
    carole[i,"low"]<- weighted.mean(plogis(a$fit-a$se.fit*1.96), datasource[[j]][, "weight"], na.rm=TRUE)#
    carole[i,"point"] <- weighted.mean(plogis(a$fit), datasource[[j]][, "weight"], na.rm=TRUE)#
#
if (int %in% c(0,1,2,3)) { #
    probs[j, toString(int)] <- carole[i,"point"]#
    w.means[j,toString(int)] <- weighted.mean(datasource[[j]][,DV[t]][datasource[[j]][,variable[t]]== int], datasource[[j]][, "weight"][datasource[[j]][,variable[t]]== int], na.rm=TRUE)#
    }#
if (int==3){ #
    PredictedProbabilities[[t]] <- probs#
    WeightedMeans[[t]] <-  w.means#
    }#
### At Means #
meansinputs <- as.data.frame(cbind(constant=1, v = intmeans, age=weighted.mean(datasource[[j]][,"age"], datasource[[j]][,"weight"],na.rm=TRUE), age70=weighted.mean(datasource[[j]][,"age70"], datasource[[j]][,"weight"],na.rm=TRUE), female=weighted.mean(datasource[[j]][,"female"],datasource[[j]][,"weight"],na.rm=TRUE), educ=weighted.mean(datasource[[j]][,"educ"],datasource[[j]][,"weight"],na.rm=TRUE), pidS=weighted.mean(datasource[[j]][,"pidS"],datasource[[j]][,"weight"],na.rm=TRUE), faminc=weighted.mean(datasource[[j]][,"faminc"],datasource[[j]][,"weight"],na.rm=TRUE), leader=weighted.mean(datasource[[j]][,"leader"],datasource[[j]][,"weight"],na.rm=TRUE)))#
colnames(meansinputs)[colnames(meansinputs)=="v"] <- variable[t]#
### At Means ^^^#
#
if (int == max(intervals) ){ #
    plot(intervals,carole[,"point"], type="n", lwd=2, lty=1, ylim=c(0,1), yaxt="n", xaxt="n", bty="n", ylab="", xlab="", main=paste0(race[j], " Respondents"))#
#
abline(h=seq(0,1,.2), lty=2, col="gray80", cex=0.85)#
if (j==1){ mtext(side=2, line=2, paste0("P(",DVt[t], ")"), cex=0.65) }#
    lines(intervals,carole[,"point"])#
    polygon(x= c(intervals, rev(intervals)),  y= c(carole[,"high"], rev(carole[,"low"])), col=greycol, border=NA)#
    # lines(intervals, carole[,"low"], lty=3, col="gray70")#
    # lines(intervals, carole[,"high"], lty=3, col="gray70")#
    lines(intmeans, plogis(predict(f1, newdata=meansinputs, type="link")), lwd=2, col="gray20")#
    legend("topleft", legend=c(#
    paste0("constant =", round(coef(f1)[1],digits=2), " (", round(coef(summary(f1))[1,2], digits=2), ")"), #
    paste0(toString(variable[t])," =", round(coef(f1)[2],digits=2), " (", round(coef(summary(f1))[2,2], digits=2), ")"), #
    paste0("Age =", round(coef(f1)[3],digits=2), " (", round(coef(summary(f1))[3,2], digits=2), ")") , #
    paste0("Age > 70 =", round(coef(f1)[4], digits=2), " (",  round(coef(summary(f1))[4,2], digits=2), ")"), #
    paste0("Female =", round(coef(f1)[5],digits=2), " (",  round(coef(summary(f1))[5,2], digits=2), ")") ,#
    paste0("Education Level =", round(coef(f1)[6],digits=2), " (",  round(coef(summary(f1))[6,2], digits=2), ")") ,#
    paste0("PIDs =", round(coef(f1)[7],digits=2), " (",  round(coef(summary(f1))[7,2], digits=2), ")"), #
    paste0("Income =", round(coef(f1)[8],digits=2), " (",  round(coef(summary(f1))[8,2], digits=2), ")"),  #
    paste0("Represented by Leader =", round(coef(f1)[9],digits=2), " (",  round(coef(summary(f1))[9,2], digits=2), ")")),#
    cex=.85, box.col = "white", xjust = .5, yjust = 1, bg = "white")#
    axis(side=2, las=1, cex.axis=0.65)#
    axis(side=1, at=c(0,3), labels=c("Lowest Norms", "Highest Norms"), cex.axis=0.65)#
     }#
}#
#
}#
}
cmps <- read.dta("/Users/cervas/Google Drive/Data/CMPS/2016/CMPSclean.dta", convert.factors=FALSE)
#For Analyses that only include citizen respondents#
cmps.citizen <- cmps[cmps$citizen==1,]#
#
#Create subsets for the Racial Groups#
cmps.white <- cmps.citizen[cmps.citizen$ethnic_quota=="White",]#
cmps.hispanic <- cmps.citizen[cmps.citizen$ethnic_quota=="Hispanic",]#
cmps.black <- cmps.citizen[cmps.citizen$ethnic_quota=="Black",]#
cmps.asian <- cmps.citizen[cmps.citizen$ethnic_quota=="Asian",]#
#
base.form <- formula(. ~ age + age70 + female + faminc + educ + pidS + leader)#
#
# as.vector(by(datasource[[j]], datasource[[j]][,variable[t]], function(z) weighted.mean(z$vote, z$weight)))
par(mfrow=c(3,4), oma= c(3,1.5,0,0), mar=c(2,2,3,1), mgp= c(2,1,0))#
datasource <- list(cmps.white, cmps.black, cmps.hispanic, cmps.asian)#
variable <- c("normvote", "normdonating", "normprotest", "normsocialmedia", "normcontact", "normproblemsolving")#
DV <- c("vote", "donating", "protest", "socialmedia", "contact", "problemsolving")#
DVt <- c("Voting", "Donating", "Protesting", "Social Media Usage", "Contacting Officials", "Problem Solving w/ Community")#
race <- c("White", "Black", "Hispanic", "Asian")#
ivlist <- c("constant", toString(variable[t]), "age" , "age70" , "female" ,"educ" , "pidS", "faminc",  "leader")#
#
PredictedProbabilities <- list()#
WeightedMeans <- list()#
probs <- matrix(NA, nrow=length(race), ncol=4)#
w.means <- matrix(NA, nrow=length(race), ncol=4)#
rownames(probs) <- race#
colnames(probs) <- c(0,1,2,3)#
rownames(w.means) <- race#
colnames(w.means) <- c(0,1,2,3)#
for (t in 1:length(DV)){#
for (j in 1:length(datasource)){#
  f1 <- glm(update(base.form, paste0(DV[t], "~ ", variable[t], "+ .")), weight=weight, data=datasource[[j]], family="binomial", na.action=na.omit)#
intervals <- seq(min(datasource[[j]][,variable[t]], na.rm=TRUE) , max(datasource[[j]][,variable[t]], na.rm=TRUE) , .01)#
intmeans <- seq(min(datasource[[j]][,variable[t]], na.rm=TRUE), max(datasource[[j]][,variable[t]], na.rm=TRUE), .01)#
#
inputs <- list()#
carole <- matrix(NA, nrow=length(intervals), ncol=3)#
colnames(carole) <- c("low", "point", "high")#
rownames(carole) <- intervals#
for (i in 1:length(intervals)) {#
    int <- intervals[i]#
inputs[[i]] <- datasource[[j]]#
inputs[[i]][, variable[t]] <- int#
    a <- predict(f1, newdata=inputs[[i]], se.fit=TRUE, type="link")#
    carole[i,"high"] <- weighted.mean(plogis(a$fit+a$se.fit*1.96), datasource[[j]][, "weight"], na.rm=TRUE)#
    carole[i,"low"]<- weighted.mean(plogis(a$fit-a$se.fit*1.96), datasource[[j]][, "weight"], na.rm=TRUE)#
    carole[i,"point"] <- weighted.mean(plogis(a$fit), datasource[[j]][, "weight"], na.rm=TRUE)#
#
if (int %in% c(0,1,2,3)) { #
    probs[j, toString(int)] <- carole[i,"point"]#
    w.means[j,toString(int)] <- weighted.mean(datasource[[j]][,DV[t]][datasource[[j]][,variable[t]]== int], datasource[[j]][, "weight"][datasource[[j]][,variable[t]]== int], na.rm=TRUE)#
    }#
if (int==3){ #
    PredictedProbabilities[[t]] <- probs#
    WeightedMeans[[t]] <-  w.means#
    }#
### At Means #
meansinputs <- as.data.frame(cbind(constant=1, v = intmeans, age=weighted.mean(datasource[[j]][,"age"], datasource[[j]][,"weight"],na.rm=TRUE), age70=weighted.mean(datasource[[j]][,"age70"], datasource[[j]][,"weight"],na.rm=TRUE), female=weighted.mean(datasource[[j]][,"female"],datasource[[j]][,"weight"],na.rm=TRUE), educ=weighted.mean(datasource[[j]][,"educ"],datasource[[j]][,"weight"],na.rm=TRUE), pidS=weighted.mean(datasource[[j]][,"pidS"],datasource[[j]][,"weight"],na.rm=TRUE), faminc=weighted.mean(datasource[[j]][,"faminc"],datasource[[j]][,"weight"],na.rm=TRUE), leader=weighted.mean(datasource[[j]][,"leader"],datasource[[j]][,"weight"],na.rm=TRUE)))#
colnames(meansinputs)[colnames(meansinputs)=="v"] <- variable[t]#
### At Means ^^^#
#
if (int == max(intervals) ){ #
    plot(intervals,carole[,"point"], type="n", lwd=2, lty=1, ylim=c(0,1), yaxt="n", xaxt="n", bty="n", ylab="", xlab="", main=paste0(race[j], " Respondents"))#
#
abline(h=seq(0,1,.2), lty=2, col="gray80", cex=0.85)#
if (j==1){ mtext(side=2, line=2, paste0("P(",DVt[t], ")"), cex=0.65) }#
    lines(intervals,carole[,"point"])#
    polygon(x= c(intervals, rev(intervals)),  y= c(carole[,"high"], rev(carole[,"low"])), col=greycol, border=NA)#
    # lines(intervals, carole[,"low"], lty=3, col="gray70")#
    # lines(intervals, carole[,"high"], lty=3, col="gray70")#
    lines(intmeans, plogis(predict(f1, newdata=meansinputs, type="link")), lwd=2, col="gray20")#
    legend("topleft", legend=c(#
    paste0("constant =", round(coef(f1)[1],digits=2), " (", round(coef(summary(f1))[1,2], digits=2), ")"), #
    paste0(toString(variable[t])," =", round(coef(f1)[2],digits=2), " (", round(coef(summary(f1))[2,2], digits=2), ")"), #
    paste0("Age =", round(coef(f1)[3],digits=2), " (", round(coef(summary(f1))[3,2], digits=2), ")") , #
    paste0("Age > 70 =", round(coef(f1)[4], digits=2), " (",  round(coef(summary(f1))[4,2], digits=2), ")"), #
    paste0("Female =", round(coef(f1)[5],digits=2), " (",  round(coef(summary(f1))[5,2], digits=2), ")") ,#
    paste0("Education Level =", round(coef(f1)[6],digits=2), " (",  round(coef(summary(f1))[6,2], digits=2), ")") ,#
    paste0("PIDs =", round(coef(f1)[7],digits=2), " (",  round(coef(summary(f1))[7,2], digits=2), ")"), #
    paste0("Income =", round(coef(f1)[8],digits=2), " (",  round(coef(summary(f1))[8,2], digits=2), ")"),  #
    paste0("Represented by Leader =", round(coef(f1)[9],digits=2), " (",  round(coef(summary(f1))[9,2], digits=2), ")")),#
    cex=.85, box.col = "white", xjust = .5, yjust = 1, bg = "white")#
    axis(side=2, las=1, cex.axis=0.65)#
    axis(side=1, at=c(0,3), labels=c("Lowest Norms", "Highest Norms"), cex.axis=0.65)#
     }#
}#
#
}#
}
cmps$pidS <- NA
#For Analyses that only include citizen respondents#
cmps.citizen <- cmps[cmps$citizen==1,]#
#
#Create subsets for the Racial Groups#
cmps.white <- cmps.citizen[cmps.citizen$ethnic_quota=="White",]#
cmps.hispanic <- cmps.citizen[cmps.citizen$ethnic_quota=="Hispanic",]#
cmps.black <- cmps.citizen[cmps.citizen$ethnic_quota=="Black",]#
cmps.asian <- cmps.citizen[cmps.citizen$ethnic_quota=="Asian",]#
#
base.form <- formula(. ~ age + age70 + female + faminc + educ + pidS + leader)#
#
# as.vector(by(datasource[[j]], datasource[[j]][,variable[t]], function(z) weighted.mean(z$vote, z$weight)))
par(mfrow=c(3,4), oma= c(3,1.5,0,0), mar=c(2,2,3,1), mgp= c(2,1,0))#
datasource <- list(cmps.white, cmps.black, cmps.hispanic, cmps.asian)#
variable <- c("normvote", "normdonating", "normprotest", "normsocialmedia", "normcontact", "normproblemsolving")#
DV <- c("vote", "donating", "protest", "socialmedia", "contact", "problemsolving")#
DVt <- c("Voting", "Donating", "Protesting", "Social Media Usage", "Contacting Officials", "Problem Solving w/ Community")#
race <- c("White", "Black", "Hispanic", "Asian")#
ivlist <- c("constant", toString(variable[t]), "age" , "age70" , "female" ,"educ" , "pidS", "faminc",  "leader")#
#
PredictedProbabilities <- list()#
WeightedMeans <- list()#
probs <- matrix(NA, nrow=length(race), ncol=4)#
w.means <- matrix(NA, nrow=length(race), ncol=4)#
rownames(probs) <- race#
colnames(probs) <- c(0,1,2,3)#
rownames(w.means) <- race#
colnames(w.means) <- c(0,1,2,3)#
for (t in 1:length(DV)){#
for (j in 1:length(datasource)){#
  f1 <- glm(update(base.form, paste0(DV[t], "~ ", variable[t], "+ .")), weight=weight, data=datasource[[j]], family="binomial", na.action=na.omit)#
intervals <- seq(min(datasource[[j]][,variable[t]], na.rm=TRUE) , max(datasource[[j]][,variable[t]], na.rm=TRUE) , .01)#
intmeans <- seq(min(datasource[[j]][,variable[t]], na.rm=TRUE), max(datasource[[j]][,variable[t]], na.rm=TRUE), .01)#
#
inputs <- list()#
carole <- matrix(NA, nrow=length(intervals), ncol=3)#
colnames(carole) <- c("low", "point", "high")#
rownames(carole) <- intervals#
for (i in 1:length(intervals)) {#
    int <- intervals[i]#
inputs[[i]] <- datasource[[j]]#
inputs[[i]][, variable[t]] <- int#
    a <- predict(f1, newdata=inputs[[i]], se.fit=TRUE, type="link")#
    carole[i,"high"] <- weighted.mean(plogis(a$fit+a$se.fit*1.96), datasource[[j]][, "weight"], na.rm=TRUE)#
    carole[i,"low"]<- weighted.mean(plogis(a$fit-a$se.fit*1.96), datasource[[j]][, "weight"], na.rm=TRUE)#
    carole[i,"point"] <- weighted.mean(plogis(a$fit), datasource[[j]][, "weight"], na.rm=TRUE)#
#
if (int %in% c(0,1,2,3)) { #
    probs[j, toString(int)] <- carole[i,"point"]#
    w.means[j,toString(int)] <- weighted.mean(datasource[[j]][,DV[t]][datasource[[j]][,variable[t]]== int], datasource[[j]][, "weight"][datasource[[j]][,variable[t]]== int], na.rm=TRUE)#
    }#
if (int==3){ #
    PredictedProbabilities[[t]] <- probs#
    WeightedMeans[[t]] <-  w.means#
    }#
### At Means #
meansinputs <- as.data.frame(cbind(constant=1, v = intmeans, age=weighted.mean(datasource[[j]][,"age"], datasource[[j]][,"weight"],na.rm=TRUE), age70=weighted.mean(datasource[[j]][,"age70"], datasource[[j]][,"weight"],na.rm=TRUE), female=weighted.mean(datasource[[j]][,"female"],datasource[[j]][,"weight"],na.rm=TRUE), educ=weighted.mean(datasource[[j]][,"educ"],datasource[[j]][,"weight"],na.rm=TRUE), pidS=weighted.mean(datasource[[j]][,"pidS"],datasource[[j]][,"weight"],na.rm=TRUE), faminc=weighted.mean(datasource[[j]][,"faminc"],datasource[[j]][,"weight"],na.rm=TRUE), leader=weighted.mean(datasource[[j]][,"leader"],datasource[[j]][,"weight"],na.rm=TRUE)))#
colnames(meansinputs)[colnames(meansinputs)=="v"] <- variable[t]#
### At Means ^^^#
#
if (int == max(intervals) ){ #
    plot(intervals,carole[,"point"], type="n", lwd=2, lty=1, ylim=c(0,1), yaxt="n", xaxt="n", bty="n", ylab="", xlab="", main=paste0(race[j], " Respondents"))#
#
abline(h=seq(0,1,.2), lty=2, col="gray80", cex=0.85)#
if (j==1){ mtext(side=2, line=2, paste0("P(",DVt[t], ")"), cex=0.65) }#
    lines(intervals,carole[,"point"])#
    polygon(x= c(intervals, rev(intervals)),  y= c(carole[,"high"], rev(carole[,"low"])), col=greycol, border=NA)#
    # lines(intervals, carole[,"low"], lty=3, col="gray70")#
    # lines(intervals, carole[,"high"], lty=3, col="gray70")#
    lines(intmeans, plogis(predict(f1, newdata=meansinputs, type="link")), lwd=2, col="gray20")#
    legend("topleft", legend=c(#
    paste0("constant =", round(coef(f1)[1],digits=2), " (", round(coef(summary(f1))[1,2], digits=2), ")"), #
    paste0(toString(variable[t])," =", round(coef(f1)[2],digits=2), " (", round(coef(summary(f1))[2,2], digits=2), ")"), #
    paste0("Age =", round(coef(f1)[3],digits=2), " (", round(coef(summary(f1))[3,2], digits=2), ")") , #
    paste0("Age > 70 =", round(coef(f1)[4], digits=2), " (",  round(coef(summary(f1))[4,2], digits=2), ")"), #
    paste0("Female =", round(coef(f1)[5],digits=2), " (",  round(coef(summary(f1))[5,2], digits=2), ")") ,#
    paste0("Education Level =", round(coef(f1)[6],digits=2), " (",  round(coef(summary(f1))[6,2], digits=2), ")") ,#
    paste0("PIDs =", round(coef(f1)[7],digits=2), " (",  round(coef(summary(f1))[7,2], digits=2), ")"), #
    paste0("Income =", round(coef(f1)[8],digits=2), " (",  round(coef(summary(f1))[8,2], digits=2), ")"),  #
    paste0("Represented by Leader =", round(coef(f1)[9],digits=2), " (",  round(coef(summary(f1))[9,2], digits=2), ")")),#
    cex=.85, box.col = "white", xjust = .5, yjust = 1, bg = "white")#
    axis(side=2, las=1, cex.axis=0.65)#
    axis(side=1, at=c(0,3), labels=c("Lowest Norms", "Highest Norms"), cex.axis=0.65)#
     }#
}#
#
}#
}
cmps$pidS <- 0
#For Analyses that only include citizen respondents#
cmps.citizen <- cmps[cmps$citizen==1,]#
#
#Create subsets for the Racial Groups#
cmps.white <- cmps.citizen[cmps.citizen$ethnic_quota=="White",]#
cmps.hispanic <- cmps.citizen[cmps.citizen$ethnic_quota=="Hispanic",]#
cmps.black <- cmps.citizen[cmps.citizen$ethnic_quota=="Black",]#
cmps.asian <- cmps.citizen[cmps.citizen$ethnic_quota=="Asian",]#
#
base.form <- formula(. ~ age + age70 + female + faminc + educ + pidS + leader)#
#
# as.vector(by(datasource[[j]], datasource[[j]][,variable[t]], function(z) weighted.mean(z$vote, z$weight)))
par(mfrow=c(3,4), oma= c(3,1.5,0,0), mar=c(2,2,3,1), mgp= c(2,1,0))#
datasource <- list(cmps.white, cmps.black, cmps.hispanic, cmps.asian)#
variable <- c("normvote", "normdonating", "normprotest", "normsocialmedia", "normcontact", "normproblemsolving")#
DV <- c("vote", "donating", "protest", "socialmedia", "contact", "problemsolving")#
DVt <- c("Voting", "Donating", "Protesting", "Social Media Usage", "Contacting Officials", "Problem Solving w/ Community")#
race <- c("White", "Black", "Hispanic", "Asian")#
ivlist <- c("constant", toString(variable[t]), "age" , "age70" , "female" ,"educ" , "pidS", "faminc",  "leader")#
#
PredictedProbabilities <- list()#
WeightedMeans <- list()#
probs <- matrix(NA, nrow=length(race), ncol=4)#
w.means <- matrix(NA, nrow=length(race), ncol=4)#
rownames(probs) <- race#
colnames(probs) <- c(0,1,2,3)#
rownames(w.means) <- race#
colnames(w.means) <- c(0,1,2,3)#
for (t in 1:length(DV)){#
for (j in 1:length(datasource)){#
  f1 <- glm(update(base.form, paste0(DV[t], "~ ", variable[t], "+ .")), weight=weight, data=datasource[[j]], family="binomial", na.action=na.omit)#
intervals <- seq(min(datasource[[j]][,variable[t]], na.rm=TRUE) , max(datasource[[j]][,variable[t]], na.rm=TRUE) , .01)#
intmeans <- seq(min(datasource[[j]][,variable[t]], na.rm=TRUE), max(datasource[[j]][,variable[t]], na.rm=TRUE), .01)#
#
inputs <- list()#
carole <- matrix(NA, nrow=length(intervals), ncol=3)#
colnames(carole) <- c("low", "point", "high")#
rownames(carole) <- intervals#
for (i in 1:length(intervals)) {#
    int <- intervals[i]#
inputs[[i]] <- datasource[[j]]#
inputs[[i]][, variable[t]] <- int#
    a <- predict(f1, newdata=inputs[[i]], se.fit=TRUE, type="link")#
    carole[i,"high"] <- weighted.mean(plogis(a$fit+a$se.fit*1.96), datasource[[j]][, "weight"], na.rm=TRUE)#
    carole[i,"low"]<- weighted.mean(plogis(a$fit-a$se.fit*1.96), datasource[[j]][, "weight"], na.rm=TRUE)#
    carole[i,"point"] <- weighted.mean(plogis(a$fit), datasource[[j]][, "weight"], na.rm=TRUE)#
#
if (int %in% c(0,1,2,3)) { #
    probs[j, toString(int)] <- carole[i,"point"]#
    w.means[j,toString(int)] <- weighted.mean(datasource[[j]][,DV[t]][datasource[[j]][,variable[t]]== int], datasource[[j]][, "weight"][datasource[[j]][,variable[t]]== int], na.rm=TRUE)#
    }#
if (int==3){ #
    PredictedProbabilities[[t]] <- probs#
    WeightedMeans[[t]] <-  w.means#
    }#
### At Means #
meansinputs <- as.data.frame(cbind(constant=1, v = intmeans, age=weighted.mean(datasource[[j]][,"age"], datasource[[j]][,"weight"],na.rm=TRUE), age70=weighted.mean(datasource[[j]][,"age70"], datasource[[j]][,"weight"],na.rm=TRUE), female=weighted.mean(datasource[[j]][,"female"],datasource[[j]][,"weight"],na.rm=TRUE), educ=weighted.mean(datasource[[j]][,"educ"],datasource[[j]][,"weight"],na.rm=TRUE), pidS=weighted.mean(datasource[[j]][,"pidS"],datasource[[j]][,"weight"],na.rm=TRUE), faminc=weighted.mean(datasource[[j]][,"faminc"],datasource[[j]][,"weight"],na.rm=TRUE), leader=weighted.mean(datasource[[j]][,"leader"],datasource[[j]][,"weight"],na.rm=TRUE)))#
colnames(meansinputs)[colnames(meansinputs)=="v"] <- variable[t]#
### At Means ^^^#
#
if (int == max(intervals) ){ #
    plot(intervals,carole[,"point"], type="n", lwd=2, lty=1, ylim=c(0,1), yaxt="n", xaxt="n", bty="n", ylab="", xlab="", main=paste0(race[j], " Respondents"))#
#
abline(h=seq(0,1,.2), lty=2, col="gray80", cex=0.85)#
if (j==1){ mtext(side=2, line=2, paste0("P(",DVt[t], ")"), cex=0.65) }#
    lines(intervals,carole[,"point"])#
    polygon(x= c(intervals, rev(intervals)),  y= c(carole[,"high"], rev(carole[,"low"])), col=greycol, border=NA)#
    # lines(intervals, carole[,"low"], lty=3, col="gray70")#
    # lines(intervals, carole[,"high"], lty=3, col="gray70")#
    lines(intmeans, plogis(predict(f1, newdata=meansinputs, type="link")), lwd=2, col="gray20")#
    legend("topleft", legend=c(#
    paste0("constant =", round(coef(f1)[1],digits=2), " (", round(coef(summary(f1))[1,2], digits=2), ")"), #
    paste0(toString(variable[t])," =", round(coef(f1)[2],digits=2), " (", round(coef(summary(f1))[2,2], digits=2), ")"), #
    paste0("Age =", round(coef(f1)[3],digits=2), " (", round(coef(summary(f1))[3,2], digits=2), ")") , #
    paste0("Age > 70 =", round(coef(f1)[4], digits=2), " (",  round(coef(summary(f1))[4,2], digits=2), ")"), #
    paste0("Female =", round(coef(f1)[5],digits=2), " (",  round(coef(summary(f1))[5,2], digits=2), ")") ,#
    paste0("Education Level =", round(coef(f1)[6],digits=2), " (",  round(coef(summary(f1))[6,2], digits=2), ")") ,#
    paste0("PIDs =", round(coef(f1)[7],digits=2), " (",  round(coef(summary(f1))[7,2], digits=2), ")"), #
    paste0("Income =", round(coef(f1)[8],digits=2), " (",  round(coef(summary(f1))[8,2], digits=2), ")"),  #
    paste0("Represented by Leader =", round(coef(f1)[9],digits=2), " (",  round(coef(summary(f1))[9,2], digits=2), ")")),#
    cex=.85, box.col = "white", xjust = .5, yjust = 1, bg = "white")#
    axis(side=2, las=1, cex.axis=0.65)#
    axis(side=1, at=c(0,3), labels=c("Lowest Norms", "Highest Norms"), cex.axis=0.65)#
     }#
}#
#
}#
}
enacted533.list.bias <- lapply(enacted533, bias)#
enacted533.unlist.bias <- do.call(rbind, enacted533.list.bias)#
    mean(enacted533.unlist.bias)#
enacted533.eg <- simulation(enacted533, eg_TP)#
    mean(enacted533.eg)#
enacted533.meanmedian <- simulation(enacted533, meanmedian)#
    mean(enacted533.meanmedian)#
enacted533.declination <- simulation(enacted533, declination)#
    mean(enacted533.declination)#
enacted533.bias <- enacted533.unlist.bias
enacted533.list.bias <- lapply(enacted533, bias)#
enacted533.unlist.bias <- do.call(rbind, enacted533.list.bias)#
    mean(enacted533.unlist.bias)#
enacted533.eg <- simulation(enacted533, eg_TP)#
    mean(enacted533.eg)#
enacted533.meanmedian <- simulation(enacted533, meanmedian)#
    mean(enacted533.meanmedian)#
enacted533.declination <- simulation(enacted533, declination)#
    mean(enacted533.declination)#
enacted533.bias <- enacted533.unlist.bias
r(mean(enacted533.unlist.bias))
r(mean(enacted533.eg))
r(mean(enacted533.meanmedian))
r(mean(enacted533.declination))
r(mean(remedial.at.2018.unlist.bias))
r(mean(remedial.at.2018.eg))
r(mean(remedial.at.2018.meanmedian))
r(mean(remedial.at.2018.declination))
court.sims.5050.eg
Table(tab_gerry, #
    path = "Tables/_tab_gerry.tex", #
    caption = gerry.caption,#
    label = gerry.label, #
    footnote = gerry.footnote)
mean(enacted.comp)
full.coef
base.incumb.coef
pahouse.non.redist
tab_gerry.tex
sub("SD", " ", tab_gerry.tex)
gsub("SD [1-9]", "", tab_gerry.tex)
gsub("SD[1-9]", "", tab_gerry.tex)
gerry.table.gen <- #
    cbind.data.frame(#
        gtab("enacted"),#
        gtab("joint"),#
        gtab("govwolf"),#
        gtab("court")#
        )#
#
    colnames(gerry.table.gen) <- c(plan_names)#
    rownames(gerry.table.gen) <- c(#
        "Partisan Bias", #
        "CI1",#
        "Efficiency Gap",#
        "CI2",#
        "Mean/Median",#
        "CI3",#
        "Declination",#
        "CI4")#
#
gerry.caption = "Measures of Gerrymandering for the Four Considered Plans"#
gerry.label = "tab:gerry"#
gerry.footnote = "Measures are averages of 1,000 simulations for each map using the 2016 composite. Brackets numbers are the 95\\% range."#
#
tab_gerry.tex <- stargazer(gerry.table.gen,#
    style = "apsr", #
    summary=F,#
    column.sep.width = "-5pt", #
    float = T, #
    header = FALSE,#
    multicolumn = TRUE, #
    title= gerry.caption, #
    label= gerry.label,#
    notes = gerry.footnote)#
    tab_gerry.tex <- gsub("CI[1-9]", "", tab_gerry.tex)#
tab_gerry <- tab_gerry.tex[c(-6, -17, -18, -19, -20)]#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••#
# ••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••
Table(tab_gerry, #
    path = "Tables/_tab_gerry.tex", #
    caption = gerry.caption,#
    label = gerry.label, #
    footnote = gerry.footnote)
gtab("enacted")
out.sims.stats("Enacted 2011", maps.sims.seats.5050$enacted, maps.sims.votes.5050$enacted)
